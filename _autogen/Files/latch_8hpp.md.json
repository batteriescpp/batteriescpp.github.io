{
  "abstract": false,
  "anchor": "#file-latch.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-latch-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_LATCH_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/latch.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/latch.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_LATCH_HPP",
      "override": false,
      "refid": "latch_8hpp_1a1224478ab5b4e413f2bed4daef15a112",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_LATCH_HPP",
      "url": "/_autogen/Files/latch_8hpp/#define-batteries-async-latch-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/latch.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/latch.hpp",
    "line": 0
  },
  "name": "batteries/async/latch.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_LATCH_HPP\n#define BATTERIES_ASYNC_LATCH_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/assert.hpp>\n#include <batteries/async/handler.hpp>\n#include <batteries/async/watch_decl.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/shared_ptr.hpp>\n#include <batteries/status.hpp>\n#include <batteries/utility.hpp>\n\nnamespace batt {\n\ntemplate <typename T>\nclass Latch;\n\n// A write-once, single-value synchronized container.\n//\n// Similar to a Future/Promise pair, but Latch has no defined copy/move semantics.\n//\ntemplate <typename T>\nclass Latch : public RefCounted<Latch<T>>\n{\n   public:\n    enum State : u32 {\n        kInitial = 0,\n        kSetting = 1,\n        // 2 intentionally skipped; these states are treated as a bitmap of orthogonal conditions.\n        kReady = 3,\n    };\n\n    Latch() = default;\n\n    Latch(const Latch&) = delete;\n    Latch& operator=(const Latch&) = delete;\n\n    // Sets the value, closing the latch.  `args` are used to construct a `StatusOr<T>`, so you can pass an\n    // instance of `T` to `set_value`, or a `Status` to indicate an error occurred.\n    //\n    template <typename... Args>\n    bool set_value(Args&&... args)\n    {\n        const u32 prior_state = this->state_.fetch_or(kSetting);\n        if (prior_state != kInitial) {\n            return false;\n        }\n        this->value_.emplace(BATT_FORWARD(args)...);\n        this->state_.set_value(kReady);\n        return true;\n    }\n\n    // Returns true iff the latch is in the ready state.\n    //\n    bool is_ready() const\n    {\n        return this->state_.get_value() == kReady;\n    }\n\n    // Block the current task until the Latch is ready, then return the set value (or Status).\n    //\n    StatusOr<T> await()\n    {\n        Status status = this->state_.await_equal(kReady);\n        BATT_REQUIRE_OK(status);\n\n        return this->get_ready_value_or_panic();\n    }\n\n    // Same as `await()`, except this method never blocks; if the Latch isn't ready yet, it immediately\n    // returns `StatusCode::kUnavailable`.\n    //\n    StatusOr<T> poll()\n    {\n        if (this->state_.get_value() != kReady) {\n            return Status{StatusCode::kUnavailable};\n        }\n        return this->get_ready_value_or_panic();\n    }\n\n    // Returns the value of the Latch (non-blocking), panicking if it is not in the ready state.\n    //\n    StatusOr<T> get_ready_value_or_panic()\n    {\n        BATT_CHECK_EQ(this->state_.get_value(), kReady);\n        BATT_CHECK(this->value_);\n\n        return *this->value_;\n    }\n\n    // Invokes `handler` when the Latch value is set (i.e., when it enters the ready state); invokes handler\n    // immediately if the Latch is ready when this method is called.\n    //\n    template <typename Handler>\n    void async_get(Handler&& handler);\n\n    // Force the latch into an invalid state (for testing mostly).\n    //\n    void invalidate()\n    {\n        this->state_.close();\n    }\n\n   private:\n    class AsyncGetHandler;\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    Watch<u32> state_{kInitial};\n    Optional<StatusOr<T>> value_;\n};\n\n//#=##=##=#==#=#==#===#+==#+==========+==+=+=+=+=+=++=+++=+++++=-++++=-+++++++++++\n\ntemplate <typename T>\nclass Latch<T>::AsyncGetHandler\n{\n   public:\n    explicit AsyncGetHandler(Latch* latch) noexcept : latch_{latch}\n    {\n    }\n\n    template <typename Handler>\n    void operator()(Handler&& handler, const StatusOr<u32>& result) const\n    {\n        if (!result.ok()) {\n            BATT_FORWARD(handler)(result.status());\n            return;\n        }\n\n        if (*result == kReady) {\n            BATT_CHECK(this->latch_->value_);\n            BATT_FORWARD(handler)(*this->latch_->value_);\n            return;\n        }\n\n        this->latch_->state_.async_wait(/*last_seen=*/*result, bind_handler(BATT_FORWARD(handler), *this));\n    }\n\n   private:\n    Latch* latch_;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\ntemplate <typename Handler>\ninline void Latch<T>::async_get(Handler&& handler)\n{\n    this->state_.async_wait(kInitial, bind_handler(BATT_FORWARD(handler), AsyncGetHandler{this}));\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_LATCH_HPP\n\n#include <batteries/config.hpp>\n\n#if BATT_HEADER_ONLY\n#include \"watch_impl.hpp\"\n#endif",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::Latch",
      "kind": "class",
      "language": "cpp",
      "name": "batt::Latch",
      "refid": "classbatt_1_1Latch",
      "title": "batt::Latch",
      "url": "/_autogen/Classes/classbatt_1_1Latch/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::Latch",
      "kind": "class",
      "language": "cpp",
      "name": "batt::Latch",
      "refid": "classbatt_1_1Latch",
      "title": "batt::Latch",
      "url": "/_autogen/Classes/classbatt_1_1Latch/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::Latch::AsyncGetHandler",
      "kind": "class",
      "language": "cpp",
      "name": "batt::Latch::AsyncGetHandler",
      "refid": "classbatt_1_1Latch_1_1AsyncGetHandler",
      "title": "batt::Latch::AsyncGetHandler",
      "url": "/_autogen/Classes/classbatt_1_1Latch_1_1AsyncGetHandler/",
      "visibility": "public"
    }
  ],
  "refid": "latch_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/latch.hpp",
  "url": "/_autogen/Files/latch_8hpp/#file-latch.hpp",
  "visibility": "public"
}