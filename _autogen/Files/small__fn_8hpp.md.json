{
  "abstract": false,
  "anchor": "#file-small-fn.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-small-function-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_SMALL_FUNCTION_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/small_fn.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/small_fn.hpp",
        "line": 6
      },
      "name": "BATTERIES_SMALL_FUNCTION_HPP",
      "override": false,
      "refid": "small__fn_8hpp_1a5d9fee2df7d16b2e439a44871b0f4ce6",
      "static": false,
      "strong": false,
      "title": "BATTERIES_SMALL_FUNCTION_HPP",
      "url": "/_autogen/Files/small__fn_8hpp/#define-batteries-small-function-hpp",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-require-copyable",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_REQUIRE_COPYABLE",
      "hasDetails": false,
      "initializer": "static_assert(!kMoveOnly, \"This kind of SmallFn is move-only!\")",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/small_fn.hpp",
        "bodyStart": 190,
        "column": 9,
        "file": "batteries/small_fn.hpp",
        "line": 190
      },
      "name": "BATT_REQUIRE_COPYABLE",
      "override": false,
      "refid": "small__fn_8hpp_1afc5c03544c148c9991021563138295cb",
      "static": false,
      "strong": false,
      "title": "BATT_REQUIRE_COPYABLE",
      "url": "/_autogen/Files/small__fn_8hpp/#define-batt-require-copyable",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-small-fn-construct-move-only-from-copy",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_SMALL_FN_CONSTRUCT_MOVE_ONLY_FROM_COPY",
      "hasDetails": false,
      "initializer": "    template <usize kThatSize, typename = std::enable_if_t<kThatSize <= kMaxSize && kMoveOnly>>              \\\n    SmallFn(cv_qual SmallFn<Result(Args...), kThatSize, /*kMoveOnly=*/false>& that) noexcept                 \\\n        : impl_{that.impl_->copy_to_move_only(&storage_, kMaxSize)}                                          \\\n    {                                                                                                        \\\n    }",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/small_fn.hpp",
        "bodyStart": 233,
        "column": 9,
        "file": "batteries/small_fn.hpp",
        "line": 233
      },
      "name": "BATT_SMALL_FN_CONSTRUCT_MOVE_ONLY_FROM_COPY",
      "override": false,
      "params": [
        {
          "name": "cv_qual",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "small__fn_8hpp_1a26fca83b2e718a7dade27911a696f9c8",
      "static": false,
      "strong": false,
      "title": "BATT_SMALL_FN_CONSTRUCT_MOVE_ONLY_FROM_COPY",
      "url": "/_autogen/Files/small__fn_8hpp/#define-batt-small-fn-construct-move-only-from-copy",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-small-fn-assign-move-only-from-copy",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_SMALL_FN_ASSIGN_MOVE_ONLY_FROM_COPY",
      "hasDetails": false,
      "initializer": "    template <usize kThatSize, typename = std::enable_if_t<kThatSize <= kMaxSize && kMoveOnly>>              \\\n    auto operator=(cv_qual SmallFn<Result(Args...), kThatSize, false>& that) noexcept->self_type&            \\\n    {                                                                                                        \\\n        clear();                                                                                             \\\n        impl_ = that.impl_->copy_to_move_only(&storage_, kMaxSize);                                          \\\n                                                                                                             \\\n        return *this;                                                                                        \\\n    }",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "column": 9,
        "file": "batteries/small_fn.hpp",
        "line": 293
      },
      "name": "BATT_SMALL_FN_ASSIGN_MOVE_ONLY_FROM_COPY",
      "override": false,
      "params": [
        {
          "name": "cv_qual",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "small__fn_8hpp_1ab5205e1fbfe3b5ff9c3c2e54d5d2fa77",
      "static": false,
      "strong": false,
      "title": "BATT_SMALL_FN_ASSIGN_MOVE_ONLY_FROM_COPY",
      "url": "/_autogen/Files/small__fn_8hpp/#define-batt-small-fn-assign-move-only-from-copy",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/small_fn.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/small_fn.hpp",
    "line": 0
  },
  "name": "batteries/small_fn.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::detail",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::detail",
      "refid": "namespacebatt_1_1detail",
      "title": "batt::detail",
      "url": "/_autogen/Namespaces/namespacebatt_1_1detail/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "//#=##=##=#==#=#==#===#+==#+==========+==+=+=+=+=+=++=+++=+++++=-++++=-+++++++++++\n// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_SMALL_FUNCTION_HPP\n#define BATTERIES_SMALL_FUNCTION_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/assert.hpp>\n#include <batteries/cpu_align.hpp>\n#include <batteries/hint.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/static_assert.hpp>\n#include <batteries/type_traits.hpp>\n#include <batteries/utility.hpp>\n\n#include <type_traits>\n\nnamespace batt {\n\ntemplate <typename Signature, usize kMaxSize = kCpuCacheLineSize - sizeof(void*), bool kMoveOnly = false>\nclass SmallFn;\n\ntemplate <typename Signature, usize kMaxSize = kCpuCacheLineSize - sizeof(void*)>\nusing UniqueSmallFn = SmallFn<Signature, kMaxSize, /*kMoveOnly=*/true>;\n\nnamespace detail {\n\n// Forward declare the abstract base class templates for function type erasure.\n//\ntemplate <bool kMoveOnly, typename Result, typename... Args>\nclass AbstractMoveFn;\n\ntemplate <typename Result, typename... Args>\nclass AbstractCopyFn;\n\n// Templated alias for the type-erased function interface; kMoveOnly controls\n// whether copy semantics are enabled.\n//\ntemplate <bool kMoveOnly, typename Result, typename... Args>\nusing AbstractFn =\n    std::conditional_t<kMoveOnly, AbstractMoveFn<true, Result, Args...>, AbstractCopyFn<Result, Args...>>;\n\n// Forward declare the implementation class templates for function type erasure.\n//\ntemplate <typename Fn, bool kMoveOnly, typename Result, typename... Args>\nclass MoveFnImpl;\n\ntemplate <typename Fn, typename Result, typename... Args>\nclass CopyFnImpl;\n\ntemplate <typename Fn, bool kMoveOnly, typename Result, typename... Args>\nusing FnImpl = std::conditional_t<kMoveOnly, MoveFnImpl<Fn, kMoveOnly, Result, Args...>,\n                                  CopyFnImpl<Fn, Result, Args...>>;\n\n// Base class for abstract function types.  Defines the common\n// interface/concept for move-only and copyable functions:\n// - Invocable (with the signature `auto(Args...)->Result`)\n// - Move-Constructible/Assignable\n// - Destructible\n//\ntemplate <bool kMoveOnly, typename Result, typename... Args>\nclass AbstractMoveFn\n{\n   protected:\n    AbstractMoveFn() = default;\n\n   public:\n    AbstractMoveFn(const AbstractMoveFn&) = delete;\n    AbstractMoveFn& operator=(const AbstractMoveFn&) = delete;\n\n    virtual ~AbstractMoveFn() = default;\n\n    virtual auto invoke(Args... args) noexcept -> Result = 0;\n\n    // Move construct from `this` into `storage`.  `size` MUST be big enough to\n    // fit the stored function, otherwise this method will assert-crash.\n    // Invalidates `this`; `invoke` must not be called after `move`.\n    //\n    virtual auto move(void* storage, usize size) noexcept -> AbstractFn<kMoveOnly, Result, Args...>* = 0;\n};\n\n// Adds copy semantics to the basic type-erased concept.\n//\ntemplate <typename Result, typename... Args>\nclass AbstractCopyFn : public AbstractMoveFn<false, Result, Args...>\n{\n   public:\n    using AbstractMoveFn<false, Result, Args...>::AbstractMoveFn;\n\n    // Copy construct from `this` into `storage`.  `size` MUST be big enough to\n    // fit the stored function, otherwise this method will assert-crash.\n    //\n    virtual auto copy(void* memory, usize size) const noexcept -> AbstractFn<false, Result, Args...>* = 0;\n\n    // Same as `copy`, but the returned type-erased object drops the ability to\n    // copy in favor of a move-only interface.\n    //\n    virtual auto copy_to_move_only(void* memory, usize size) const noexcept\n        -> AbstractFn<true, Result, Args...>* = 0;\n};\n\n// Implements the basic concept; can be extended because `fn_` is protected,\n// not private.\n//\ntemplate <typename Fn, bool kMoveOnly, typename Result, typename... Args>\nclass MoveFnImpl : public AbstractFn<kMoveOnly, Result, Args...>\n{\n   public:\n    using self_type = MoveFnImpl;\n\n    template <typename FnRef>\n    explicit MoveFnImpl(FnRef&& ref) : fn_(BATT_FORWARD(ref))\n    {\n    }\n\n    Result invoke(Args... args) noexcept override\n    {\n        return fn_(BATT_FORWARD(args)...);\n    }\n\n    AbstractFn<kMoveOnly, Result, Args...>* move(void* memory, usize size) noexcept override\n    {\n        BATT_CHECK_LE(sizeof(self_type), size);\n\n        return new (memory) FnImpl<Fn, kMoveOnly, Result, Args...>(std::move(fn_));\n    }\n\n   protected:\n    Fn fn_;\n};\n\n// Extends MoveFnImpl to implement copy semantics in terms of the concrete\n// type `Fn`.\n//\ntemplate <typename Fn, typename Result, typename... Args>\nclass CopyFnImpl : public MoveFnImpl<Fn, /*kMoveOnly=*/false, Result, Args...>\n{\n   public:\n    using self_type = CopyFnImpl;\n\n    using MoveFnImpl<Fn, /*kMoveOnly=*/false, Result, Args...>::MoveFnImpl;\n\n    AbstractFn<false, Result, Args...>* copy(void* memory, usize size) const noexcept override\n    {\n        BATT_CHECK_LE(sizeof(self_type), size);\n\n        return new (memory) FnImpl<Fn, /*kMoveOnly=*/false, Result, Args...>(this->fn_);\n    }\n\n    AbstractFn<true, Result, Args...>* copy_to_move_only(void* memory, usize size) const noexcept override\n    {\n        BATT_CHECK_LE(sizeof(self_type), size);\n\n        return new (memory) FnImpl<Fn, /*kMoveOnly=*/true, Result, Args...>(this->fn_);\n    }\n};\n\n}  // namespace detail\n\ntemplate <typename... Args, typename Result, usize kMaxSize, bool kMoveOnly>\nclass SmallFn<auto(Args...)->Result, kMaxSize, kMoveOnly>\n{\n    template <typename, usize, bool>\n    friend class SmallFn;\n\n    // The type-erased interface to use, depending on the value of `kMoveOnly`.\n    //\n    using AbstractFn = detail::AbstractFn<kMoveOnly, Result, Args...>;\n\n    // The concrete type erasure, depending on the value of `kMoveOnly`.\n    //\n    template <typename Fn>\n    using FnImpl = detail::FnImpl<Fn, kMoveOnly, Result, Args...>;\n\n#define BATT_REQUIRE_COPYABLE static_assert(!kMoveOnly, \"This kind of SmallFn is move-only!\")\n\n    template <typename Fn>\n    static auto check_fn_size(Fn&& fn) -> Fn&&\n    {\n        BATT_STATIC_ASSERT_LE(sizeof(FnImpl<std::decay_t<Fn>>),\n                              kMaxSize);  // \"Passed function is not small!\"\n\n        return BATT_FORWARD(fn);\n    }\n\n   public:\n    using self_type = SmallFn;\n\n    using result_type = Result;\n\n    SmallFn() = default;\n\n    template <typename Fn, typename = EnableIfNoShadow<SmallFn, Fn>,\n              typename = std::enable_if_t<IsCallable<Fn, Args...>{}>>\n    SmallFn(Fn&& fn) noexcept\n        : impl_{new (&storage_) FnImpl<std::decay_t<Fn>>(check_fn_size(BATT_FORWARD(fn)))}\n    {\n    }\n\n    SmallFn(self_type&& that) noexcept\n        : impl_{[&] {\n            auto impl =\n                BATT_HINT_TRUE(that.impl_ != nullptr) ? that.impl_->move(&storage_, kMaxSize) : nullptr;\n            that.clear();\n            return impl;\n        }()}\n    {\n    }\n\n    SmallFn(const self_type& that) noexcept\n        : impl_{[&] {\n            BATT_REQUIRE_COPYABLE;\n            return BATT_HINT_TRUE(that.impl_ != nullptr) ? that.impl_->copy(&storage_, kMaxSize) : nullptr;\n        }()}\n    {\n    }\n\n#define BATT_SMALL_FN_CONSTRUCT_MOVE_ONLY_FROM_COPY(cv_qual)                                                 \\\n    template <usize kThatSize, typename = std::enable_if_t<kThatSize <= kMaxSize && kMoveOnly>>              \\\n    SmallFn(cv_qual SmallFn<Result(Args...), kThatSize, /*kMoveOnly=*/false>& that) noexcept                 \\\n        : impl_{that.impl_->copy_to_move_only(&storage_, kMaxSize)}                                          \\\n    {                                                                                                        \\\n    }\n\n    BATT_SMALL_FN_CONSTRUCT_MOVE_ONLY_FROM_COPY()\n    BATT_SMALL_FN_CONSTRUCT_MOVE_ONLY_FROM_COPY(const)\n\n#undef BATT_SMALL_FN_CONSTRUCT_MOVE_ONLY_FROM_COPY\n\n    ~SmallFn() noexcept\n    {\n        clear();\n    }\n\n    auto clear() noexcept -> void\n    {\n        if (BATT_HINT_TRUE(impl_ != nullptr)) {\n            impl_->~AbstractFn();\n            impl_ = nullptr;\n        }\n    }\n\n    auto operator=(std::nullptr_t) noexcept -> self_type&\n    {\n        this->clear();\n        return *this;\n    }\n\n    template <typename Fn, typename = EnableIfNoShadow<SmallFn, Fn>>\n    auto operator=(Fn&& fn) noexcept -> self_type&\n    {\n        clear();\n        impl_ = new (&storage_) FnImpl<std::decay_t<Fn>>(std::forward<Fn>(fn));\n        return *this;\n    }\n\n    auto operator=(self_type&& that) noexcept -> self_type&\n    {\n        if (BATT_HINT_TRUE(this != &that)) {\n            clear();\n            impl_ = BATT_HINT_TRUE(that.impl_ != nullptr) ? that.impl_->move(&storage_, kMaxSize) : nullptr;\n            that.clear();\n        }\n        return *this;\n    }\n\n    auto operator=(const self_type& that) noexcept -> self_type&\n    {\n        BATT_REQUIRE_COPYABLE;\n\n        if (BATT_HINT_TRUE(this != &that)) {\n            clear();\n            impl_ = BATT_HINT_TRUE(that.impl_ != nullptr) ? that.impl_->copy(&storage_, kMaxSize) : nullptr;\n        }\n        return *this;\n    }\n\n#define BATT_SMALL_FN_ASSIGN_MOVE_ONLY_FROM_COPY(cv_qual)                                                    \\\n    template <usize kThatSize, typename = std::enable_if_t<kThatSize <= kMaxSize && kMoveOnly>>              \\\n    auto operator=(cv_qual SmallFn<Result(Args...), kThatSize, false>& that) noexcept->self_type&            \\\n    {                                                                                                        \\\n        clear();                                                                                             \\\n        impl_ = that.impl_->copy_to_move_only(&storage_, kMaxSize);                                          \\\n                                                                                                             \\\n        return *this;                                                                                        \\\n    }\n\n    BATT_SMALL_FN_ASSIGN_MOVE_ONLY_FROM_COPY()\n    BATT_SMALL_FN_ASSIGN_MOVE_ONLY_FROM_COPY(const)\n\n#undef BATT_SMALL_FN_ASSIGN_MOVE_ONLY_FROM_COPY\n\n    explicit operator bool() const noexcept\n    {\n        return impl_ != nullptr;\n    }\n\n    auto operator()(Args... args) const -> Result\n    {\n        BATT_ASSERT_NOT_NULLPTR(impl_);\n        return impl_->invoke(BATT_FORWARD(args)...);\n    }\n\n   private:\n    std::aligned_storage_t<kMaxSize> storage_;  // must come before `impl_`\n    AbstractFn* impl_ = nullptr;\n\n#undef BATT_REQUIRE_COPYABLE\n\n};  // class SmallFn\n\n}  // namespace batt\n\n#endif  // BATTERIES_SMALL_FUNCTION_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "brief": "A type-erased container for a callable function-like object with a statically bounded maximum size. ",
      "category": "classes",
      "fullname": "batt::SmallFn",
      "kind": "class",
      "language": "cpp",
      "name": "batt::SmallFn",
      "refid": "classbatt_1_1SmallFn",
      "summary": "A type-erased container for a callable function-like object with a statically bounded maximum size. ",
      "title": "batt::SmallFn",
      "url": "/_autogen/Classes/classbatt_1_1SmallFn/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::AbstractMoveFn",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::AbstractMoveFn",
      "refid": "classbatt_1_1detail_1_1AbstractMoveFn",
      "title": "batt::detail::AbstractMoveFn",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1AbstractMoveFn/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::AbstractCopyFn",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::AbstractCopyFn",
      "refid": "classbatt_1_1detail_1_1AbstractCopyFn",
      "title": "batt::detail::AbstractCopyFn",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1AbstractCopyFn/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::MoveFnImpl",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::MoveFnImpl",
      "refid": "classbatt_1_1detail_1_1MoveFnImpl",
      "title": "batt::detail::MoveFnImpl",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1MoveFnImpl/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::CopyFnImpl",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::CopyFnImpl",
      "refid": "classbatt_1_1detail_1_1CopyFnImpl",
      "title": "batt::detail::CopyFnImpl",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1CopyFnImpl/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::AbstractMoveFn",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::AbstractMoveFn",
      "refid": "classbatt_1_1detail_1_1AbstractMoveFn",
      "title": "batt::detail::AbstractMoveFn",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1AbstractMoveFn/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::AbstractCopyFn",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::AbstractCopyFn",
      "refid": "classbatt_1_1detail_1_1AbstractCopyFn",
      "title": "batt::detail::AbstractCopyFn",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1AbstractCopyFn/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::MoveFnImpl",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::MoveFnImpl",
      "refid": "classbatt_1_1detail_1_1MoveFnImpl",
      "title": "batt::detail::MoveFnImpl",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1MoveFnImpl/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::CopyFnImpl",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::CopyFnImpl",
      "refid": "classbatt_1_1detail_1_1CopyFnImpl",
      "title": "batt::detail::CopyFnImpl",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1CopyFnImpl/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::kMoveOnly",
      "kind": "class",
      "language": "cpp",
      "name": "batt::kMoveOnly",
      "refid": "classbatt_1_1kMoveOnly",
      "title": "batt::kMoveOnly",
      "url": "/_autogen/Classes/classbatt_1_1kMoveOnly/",
      "visibility": "public"
    }
  ],
  "refid": "small__fn_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/small_fn.hpp",
  "url": "/_autogen/Files/small__fn_8hpp/#file-small-fn.hpp",
  "visibility": "public"
}