{
  "abstract": false,
  "anchor": "#file-strong-typedef.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batt-strong-typedef-paste-2-",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_STRONG_TYPEDEF_PASTE_2_",
      "hasDetails": false,
      "initializer": "a##b",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/strong_typedef.hpp",
        "bodyStart": 82,
        "column": 9,
        "file": "batteries/strong_typedef.hpp",
        "line": 82
      },
      "name": "BATT_STRONG_TYPEDEF_PASTE_2_",
      "override": false,
      "params": [
        {
          "name": "a",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "b",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "strong__typedef_8hpp_1a56dea2162ab13174c3bd5c8901bc1dcf",
      "static": false,
      "strong": false,
      "title": "BATT_STRONG_TYPEDEF_PASTE_2_",
      "url": "/_autogen/Files/strong__typedef_8hpp/#define-batt-strong-typedef-paste-2-",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-strong-typedef-paste-",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_STRONG_TYPEDEF_PASTE_",
      "hasDetails": false,
      "initializer": "BATT_STRONG_TYPEDEF_PASTE_2_(a, b)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/strong_typedef.hpp",
        "bodyStart": 83,
        "column": 9,
        "file": "batteries/strong_typedef.hpp",
        "line": 83
      },
      "name": "BATT_STRONG_TYPEDEF_PASTE_",
      "override": false,
      "params": [
        {
          "name": "a",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "b",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "strong__typedef_8hpp_1a4e5a090b022993811d2fcc46dc8fcd61",
      "static": false,
      "strong": false,
      "title": "BATT_STRONG_TYPEDEF_PASTE_",
      "url": "/_autogen/Files/strong__typedef_8hpp/#define-batt-strong-typedef-paste-",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-strong-typedef",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_STRONG_TYPEDEF",
      "hasDetails": false,
      "initializer": "BATT_STRONG_TYPEDEF_WITH_DEFAULT(TYPE, NAME, TYPE{})",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/strong_typedef.hpp",
        "bodyStart": 85,
        "column": 9,
        "file": "batteries/strong_typedef.hpp",
        "line": 85
      },
      "name": "BATT_STRONG_TYPEDEF",
      "override": false,
      "params": [
        {
          "name": "TYPE",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "NAME",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "strong__typedef_8hpp_1a7729b67c268b777739a22197d421515f",
      "static": false,
      "strong": false,
      "title": "BATT_STRONG_TYPEDEF",
      "url": "/_autogen/Files/strong__typedef_8hpp/#define-batt-strong-typedef",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-strong-typedef-with-default",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_STRONG_TYPEDEF_WITH_DEFAULT",
      "hasDetails": false,
      "initializer": "    struct BATT_STRONG_TYPEDEF_PASTE_(NAME, _TAG);                                                           \\\n    inline constexpr TYPE strong_typedef_default_value(BATT_STRONG_TYPEDEF_PASTE_(NAME, _TAG)*)              \\\n    {                                                                                                        \\\n        return VALUE;                                                                                        \\\n    }                                                                                                        \\\n    using NAME = ::batt::StrongType<TYPE, BATT_STRONG_TYPEDEF_PASTE_(NAME, _TAG)>",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/strong_typedef.hpp",
        "bodyStart": 87,
        "column": 9,
        "file": "batteries/strong_typedef.hpp",
        "line": 87
      },
      "name": "BATT_STRONG_TYPEDEF_WITH_DEFAULT",
      "override": false,
      "params": [
        {
          "name": "TYPE",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "NAME",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "VALUE",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "strong__typedef_8hpp_1a2305631119c8ce9089c15535ef5143fb",
      "static": false,
      "strong": false,
      "title": "BATT_STRONG_TYPEDEF_WITH_DEFAULT",
      "url": "/_autogen/Files/strong__typedef_8hpp/#define-batt-strong-typedef-with-default",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-strong-typedef-supports-numerics",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_STRONG_TYPEDEF_SUPPORTS_NUMERICS",
      "hasDetails": false,
      "initializer": "    inline constexpr std::true_type batt_strong_typedef_supports_numerics(                                   \\\n        BATT_STRONG_TYPEDEF_PASTE_(NAME, _TAG)*)                                                             \\\n    {                                                                                                        \\\n        return {};                                                                                           \\\n    }",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/strong_typedef.hpp",
        "bodyStart": 95,
        "column": 9,
        "file": "batteries/strong_typedef.hpp",
        "line": 95
      },
      "name": "BATT_STRONG_TYPEDEF_SUPPORTS_NUMERICS",
      "override": false,
      "params": [
        {
          "name": "NAME",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "strong__typedef_8hpp_1a756d077992f9f011aaf3ac64f07d7bf9",
      "static": false,
      "strong": false,
      "title": "BATT_STRONG_TYPEDEF_SUPPORTS_NUMERICS",
      "url": "/_autogen/Files/strong__typedef_8hpp/#define-batt-strong-typedef-supports-numerics",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-strong-typedef-numeric-operator-defn",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_STRONG_TYPEDEF_NUMERIC_OPERATOR_DEFN",
      "hasDetails": false,
      "initializer": "    template <typename T, typename Tag,                                                                      \\\n              typename = std::enable_if_t<batt_strong_typedef_supports_numerics((Tag*)nullptr)>>             \\\n    constexpr StrongType<T, Tag> op_long(StrongType<T, Tag> a, StrongType<T, Tag> b)                         \\\n    {                                                                                                        \\\n        return StrongType<T, Tag>{a.value() op_short b.value()};                                             \\\n    }",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/strong_typedef.hpp",
        "bodyStart": 102,
        "column": 9,
        "file": "batteries/strong_typedef.hpp",
        "line": 102
      },
      "name": "BATT_STRONG_TYPEDEF_NUMERIC_OPERATOR_DEFN",
      "override": false,
      "params": [
        {
          "name": "op_long",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "op_short",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "strong__typedef_8hpp_1a34ae9f4ccc2a066bf8692a81e4aa8d01",
      "static": false,
      "strong": false,
      "title": "BATT_STRONG_TYPEDEF_NUMERIC_OPERATOR_DEFN",
      "url": "/_autogen/Files/strong__typedef_8hpp/#define-batt-strong-typedef-numeric-operator-defn",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/strong_typedef.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/strong_typedef.hpp",
    "line": 0
  },
  "name": "batteries/strong_typedef.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#ifndef BATT_STRONG_TYPEDEF_HPP\n#define BATT_STRONG_TYPEDEF_HPP\n\n#include <batteries/config.hpp>\n//\n\n#include <functional>\n#include <type_traits>\n\n// Must be outside namespace batt so we can do ADL.\n//\ninline constexpr std::false_type batt_strong_typedef_supports_numerics(...)\n{\n    return {};\n}\n\nnamespace batt {\n\ntemplate <typename T, typename Tag>\nclass StrongType;\n\ntemplate <typename T, typename Tag>\nclass StrongType\n{\n    static_assert(std::is_pod<T>{}, \"`T` must be a POD type.\");\n\n   public:\n    using value_type = T;\n    using tag_type = Tag;\n\n    constexpr StrongType() noexcept : value_{strong_typedef_default_value((Tag*)nullptr)}\n    {\n    }\n\n    explicit constexpr StrongType(T init_value) noexcept : value_{init_value}\n    {\n    }\n\n    constexpr T value() const\n    {\n        return value_;\n    }\n\n    constexpr operator T() const\n    {\n        return value();\n    }\n\n    struct Delta;\n\n    StrongType& operator+=(Delta d);\n    StrongType& operator-=(Delta d);\n\n    struct Hash {\n        using result_type = typename std::hash<T>::result_type;\n\n        result_type operator()(const StrongType& obj) const\n        {\n            return impl_(obj.value());\n        }\n\n       private:\n        std::hash<T> impl_;\n    };\n\n   private:\n    T value_;\n};\n\ntemplate <typename T, typename Tag>\nstruct StrongType<T, Tag>::Delta : StrongType<T, Tag> {\n    using StrongType::StrongType;\n\n    /*implicit*/ Delta(StrongType value) noexcept : StrongType{value}\n    {\n    }\n};\n\n#define BATT_STRONG_TYPEDEF_PASTE_2_(a, b) a##b\n#define BATT_STRONG_TYPEDEF_PASTE_(a, b) BATT_STRONG_TYPEDEF_PASTE_2_(a, b)\n\n#define BATT_STRONG_TYPEDEF(TYPE, NAME) BATT_STRONG_TYPEDEF_WITH_DEFAULT(TYPE, NAME, TYPE{})\n\n#define BATT_STRONG_TYPEDEF_WITH_DEFAULT(TYPE, NAME, VALUE)                                                  \\\n    struct BATT_STRONG_TYPEDEF_PASTE_(NAME, _TAG);                                                           \\\n    inline constexpr TYPE strong_typedef_default_value(BATT_STRONG_TYPEDEF_PASTE_(NAME, _TAG)*)              \\\n    {                                                                                                        \\\n        return VALUE;                                                                                        \\\n    }                                                                                                        \\\n    using NAME = ::batt::StrongType<TYPE, BATT_STRONG_TYPEDEF_PASTE_(NAME, _TAG)>\n\n#define BATT_STRONG_TYPEDEF_SUPPORTS_NUMERICS(NAME)                                                          \\\n    inline constexpr std::true_type batt_strong_typedef_supports_numerics(                                   \\\n        BATT_STRONG_TYPEDEF_PASTE_(NAME, _TAG)*)                                                             \\\n    {                                                                                                        \\\n        return {};                                                                                           \\\n    }\n\n#define BATT_STRONG_TYPEDEF_NUMERIC_OPERATOR_DEFN(op_long, op_short)                                         \\\n    template <typename T, typename Tag,                                                                      \\\n              typename = std::enable_if_t<batt_strong_typedef_supports_numerics((Tag*)nullptr)>>             \\\n    constexpr StrongType<T, Tag> op_long(StrongType<T, Tag> a, StrongType<T, Tag> b)                         \\\n    {                                                                                                        \\\n        return StrongType<T, Tag>{a.value() op_short b.value()};                                             \\\n    }\n\nBATT_STRONG_TYPEDEF_NUMERIC_OPERATOR_DEFN(operator+, +)\nBATT_STRONG_TYPEDEF_NUMERIC_OPERATOR_DEFN(operator-, -)\nBATT_STRONG_TYPEDEF_NUMERIC_OPERATOR_DEFN(operator*, *)\nBATT_STRONG_TYPEDEF_NUMERIC_OPERATOR_DEFN(operator/, /)\n\ntemplate <typename T, typename Tag>\ninline StrongType<T, Tag>& StrongType<T, Tag>::operator+=(Delta d)\n{\n    static_assert(batt_strong_typedef_supports_numerics((Tag*)nullptr),\n                  \"This StrongType does not support numeric operations; see \"\n                  \"BATT_STRONG_TYPEDEF_SUPPORTS_NUMERICS\");\n\n    value_ += d;\n\n    return *this;\n}\n\ntemplate <typename T, typename Tag>\ninline StrongType<T, Tag>& StrongType<T, Tag>::operator-=(Delta d)\n{\n    static_assert(batt_strong_typedef_supports_numerics((Tag*)nullptr),\n                  \"This StrongType does not support numeric operations; see \"\n                  \"BATT_STRONG_TYPEDEF_SUPPORTS_NUMERICS\");\n\n    value_ -= d;\n\n    return *this;\n}\n\n}  // namespace batt\n\n#endif  // BATT_STRONG_TYPEDEF_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "derivedClasses": [
        {
          "external": false,
          "name": "batt::StrongType< T, Tag >::Delta",
          "refid": "structbatt_1_1StrongType_1_1Delta",
          "url": "/_autogen/Classes/structbatt_1_1StrongType_1_1Delta/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "fullname": "batt::StrongType",
      "kind": "class",
      "language": "cpp",
      "name": "batt::StrongType",
      "refid": "classbatt_1_1StrongType",
      "title": "batt::StrongType",
      "url": "/_autogen/Classes/classbatt_1_1StrongType/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "derivedClasses": [
        {
          "external": false,
          "name": "batt::StrongType< T, Tag >::Delta",
          "refid": "structbatt_1_1StrongType_1_1Delta",
          "url": "/_autogen/Classes/structbatt_1_1StrongType_1_1Delta/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "fullname": "batt::StrongType",
      "kind": "class",
      "language": "cpp",
      "name": "batt::StrongType",
      "refid": "classbatt_1_1StrongType",
      "title": "batt::StrongType",
      "url": "/_autogen/Classes/classbatt_1_1StrongType/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::StrongType::Hash",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::StrongType::Hash",
      "refid": "structbatt_1_1StrongType_1_1Hash",
      "title": "batt::StrongType::Hash",
      "url": "/_autogen/Classes/structbatt_1_1StrongType_1_1Hash/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::StrongType< T, Tag >",
          "refid": "classbatt_1_1StrongType",
          "url": "/_autogen/Classes/classbatt_1_1StrongType/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::StrongType::Delta",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::StrongType::Delta",
      "refid": "structbatt_1_1StrongType_1_1Delta",
      "title": "batt::StrongType::Delta",
      "url": "/_autogen/Classes/structbatt_1_1StrongType_1_1Delta/",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-batt-strong-typedef-supports-numerics",
      "argsString": "(...)",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "constexpr std::false_type batt_strong_typedef_supports_numerics",
      "deleted": false,
      "explicit": false,
      "fullname": "strong_typedef.hpp::batt_strong_typedef_supports_numerics",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 18,
        "bodyFile": "batteries/strong_typedef.hpp",
        "bodyStart": 15,
        "column": 34,
        "file": "batteries/strong_typedef.hpp",
        "line": 15
      },
      "name": "batt_strong_typedef_supports_numerics",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "...",
          "typePlain": "..."
        }
      ],
      "pureVirtual": false,
      "refid": "strong__typedef_8hpp_1a443a411635b06d4ac038c086fa6b601b",
      "static": false,
      "strong": false,
      "title": "batt_strong_typedef_supports_numerics",
      "type": "constexpr std::false_type",
      "typePlain": "constexpr std::false_type",
      "url": "/_autogen/Files/strong__typedef_8hpp/#function-batt-strong-typedef-supports-numerics",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "refid": "strong__typedef_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/strong_typedef.hpp",
  "url": "/_autogen/Files/strong__typedef_8hpp/#file-strong-typedef.hpp",
  "visibility": "public"
}