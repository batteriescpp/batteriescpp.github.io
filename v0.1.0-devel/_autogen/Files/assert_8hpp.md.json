{
  "abstract": false,
  "anchor": "#file-assert.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batt-fail-check-out",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_FAIL_CHECK_OUT",
      "hasDetails": false,
      "initializer": "std::cerr",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 31,
        "column": 10,
        "file": "batteries/assert.hpp",
        "line": 31
      },
      "name": "BATT_FAIL_CHECK_OUT",
      "override": false,
      "refid": "assert_8hpp_1a4b4735315cbae80d4c151455536f573d",
      "static": false,
      "strong": false,
      "title": "BATT_FAIL_CHECK_OUT",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-fail-check-out",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-fail-check-message",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_FAIL_CHECK_MESSAGE",
      "hasDetails": false,
      "initializer": "    BATT_FAIL_CHECK_OUT << \"FATAL: \" << file << \":\" << line << \": Assertion failed: \" << left_str << \" \"     \\\n                        << op_str << \" \" << right_str << \"\\n (in `\" << fn_name << \"`)\\n\\n\"                   \\\n                        << \"  \" << left_str << \" == \" << ::batt::make_printable(left_val) << ::std::endl     \\\n                        << ::std::endl                                                                       \\\n                        << \"  \" << right_str << \" == \" << ::batt::make_printable(right_val) << ::std::endl   \\\n                        << ::std::endl",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 43,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 43
      },
      "name": "BATT_FAIL_CHECK_MESSAGE",
      "override": false,
      "params": [
        {
          "name": "left_str",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "left_val",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "op_str",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "right_str",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "right_val",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "file",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "line",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "fn_name",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a15f382e72f7b4b874a352909b2d840d0",
      "static": false,
      "strong": false,
      "title": "BATT_FAIL_CHECK_MESSAGE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-fail-check-message",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-noreturn",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_NORETURN",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 61,
        "column": 10,
        "file": "batteries/assert.hpp",
        "line": 61
      },
      "name": "BATT_NORETURN",
      "override": false,
      "refid": "assert_8hpp_1a07cdd5b17a0f239949a129d9d4558d19",
      "static": false,
      "strong": false,
      "title": "BATT_NORETURN",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-noreturn",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-unreachable",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_UNREACHABLE",
      "hasDetails": false,
      "initializer": "(void)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 62,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 62
      },
      "name": "BATT_UNREACHABLE",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a746776ef5059e9055866708f0ac3be9c",
      "static": false,
      "strong": false,
      "title": "BATT_UNREACHABLE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-unreachable",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-relation",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_RELATION",
      "hasDetails": false,
      "initializer": "    for (; !BATT_HINT_TRUE((left)op(right)) && BATT_HINT_TRUE(::batt::lock_fail_check_mutex());              \\\n         ::batt::fail_check_exit())                                                                          \\\n    BATT_FAIL_CHECK_MESSAGE(#left, (left), #op, #right, (right), __FILE__, __LINE__, __PRETTY_FUNCTION__)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 76,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 76
      },
      "name": "BATT_CHECK_RELATION",
      "override": false,
      "params": [
        {
          "name": "left",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "op",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "right",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a6f8c922670a99f511a05d91795634aac",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_RELATION",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-relation",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-implies",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_IMPLIES",
      "hasDetails": false,
      "initializer": "    for (; !BATT_HINT_TRUE(!(p) || (q)) && BATT_HINT_TRUE(::batt::lock_fail_check_mutex());                  \\\n         ::batt::fail_check_exit())                                                                          \\\n    BATT_FAIL_CHECK_MESSAGE(#p, (p), \"implies\", #q, (q), __FILE__, __LINE__, __PRETTY_FUNCTION__)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 81,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 81
      },
      "name": "BATT_CHECK_IMPLIES",
      "override": false,
      "params": [
        {
          "name": "p",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "q",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a2ae9eb528c2ba6c1980dde01fa490822",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_IMPLIES",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-implies",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check",
      "brief": "This is only a test... ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK",
      "hasDetails": true,
      "initializer": "BATT_CHECK_RELATION(bool{x}, ==, true)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 89,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 89
      },
      "name": "BATT_CHECK",
      "override": false,
      "paramList": [
        {
          "name": "x",
          "text": "The expression to test. "
        }
      ],
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a25e14a0e9e0a233781d47532983a6966",
      "static": false,
      "strong": false,
      "summary": "This is only a test... ",
      "title": "BATT_CHECK",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-eq",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_EQ",
      "hasDetails": false,
      "initializer": "BATT_CHECK_RELATION(x, ==, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 91,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 91
      },
      "name": "BATT_CHECK_EQ",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a6710d7c96160888ef92cb01e24b9b77f",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_EQ",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-eq",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-ne",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_NE",
      "hasDetails": false,
      "initializer": "BATT_CHECK_RELATION(x, !=, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 92,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 92
      },
      "name": "BATT_CHECK_NE",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a5ce959ec4bf4b8f960fcfc9552e2fa8e",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_NE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-ne",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-ge",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_GE",
      "hasDetails": false,
      "initializer": "BATT_CHECK_RELATION(x, >=, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 93,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 93
      },
      "name": "BATT_CHECK_GE",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a5015f3a1a09fb9d70b7733bb6de4b692",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_GE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-ge",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-gt",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_GT",
      "hasDetails": false,
      "initializer": "BATT_CHECK_RELATION(x, >, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 94,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 94
      },
      "name": "BATT_CHECK_GT",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a8a52a86ee531016a9c52d7b57c9172cd",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_GT",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-gt",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-le",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_LE",
      "hasDetails": false,
      "initializer": "BATT_CHECK_RELATION(x, <=, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 95,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 95
      },
      "name": "BATT_CHECK_LE",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1ad18d2068bf68bd563791fbb0d548a075",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_LE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-le",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-lt",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_LT",
      "hasDetails": false,
      "initializer": "BATT_CHECK_RELATION(x, <, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 96,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 96
      },
      "name": "BATT_CHECK_LT",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a371dd835ab9ecd18ee5b16d928d376cf",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_LT",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-lt",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-fail",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_FAIL",
      "hasDetails": false,
      "initializer": "BATT_CHECK(false)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 97,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 97
      },
      "name": "BATT_CHECK_FAIL",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a641fb7f428899714a97d09fea012362d",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_FAIL",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-fail",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-in-range",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_IN_RANGE",
      "hasDetails": false,
      "initializer": "    [&](auto&& Actual_Value) {                                                                               \\\n        BATT_CHECK_LE(low, Actual_Value)                                                                     \\\n            << \"Expression \" << #x << \" == \" << Actual_Value << \" is out-of-range\";                          \\\n        BATT_CHECK_LT(Actual_Value, high)                                                                    \\\n            << \"Expression \" << #x << \" == \" << Actual_Value << \" is out-of-range\";                          \\\n    }(x)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 99,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 99
      },
      "name": "BATT_CHECK_IN_RANGE",
      "override": false,
      "params": [
        {
          "name": "low",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "high",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1adc223fcfe0c1d09c053f89e3720713f2",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_IN_RANGE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-in-range",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert-disabled",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT_DISABLED",
      "hasDetails": false,
      "initializer": "    if (false && ignored_inputs)                                                                             \\\n    BATT_FAIL_CHECK_OUT << \"\"",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 106,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 106
      },
      "name": "BATT_ASSERT_DISABLED",
      "override": false,
      "params": [
        {
          "name": "ignored_inputs",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a6b5ddba087a51ad728f47b5fce58c2a8",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT_DISABLED",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert-disabled",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT",
      "hasDetails": false,
      "initializer": "BATT_CHECK(x)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 112,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 112
      },
      "name": "BATT_ASSERT",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a3e907f641bf0e0ea2c039fd850bfed8f",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert-eq",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT_EQ",
      "hasDetails": false,
      "initializer": "BATT_CHECK_EQ(x, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 113,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 113
      },
      "name": "BATT_ASSERT_EQ",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1ae29320a307a89de446631441c9358f3e",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT_EQ",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert-eq",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert-ne",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT_NE",
      "hasDetails": false,
      "initializer": "BATT_CHECK_NE(x, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 114,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 114
      },
      "name": "BATT_ASSERT_NE",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a8992207a98935bd8507244297f149900",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT_NE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert-ne",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert-ge",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT_GE",
      "hasDetails": false,
      "initializer": "BATT_CHECK_GE(x, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 115,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 115
      },
      "name": "BATT_ASSERT_GE",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a47b31ada0220b985f618782edb0dfccb",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT_GE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert-ge",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert-gt",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT_GT",
      "hasDetails": false,
      "initializer": "BATT_CHECK_GT(x, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 116,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 116
      },
      "name": "BATT_ASSERT_GT",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a872fc71bbe7845b608685e201982cb71",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT_GT",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert-gt",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert-le",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT_LE",
      "hasDetails": false,
      "initializer": "BATT_CHECK_LE(x, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 117,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 117
      },
      "name": "BATT_ASSERT_LE",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a8bf9dbf3ca3c70fa4e58e687374a582b",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT_LE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert-le",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert-lt",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT_LT",
      "hasDetails": false,
      "initializer": "BATT_CHECK_LT(x, y)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 118,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 118
      },
      "name": "BATT_ASSERT_LT",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "y",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1acba163cea7e19f35d55977d2281fdfb6",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT_LT",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert-lt",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert-implies",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT_IMPLIES",
      "hasDetails": false,
      "initializer": "BATT_CHECK_IMPLIES(p, q)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 119,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 119
      },
      "name": "BATT_ASSERT_IMPLIES",
      "override": false,
      "params": [
        {
          "name": "p",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "q",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1afccf01fddbc87d2218cf0d2c87508a62",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT_IMPLIES",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert-implies",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert-in-range",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT_IN_RANGE",
      "hasDetails": false,
      "initializer": "BATT_CHECK_IN_RANGE(low, x, high)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 120,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 120
      },
      "name": "BATT_ASSERT_IN_RANGE",
      "override": false,
      "params": [
        {
          "name": "low",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        },
        {
          "name": "high",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a3a81f40991ad6d582ab2c0139a85672b",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT_IN_RANGE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert-in-range",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-assert-not-nullptr",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_ASSERT_NOT_NULLPTR",
      "hasDetails": false,
      "initializer": "BATT_ASSERT(x != nullptr)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 137,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 137
      },
      "name": "BATT_ASSERT_NOT_NULLPTR",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a6ea3b36fce0d59fed63457dd1030671b",
      "static": false,
      "strong": false,
      "title": "BATT_ASSERT_NOT_NULLPTR",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-assert-not-nullptr",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-check-not-nullptr",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CHECK_NOT_NULLPTR",
      "hasDetails": false,
      "initializer": "BATT_CHECK(x != nullptr)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 138,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 138
      },
      "name": "BATT_CHECK_NOT_NULLPTR",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1aed3e6e42f2ae8640a08a081353a0d3eb",
      "static": false,
      "strong": false,
      "title": "BATT_CHECK_NOT_NULLPTR",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-check-not-nullptr",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-panic",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_PANIC",
      "hasDetails": false,
      "initializer": "    for (bool one_time = true; one_time; one_time = false, ::batt::fail_check_exit(), BATT_UNREACHABLE())    \\\n    BATT_FAIL_CHECK_OUT << \"*** PANIC *** At:\" << __FILE__ << \":\" << __LINE__ << \":\" << std::endl",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 140,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 140
      },
      "name": "BATT_PANIC",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a4fa6453f77ead64a0c579b7d61b89fdb",
      "static": false,
      "strong": false,
      "title": "BATT_PANIC",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-panic",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-inspect",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_INSPECT",
      "hasDetails": false,
      "initializer": "\" \" << #expr << \" == \" << (expr)",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 148,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 148
      },
      "name": "BATT_INSPECT",
      "override": false,
      "params": [
        {
          "name": "expr",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a66025ed70ebb436977fa49676ab19177",
      "static": false,
      "strong": false,
      "title": "BATT_INSPECT",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-inspect",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-untested-line",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_UNTESTED_LINE",
      "hasDetails": false,
      "initializer": "BATT_PANIC() << \"Add test point!\"",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 150,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 150
      },
      "name": "BATT_UNTESTED_LINE",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1a069b95ed155b8e4474ad5f40ece6ea9f",
      "static": false,
      "strong": false,
      "title": "BATT_UNTESTED_LINE",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-untested-line",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-untested-cond",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_UNTESTED_COND",
      "hasDetails": false,
      "initializer": "BATT_CHECK(!(x)) << \"Add test point!\"",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert.hpp",
        "bodyStart": 151,
        "column": 9,
        "file": "batteries/assert.hpp",
        "line": 151
      },
      "name": "BATT_UNTESTED_COND",
      "override": false,
      "params": [
        {
          "name": "x",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "assert_8hpp_1ac574c35ab84b571087bd600c43a55514",
      "static": false,
      "strong": false,
      "title": "BATT_UNTESTED_COND",
      "url": "/_autogen/Files/assert_8hpp/#define-batt-untested-cond",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/assert.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/assert.hpp",
    "line": 0
  },
  "name": "batteries/assert.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n\n#ifdef BOOST_STACKTRACE_USE_NOOP\n#undef BOOST_STACKTRACE_USE_NOOP\n#endif  // BOOST_STACKTRACE_USE_NOOP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/hint.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/logging.hpp>\n#include <batteries/make_printable.hpp>\n#include <batteries/stacktrace.hpp>\n#include <batteries/type_traits.hpp>\n#include <batteries/utility.hpp>\n\n#include <iomanip>\n#include <iostream>\n#include <sstream>\n\n#ifdef BATT_FAIL_CHECK_OUT\n#error This macro is deprecated; use BATT_WITH_GLOG\n#endif\n\n#if BATT_WITH_GLOG\n#define BATT_FAIL_CHECK_OUT BATT_LOG_ERROR()\n#else\n#define BATT_FAIL_CHECK_OUT std::cerr\n#endif\n\nnamespace batt {\n\n// =============================================================================\n// ASSERT and CHECK macros with ostream-style message appending, stack trace on\n// failure, branch prediction hinting, and human-friendly messages.\n//\n// BATT_ASSERT* statements are only enabled when NDEBUG is not defined.\n// BATT_CHECK* statements are always enabled.\n//\n#define BATT_FAIL_CHECK_MESSAGE(left_str, left_val, op_str, right_str, right_val, file, line, fn_name)       \\\n    BATT_FAIL_CHECK_OUT << \"FATAL: \" << file << \":\" << line << \": Assertion failed: \" << left_str << \" \"     \\\n                        << op_str << \" \" << right_str << \"\\n (in `\" << fn_name << \"`)\\n\\n\"                   \\\n                        << \"  \" << left_str << \" == \" << ::batt::make_printable(left_val) << ::std::endl     \\\n                        << ::std::endl                                                                       \\\n                        << \"  \" << right_str << \" == \" << ::batt::make_printable(right_val) << ::std::endl   \\\n                        << ::std::endl\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#if defined(__GNUC__)\n#define BATT_NORETURN __attribute__((noreturn))\n#define BATT_UNREACHABLE __builtin_unreachable\n\n#elif defined(__clang__)\n#define BATT_NORETURN _Noreturn\n#define BATT_UNREACHABLE __builtin_unreachable\n\n#else\n#define BATT_NORETURN\n#define BATT_UNREACHABLE() (void)\n#endif\n//+++++++++++-+-+--+----- --- -- -  -  -   -\n\nBATT_NORETURN void fail_check_exit();\n\ntemplate <typename... Ts>\ninline bool ignore(Ts&&...)\n{\n    return false;\n}\n\nbool lock_fail_check_mutex();\n\n#define BATT_CHECK_RELATION(left, op, right)                                                                 \\\n    for (; !BATT_HINT_TRUE((left)op(right)) && BATT_HINT_TRUE(::batt::lock_fail_check_mutex());              \\\n         ::batt::fail_check_exit())                                                                          \\\n    BATT_FAIL_CHECK_MESSAGE(#left, (left), #op, #right, (right), __FILE__, __LINE__, __PRETTY_FUNCTION__)\n\n#define BATT_CHECK_IMPLIES(p, q)                                                                             \\\n    for (; !BATT_HINT_TRUE(!(p) || (q)) && BATT_HINT_TRUE(::batt::lock_fail_check_mutex());                  \\\n         ::batt::fail_check_exit())                                                                          \\\n    BATT_FAIL_CHECK_MESSAGE(#p, (p), \"implies\", #q, (q), __FILE__, __LINE__, __PRETTY_FUNCTION__)\n\n#define BATT_CHECK(x) BATT_CHECK_RELATION(bool{x}, ==, true)\n\n#define BATT_CHECK_EQ(x, y) BATT_CHECK_RELATION(x, ==, y)\n#define BATT_CHECK_NE(x, y) BATT_CHECK_RELATION(x, !=, y)\n#define BATT_CHECK_GE(x, y) BATT_CHECK_RELATION(x, >=, y)\n#define BATT_CHECK_GT(x, y) BATT_CHECK_RELATION(x, >, y)\n#define BATT_CHECK_LE(x, y) BATT_CHECK_RELATION(x, <=, y)\n#define BATT_CHECK_LT(x, y) BATT_CHECK_RELATION(x, <, y)\n#define BATT_CHECK_FAIL() BATT_CHECK(false)\n\n#define BATT_CHECK_IN_RANGE(low, x, high)                                                                    \\\n    [&](auto&& Actual_Value) {                                                                               \\\n        BATT_CHECK_LE(low, Actual_Value)                                                                     \\\n            << \"Expression \" << #x << \" == \" << Actual_Value << \" is out-of-range\";                          \\\n        BATT_CHECK_LT(Actual_Value, high)                                                                    \\\n            << \"Expression \" << #x << \" == \" << Actual_Value << \" is out-of-range\";                          \\\n    }(x)\n#define BATT_ASSERT_DISABLED(ignored_inputs)                                                                 \\\n    if (false && ignored_inputs)                                                                             \\\n    BATT_FAIL_CHECK_OUT << \"\"\n\n#if BATT_WITH_ASSERTS  //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n#define BATT_ASSERT(x) BATT_CHECK(x)\n#define BATT_ASSERT_EQ(x, y) BATT_CHECK_EQ(x, y)\n#define BATT_ASSERT_NE(x, y) BATT_CHECK_NE(x, y)\n#define BATT_ASSERT_GE(x, y) BATT_CHECK_GE(x, y)\n#define BATT_ASSERT_GT(x, y) BATT_CHECK_GT(x, y)\n#define BATT_ASSERT_LE(x, y) BATT_CHECK_LE(x, y)\n#define BATT_ASSERT_LT(x, y) BATT_CHECK_LT(x, y)\n#define BATT_ASSERT_IMPLIES(p, q) BATT_CHECK_IMPLIES(p, q)\n#define BATT_ASSERT_IN_RANGE(low, x, high) BATT_CHECK_IN_RANGE(low, x, high)\n\n#else  // !BATT_WITH_ASSERTS  ==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n#define BATT_ASSERT(x) BATT_ASSERT_DISABLED(::batt::ignore((x)))\n#define BATT_ASSERT_EQ(x, y) BATT_ASSERT_DISABLED(::batt::ignore((x), (y), (x) == (y)))\n#define BATT_ASSERT_NE(x, y) BATT_ASSERT_DISABLED(::batt::ignore((x), (y), (x) != (y)))\n#define BATT_ASSERT_GE(x, y) BATT_ASSERT_DISABLED(::batt::ignore((x), (y), (x) >= (y)))\n#define BATT_ASSERT_GT(x, y) BATT_ASSERT_DISABLED(::batt::ignore((x), (y), (x) > (y)))\n#define BATT_ASSERT_LE(x, y) BATT_ASSERT_DISABLED(::batt::ignore((x), (y), (x) <= (y)))\n#define BATT_ASSERT_LT(x, y) BATT_ASSERT_DISABLED(::batt::ignore((x), (y), (x) < (y)))\n#define BATT_ASSERT_IMPLIES(p, q) BATT_ASSERT_DISABLED(::batt::ignore((p), (q), !(p), bool(q)))\n#define BATT_ASSERT_IN_RANGE(low, x, high)                                                                   \\\n    BATT_ASSERT_DISABLED(::batt::ignore((low), (x), (high), (low) <= (x), (x) < (high)))\n\n#endif  // (BATT_WITH_ASSERTS) ==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n#define BATT_ASSERT_NOT_NULLPTR(x) BATT_ASSERT(x != nullptr)\n#define BATT_CHECK_NOT_NULLPTR(x) BATT_CHECK(x != nullptr)\n\n#define BATT_PANIC()                                                                                         \\\n    for (bool one_time = true; one_time; one_time = false, ::batt::fail_check_exit(), BATT_UNREACHABLE())    \\\n    BATT_FAIL_CHECK_OUT << \"*** PANIC *** At:\" << __FILE__ << \":\" << __LINE__ << \":\" << std::endl\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// BATT_INSPECT(expr) : expand to debug-friendly stream insertion expression.\n// TODO [tastolfi 2021-10-20] Update docs for assert.hpp to include BATT_INSPECT\n//\n#define BATT_INSPECT(expr) \" \" << #expr << \" == \" << (expr)\n\n#define BATT_UNTESTED_LINE() BATT_PANIC() << \"Add test point!\"\n#define BATT_UNTESTED_COND(x) BATT_CHECK(!(x)) << \"Add test point!\"\n\n}  // namespace batt\n\n#include <batteries/segv.hpp>\n\n#if BATT_HEADER_ONLY\n#include <batteries/assert_impl.hpp>\n#endif  // BATT_HEADER_ONLY",
  "refid": "assert_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/assert.hpp",
  "url": "/_autogen/Files/assert_8hpp/#file-assert.hpp",
  "visibility": "public"
}