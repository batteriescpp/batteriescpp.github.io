{
  "abstract": false,
  "anchor": "#file-backoff.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-backoff-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_BACKOFF_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/backoff.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/backoff.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_BACKOFF_HPP",
      "override": false,
      "refid": "backoff_8hpp_1a3ca8fb4b4506812065ba9cd435d76be9",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_BACKOFF_HPP",
      "url": "/_autogen/Files/backoff_8hpp/#define-batteries-async-backoff-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/backoff.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/backoff.hpp",
    "line": 0
  },
  "name": "batteries/async/backoff.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_BACKOFF_HPP\n#define BATTERIES_ASYNC_BACKOFF_HPP\n\n#include <batteries/config.hpp>\n\n#include <batteries/async/task_decl.hpp>\n\n#include <batteries/int_types.hpp>\n#include <batteries/logging.hpp>\n#include <batteries/suppress.hpp>\n\nBATT_SUPPRESS_IF_GCC(\"-Wswitch-enum\")\nBATT_SUPPRESS_IF_CLANG(\"-Wswitch-enum\")\nBATT_SUPPRESS_IF_CLANG(\"-Wdeprecated-declarations\")\n\n#include <boost/date_time/posix_time/posix_time.hpp>\n\nBATT_UNSUPPRESS_IF_CLANG()\nBATT_UNSUPPRESS_IF_CLANG()\nBATT_UNSUPPRESS_IF_GCC()\n\n#include <type_traits>\n\nnamespace batt {\n\nstruct TaskSleepImpl;\nstruct DefaultStatusIsRetryableImpl;\n\n// Try an action until it succeeds, according to the specified RetryPolicy, which controls the maximum number\n// of retries and the delay (if any) between retries.\n//\n// A RetryPolicy type must be passable via ADL to some overload of the free function `update_retry_state`,\n// which takes a (mutable) reference to an instance of `RetryState` and the policy object as its two\n// arguments.\n//\n// `action_fn` should return `batt::Status` or some type that is convertible to `batt::Status` via\n// `batt::to_status`.  For example, batt::StatusOr<T>, batt::Status, and boost::system::error_code are all\n// allowable return types.\n//\ntemplate <typename RetryPolicy, typename ActionFn, typename Result = std::invoke_result_t<ActionFn>,\n          typename SleepImpl = TaskSleepImpl, typename StatusIsRetryableImpl = DefaultStatusIsRetryableImpl>\nResult with_retry_policy(RetryPolicy&& policy, std::string_view action_name, ActionFn&& action_fn,\n                         SleepImpl&& sleep_impl = {}, StatusIsRetryableImpl&& status_is_retryable_impl = {});\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// State variables passed into `update_retry_state` along with a RetryPolicy object in order to update the\n// backoff delay.\n//\nstruct RetryState {\n    bool should_retry = false;\n    u64 n_attempts = 0;\n    u64 prev_delay_usec = 0;\n    u64 next_delay_usec = 0;\n};\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// A retry policy that implements simple exponential backoff and retry with no jitter.\n//\nstruct ExponentialBackoff {\n    // 0 means no maximum.\n    //\n    u64 max_attempts;\n\n    // How long to wait after the first failed attempt.\n    //\n    u64 initial_delay_usec;\n\n    // How much to increase after each failed attempt:\n    //   next_delay = prev_delay * backoff_factor / backoff_divisor.\n    //\n    u64 backoff_factor;\n    u64 backoff_divisor;\n\n    // The maximum delay.\n    //\n    u64 max_delay_usec;\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    static ExponentialBackoff with_default_params()\n    {\n        ExponentialBackoff p;\n\n        p.max_attempts = 40;\n        p.initial_delay_usec = 10;\n        p.backoff_factor = 2;\n        p.backoff_divisor = 1;\n        p.max_delay_usec = 250 * 1000;  // 250ms\n\n        return p;\n    }\n};\n\n// Increase the delay interval by the constant factor specified in `policy`; `RetryState::should_retry` will\n// be true until `RetryState::n_attempts` exceeds `ExponentialBackoff::max_attempts`.\n//\ninline void update_retry_state(RetryState& state, const ExponentialBackoff& policy)\n{\n    if (state.n_attempts >= policy.max_attempts) {\n        state.should_retry = false;\n        return;\n    }\n\n    state.should_retry = true;\n    state.n_attempts += 1;\n    state.prev_delay_usec = state.next_delay_usec;\n    if (state.n_attempts == 1) {\n        state.next_delay_usec = policy.initial_delay_usec;\n    } else {\n        state.next_delay_usec = std::min(\n            policy.max_delay_usec, state.prev_delay_usec * policy.backoff_factor / policy.backoff_divisor);\n    }\n}\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// The default sleep implementation for `with_retry_policy`.\n//\nstruct TaskSleepImpl {\n    template <typename DurationT>\n    void operator()(DurationT&& duration) const\n    {\n        Task::sleep(BATT_FORWARD(duration));\n    }\n};\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// The default 'status_is_retryable' implementation for `with_retry_policy`.\n//\nstruct DefaultStatusIsRetryableImpl {\n    bool operator()(const Status& s) const\n    {\n        return status_is_retryable(s);\n    }\n};\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\ntemplate <typename RetryPolicy, typename ActionFn, typename Result, typename SleepImpl,\n          typename StatusIsRetryableImpl>\ninline Result with_retry_policy(RetryPolicy&& policy, std::string_view action_name, ActionFn&& action_fn,\n                                SleepImpl&& sleep_impl, StatusIsRetryableImpl&& status_is_retryable_impl)\n{\n    RetryState state;\n    for (;;) {\n        Result result = action_fn();\n        if (!is_ok_status(result)) {\n            auto status = to_status(result);\n            if (status_is_retryable_impl(status)) {\n                update_retry_state(state, policy);\n                if (state.should_retry) {\n                    BATT_VLOG(1) << \"operation '\" << action_name << \"' failed with status=\" << status\n                                 << \"; retrying after \" << state.next_delay_usec << \"us (\" << state.n_attempts\n                                 << \" of \" << policy.max_attempts << \")\";\n\n                    sleep_impl(boost::posix_time::microseconds(state.next_delay_usec));\n                    continue;\n                }  // else -\n            }      //        fall through\n        }          //                     to return\n        return result;\n    }\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_BACKOFF_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::RetryState",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::RetryState",
      "refid": "structbatt_1_1RetryState",
      "title": "batt::RetryState",
      "url": "/_autogen/Classes/structbatt_1_1RetryState/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::ExponentialBackoff",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::ExponentialBackoff",
      "refid": "structbatt_1_1ExponentialBackoff",
      "title": "batt::ExponentialBackoff",
      "url": "/_autogen/Classes/structbatt_1_1ExponentialBackoff/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::TaskSleepImpl",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::TaskSleepImpl",
      "refid": "structbatt_1_1TaskSleepImpl",
      "title": "batt::TaskSleepImpl",
      "url": "/_autogen/Classes/structbatt_1_1TaskSleepImpl/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::DefaultStatusIsRetryableImpl",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::DefaultStatusIsRetryableImpl",
      "refid": "structbatt_1_1DefaultStatusIsRetryableImpl",
      "title": "batt::DefaultStatusIsRetryableImpl",
      "url": "/_autogen/Classes/structbatt_1_1DefaultStatusIsRetryableImpl/",
      "visibility": "public"
    }
  ],
  "refid": "backoff_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/backoff.hpp",
  "url": "/_autogen/Files/backoff_8hpp/#file-backoff.hpp",
  "visibility": "public"
}