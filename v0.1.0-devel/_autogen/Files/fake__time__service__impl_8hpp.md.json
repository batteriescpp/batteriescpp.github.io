{
  "abstract": false,
  "anchor": "#file-fake-time-service-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-fake-time-service-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_FAKE_TIME_SERVICE_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/fake_time_service_impl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/fake_time_service_impl.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_FAKE_TIME_SERVICE_IMPL_HPP",
      "override": false,
      "refid": "fake__time__service__impl_8hpp_1a407daac07dfd88962bcd01a107199bae",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_FAKE_TIME_SERVICE_IMPL_HPP",
      "url": "/_autogen/Files/fake__time__service__impl_8hpp/#define-batteries-async-fake-time-service-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/fake_time_service_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/fake_time_service_impl.hpp",
    "line": 0
  },
  "name": "batteries/async/fake_time_service_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_FAKE_TIME_SERVICE_IMPL_HPP\n#define BATTERIES_ASYNC_FAKE_TIME_SERVICE_IMPL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/fake_execution_context.hpp>\n#include <batteries/async/fake_time_service_decl.hpp>\n#include <batteries/suppress.hpp>\n\nBATT_SUPPRESS_IF_GCC(\"-Wsuggest-override\")\nBATT_SUPPRESS_IF_CLANG(\"-Wsuggest-override\")\n//\n#include <boost/asio/post.hpp>\n//\nBATT_UNSUPPRESS_IF_CLANG()\nBATT_UNSUPPRESS_IF_GCC()\n\n#include <boost/asio/time_traits.hpp>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL /*static*/ boost::asio::execution_context::id FakeTimeService::id;\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL /*explicit*/ FakeTimeService::FakeTimeService(boost::asio::execution_context& context)\n    : boost::asio::execution_context::service{context}\n{\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL bool operator<(const FakeTimeService::TimerInstance& l,\n                                const FakeTimeService::TimerInstance& r)\n{\n    return (l.impl == nullptr && r.impl != nullptr) ||\n           ((l.impl != nullptr && r.impl != nullptr) && (l.impl->expires_at < r.impl->expires_at));\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL FakeTimeService::State::State() : fake_time_{boost::asio::time_traits<TimePoint>::now()}\n{\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL auto FakeTimeService::State::now() -> TimePoint\n{\n    Lock lock{this->mutex_};\n    return this->fake_time_;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename HandlerFn>\nBATT_INLINE_IMPL void FakeTimeService::State::schedule_timer(FakeTimeService* service_instance,\n                                                             const boost::asio::any_io_executor& executor,\n                                                             TimePoint expires_at, HandlerFn&& fn)\n{\n    static_assert(IsCallable<HandlerFn, ErrorCode>{},\n                  \"async_wait handlers must be callable as: void(boost::system::error_code)\");\n\n    // Check to see whether the timer has already expired.\n    //\n    if (expires_at <= this->now()) {\n        boost::asio::post(executor, std::bind(BATT_FORWARD(fn), ErrorCode{}));\n        return;\n    }\n\n    UniqueHandler<ErrorCode> handler{BATT_FORWARD(fn)};\n\n    TimerInstance timer_instance{\n        std::make_shared<TimerInstance::Impl>(service_instance, executor, expires_at, std::move(handler)),\n    };\n\n    // Insert the timer into the timer_queue with the lock held.\n    {\n        Lock lock{this->mutex_};\n        this->timer_queue_.push(std::move(timer_instance));\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void FakeTimeService::State::advance_time(Duration delta)\n{\n    std::vector<TimerInstance> expired_timers;\n    {\n        Lock lock{this->mutex_};\n\n        this->fake_time_ += delta;\n\n        while (!this->timer_queue_.empty() && this->timer_queue_.top().impl->expires_at <= this->fake_time_) {\n            expired_timers.emplace_back(this->timer_queue_.top());\n            timer_queue_.pop();\n        }\n    }\n    for (TimerInstance& timer : expired_timers) {\n        boost::asio::post(timer.impl->executor, std::bind(std::move(timer.impl->handler), ErrorCode{}));\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void FakeTimeService::shutdown() /*override*/\n{\n    // TODO [tastolfi 2022-01-14] how to cancel timers associated with this?\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_FAKE_TIME_SERVICE_IMPL_HPP",
  "refid": "fake__time__service__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/fake_time_service_impl.hpp",
  "url": "/_autogen/Files/fake__time__service__impl_8hpp/#file-fake-time-service-impl.hpp",
  "visibility": "public"
}