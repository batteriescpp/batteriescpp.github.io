{
  "abstract": false,
  "anchor": "#file-future-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-future-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_FUTURE_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/future_impl.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/async/future_impl.hpp",
        "line": 5
      },
      "name": "BATTERIES_ASYNC_FUTURE_IMPL_HPP",
      "override": false,
      "refid": "future__impl_8hpp_1a702c921ee59f976df495e97cd4ba1047",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_FUTURE_IMPL_HPP",
      "url": "/_autogen/Files/future__impl_8hpp/#define-batteries-async-future-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/future_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/future_impl.hpp",
    "line": 0
  },
  "name": "batteries/async/future_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_FUTURE_IMPL_HPP\n#define BATTERIES_ASYNC_FUTURE_IMPL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/future_decl.hpp>\n#include <batteries/async/handler.hpp>\n#include <batteries/async/task_decl.hpp>\n#include <batteries/shared_ptr.hpp>\n#include <batteries/utility.hpp>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nBATT_INLINE_IMPL Promise<T>::Promise() : impl_{batt::make_shared<detail::FutureImpl<T>>()}\n{\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nBATT_INLINE_IMPL void Promise<T>::set_value(T&& value)\n{\n    this->impl_->set_value(BATT_FORWARD(value));\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nBATT_INLINE_IMPL void Promise<T>::set_value(StatusOr<T>&& value)\n{\n    this->impl_->set_value(std::move(value));\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nBATT_INLINE_IMPL void Promise<T>::set_value(const StatusOr<T>& value)\n{\n    this->impl_->set_value(value);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nBATT_INLINE_IMPL void Promise<T>::set_error(const Status& status)\n{\n    this->impl_->set_error(status);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\ntemplate <typename Handler>\nBATT_INLINE_IMPL void Future<T>::async_wait(Handler&& handler) const\n{\n    this->impl_->async_get(BATT_FORWARD(handler));\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nBATT_INLINE_IMPL Future<T>::Future(boost::intrusive_ptr<detail::FutureImpl<T>>&& impl) noexcept\n    : impl_{std::move(impl)}\n{\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nBATT_INLINE_IMPL Future<T> get_future(const Promise<T>& promise)\n{\n    return Future<T>{make_copy(promise.impl_)};\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nBATT_INLINE_IMPL bool Future<T>::is_ready() const\n{\n    return this->impl_->is_ready();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nBATT_INLINE_IMPL StatusOr<T> Future<T>::await() const\n{\n    return ::batt::Task::await(*this);\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_FUTURE_IMPL_HPP",
  "refid": "future__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/future_impl.hpp",
  "url": "/_autogen/Files/future__impl_8hpp/#file-future-impl.hpp",
  "visibility": "public"
}