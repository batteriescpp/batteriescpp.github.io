{
  "abstract": false,
  "anchor": "#file-http-chunk-decoder.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-http-http-chunk-decoder-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_HTTP_HTTP_CHUNK_DECODER_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/http/http_chunk_decoder.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/http/http_chunk_decoder.hpp",
        "line": 6
      },
      "name": "BATTERIES_HTTP_HTTP_CHUNK_DECODER_HPP",
      "override": false,
      "refid": "http__chunk__decoder_8hpp_1a58ff5a4c419ce1466f49a9288c08f60e",
      "static": false,
      "strong": false,
      "title": "BATTERIES_HTTP_HTTP_CHUNK_DECODER_HPP",
      "url": "/_autogen/Files/http__chunk__decoder_8hpp/#define-batteries-http-http-chunk-decoder-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/http/http_chunk_decoder.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/http/http_chunk_decoder.hpp",
    "line": 0
  },
  "name": "batteries/http/http_chunk_decoder.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/http",
    "category": "dirs",
    "fullname": "batteries/http",
    "kind": "dir",
    "language": "",
    "name": "batteries/http",
    "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
    "title": "batteries/http",
    "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/http",
      "category": "dirs",
      "fullname": "batteries/http",
      "kind": "dir",
      "language": "",
      "name": "batteries/http",
      "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
      "title": "batteries/http",
      "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_HTTP_HTTP_CHUNK_DECODER_HPP\n#define BATTERIES_HTTP_HTTP_CHUNK_DECODER_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/buffer_source.hpp>\n#include <batteries/async/stream_buffer.hpp>\n\n#include <batteries/pico_http/parser.hpp>\n\nnamespace batt {\n\ntemplate <typename Src>\nclass HttpChunkDecoder\n{\n   public:\n    static constexpr usize kBufferVecPreAlloc = 2;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    explicit HttpChunkDecoder(Src&& src,\n                              IncludeHttpTrailer consume_trailer = IncludeHttpTrailer{false}) noexcept\n        : src_{BATT_FORWARD(src)}\n    {\n        std::memset(&this->decoder_checkpoint_, 0, sizeof(pico_http::ChunkedDecoder));\n        this->decoder_checkpoint_.consume_trailer = consume_trailer;\n\n        this->decoder_latest_ = this->decoder_checkpoint_;\n    }\n\n    // The current number of bytes available as consumable data.\n    //\n    usize size() const\n    {\n        return this->output_available_ - this->output_consumed_;\n    }\n\n    // The decoder has completed.\n    //\n    bool done() const\n    {\n        return this->done_;\n    }\n\n    // Returns a ConstBufferSequence containing at least `min_count` bytes of data.\n    //\n    // This method may block the current task if there isn't enough data available to satisfy\n    // the request (i.e., if `this->size() < min_count`).\n    //\n    StatusOr<SmallVec<ConstBuffer, kBufferVecPreAlloc>> fetch_at_least(const i64 min_count_i)\n    {\n        const usize min_count = BATT_CHECKED_CAST(usize, min_count_i);\n\n        // Keep decoding chunks from the src stream until we have at least the minimum amount of bytes.\n        //\n        while (this->size() < min_count) {\n            if (this->done_) {\n                if (this->size() == 0) {\n                    this->release_decoded_chunks();\n                }\n                return {StatusCode::kEndOfStream};\n            }\n\n            // Calculate the minimum count we will need to fetch from `src_` to make up the difference between\n            // `this->size()` and `min_count`.\n            //\n            const i64 src_min_count = BATT_CHECKED_CAST(i64, this->decoded_src_size_) +\n                                      (min_count_i - BATT_CHECKED_CAST(i64, this->size()));\n\n            // Fetch more source data.\n            //\n            auto fetched = this->src_.fetch_at_least(src_min_count);\n\n            // Handle the case where the src stream ends before we fetch enough data to satisfy `min_count`.\n            //\n            if (!fetched.ok() && fetched.status() == StatusCode::kEndOfStream && !this->done_) {\n                if (this->size() == 0) {\n                    this->release_decoded_chunks();\n                }\n                return {StatusCode::kClosedBeforeEndOfStream};\n            }\n\n            // All other fetch errors are fatal for the decoded stream.\n            //\n            BATT_REQUIRE_OK(fetched);\n\n            // Rewind the decoder and re-parse the fetched src data.\n            //\n            this->decoded_src_size_ = 0;\n            this->decoded_chunks_.clear();\n            this->decoder_latest_ = this->decoder_checkpoint_;\n\n            usize n_to_consume_from_src = 0;\n\n            const auto on_loop_exit = finally([&] {\n                if (n_to_consume_from_src > 0) {\n                    this->consume_from_src(n_to_consume_from_src);\n                }\n                this->output_available_ = boost::asio::buffer_size(this->decoded_chunks_);\n            });\n\n            for (ConstBuffer src_buffer : *fetched) {\n                StatusOr<pico_http::DecodeResult> result =\n                    pico_http::decode_chunked(&this->decoder_latest_, src_buffer, &this->decoded_chunks_);\n\n                BATT_REQUIRE_OK(result);\n\n                this->decoded_src_size_ += result->bytes_consumed;\n\n                // On a chunk-by-chunk basis, consume data from src once we have \"proven\" that the\n                // corresponding point in the decoded stream has been consumed by the application.\n                //\n                if (this->output_consumed_ != 0) {\n                    const usize decoded_size = boost::asio::buffer_size(this->decoded_chunks_);\n                    if (this->output_consumed_ >= decoded_size) {\n                        this->output_consumed_ -= decoded_size;\n                        this->decoded_chunks_.clear();\n                        this->decoder_checkpoint_ = this->decoder_latest_;\n\n                        // Add all the counts to consume and just make a single call to `this->src_.consume`\n                        // at the end of the outer loop.\n                        //\n                        n_to_consume_from_src += result->bytes_consumed;\n                        //\n                        // this->decoded_src_size_ will be adjusted later, when we call\n                        // `this->consume_from_src(...)`.\n                    }\n                }\n\n                // Stop decoding chunks once the decoder tells us we've reached end-of-stream.  This only\n                // breaks out of the inner loop; we'll go back up to the top and if we have enough decoded\n                // data (>= min_count), return successfully, else return StatusCode::kEndOfStream.\n                //\n                if (result->done) {\n                    this->done_ = true;\n                    break;\n                }\n            }\n        }\n\n        return consume_buffers_copy(this->decoded_chunks_, this->output_consumed_);\n    }\n\n    // Consume the specified number of bytes from the front of the stream so that future calls to\n    // `fetch_at_least` will not return the same data.\n    //\n    void consume(i64 count)\n    {\n        this->output_consumed_ += count;\n\n        BATT_CHECK_LE(this->output_consumed_, this->output_available_);\n\n        if (this->output_consumed_ == this->output_available_) {\n            this->release_decoded_chunks();\n        }\n    }\n\n    // Unblocks any current and future calls to `prepare_at_least` (and all other fetch/read methods).  This\n    // signals to the buffer (and all other clients of this object) that no more data will be read/consumed.\n    //\n    void close_for_read()\n    {\n        this->release_decoded_chunks();\n    }\n\n   private:\n    void release_decoded_chunks()\n    {\n        this->output_available_ = 0;\n        this->output_consumed_ = 0;\n        this->decoded_chunks_.clear();\n        this->decoder_checkpoint_ = this->decoder_latest_;\n        this->consume_from_src(this->decoded_src_size_);\n    }\n\n    void consume_from_src(usize count)\n    {\n        this->decoded_src_size_ -= count;\n        this->src_.consume(count);\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    Src src_;\n\n    pico_http::ChunkedDecoder decoder_checkpoint_;\n\n    pico_http::ChunkedDecoder decoder_latest_;\n\n    bool done_ = false;\n\n    usize decoded_src_size_ = 0;\n\n    usize output_available_ = 0;\n\n    usize output_consumed_ = 0;\n\n    SmallVec<ConstBuffer, kBufferVecPreAlloc> decoded_chunks_;\n};\n\nstatic_assert(has_buffer_source_requirements<HttpChunkDecoder<StreamBuffer&>>(), \"\");\n\n}  // namespace batt\n\n#endif  // BATTERIES_HTTP_HTTP_CHUNK_DECODER_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "brief": "[BufferSource](/_autogen/Classes/classbatt_1_1BufferSource/) transformer that decodes HTTP chunked content fetched from `Src`. ",
      "category": "classes",
      "fullname": "batt::HttpChunkDecoder",
      "kind": "class",
      "language": "cpp",
      "name": "batt::HttpChunkDecoder",
      "refid": "classbatt_1_1HttpChunkDecoder",
      "summary": "BufferSource transformer that decodes HTTP chunked content fetched from Src. ",
      "title": "batt::HttpChunkDecoder",
      "url": "/_autogen/Classes/classbatt_1_1HttpChunkDecoder/",
      "visibility": "public"
    }
  ],
  "refid": "http__chunk__decoder_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/http/http_chunk_decoder.hpp",
  "url": "/_autogen/Files/http__chunk__decoder_8hpp/#file-http-chunk-decoder.hpp",
  "visibility": "public"
}