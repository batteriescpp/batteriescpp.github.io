{
  "abstract": false,
  "anchor": "#file-priority-watch.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-priority-watch-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_PRIORITY_WATCH_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/priority_watch.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/priority_watch.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_PRIORITY_WATCH_HPP",
      "override": false,
      "refid": "priority__watch_8hpp_1a369dfc3f15f05f91f4929012d5e61818",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_PRIORITY_WATCH_HPP",
      "url": "/_autogen/Files/priority__watch_8hpp/#define-batteries-async-priority-watch-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/priority_watch.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/priority_watch.hpp",
    "line": 0
  },
  "name": "batteries/async/priority_watch.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::detail",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::detail",
      "refid": "namespacebatt_1_1detail",
      "title": "batt::detail",
      "url": "/_autogen/Namespaces/namespacebatt_1_1detail/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_PRIORITY_WATCH_HPP\n#define BATTERIES_ASYNC_PRIORITY_WATCH_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/assert.hpp>\n#include <batteries/async/handler.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/seq/loop_control.hpp>\n#include <batteries/status.hpp>\n\n#include <boost/container/static_vector.hpp>\n\n#include <array>\n#include <bitset>\n#include <thread>\n\nnamespace batt {\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// TODO [tastolfi 2023-04-16]\n//  - This code needs to be as fast as is reasonably possible\n//  - Optimizations to try:\n//    - Convert as much as possible to branch-free style:\n//      - left/right symmetric cases should become index + children array[2]\n//      - use branch prediction hints\n//      - statically alloc a small array for heaps smaller than some number; use this\n//        in place of the pointers to decrease cache misses\n//      - generalized left/right processing should reduce total code size which will also help with cache\n//        locality\n//      - cache and maintain a bottom item pointer, so we don't have to do a log(N) traversal down a path to\n//        find it each time\n//      - change CHECKs to ASSERTs, perhaps through a template-based policy injection (so we can verify during\n//        testing, but disable for production code, even in RelWithDebInfo builds.\n//      - for items with the same `order` value, group at a single heap location, repurposing the 'child'\n//        pointers as double-linked list pointers\n//\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\nnamespace detail {\n\ntemplate <typename IntT>\nclass PriorityHeap;\n\ntemplate <typename IntT>\nclass PriorityHeapItem\n{\n   public:\n    friend class PriorityHeap<IntT>;\n\n    using order_type = IntT;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    explicit PriorityHeapItem(IntT order) noexcept : order_{order}\n    {\n    }\n\n    PriorityHeapItem() = default;\n\n    PriorityHeapItem(const PriorityHeapItem&) = delete;\n    PriorityHeapItem& operator=(const PriorityHeapItem&) = delete;\n\n    IntT order() const noexcept\n    {\n        return this->order_;\n    }\n\n    bool is_linked() const noexcept\n    {\n        return this->children_[0] || this->children_[1];\n    }\n\n   private:\n    IntT order_ = IntT{};\n    std::array<PriorityHeapItem*, 2> children_ = {nullptr, nullptr};\n};\n\ntemplate <typename IntT>\nclass PriorityHeapItemList\n{\n   public:\n    using Item = PriorityHeapItem<IntT>;\n\n    void insert(Item* item)\n    {\n        //this->head_.children_[0]->children_[1] = item;\n        //this->head_.children_[1]->children_[0] = item;\n        //item->children_ = this->head_->children_;\n        item->children_[0] = &this->head_;\n        this->head_.children_[1] = item;\n    }\n\n   private:\n    Item head_;\n};\n\ntemplate <typename IntT>\nclass PriorityHeap\n{\n   public:\n    using Self = PriorityHeap;\n    using Item = PriorityHeapItem<IntT>;\n\n    static constexpr usize kStackSize = sizeof(usize) * (8 /*bits per byte*/);\n    using StackVec = boost::container::static_vector<Item**, kStackSize>;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    __attribute__((always_inline)) static Item** swap_child(Item** parent, usize i,\n                                                            const std::array<Item*, 2>& children) noexcept\n    {\n        const usize j = i ^ 0x1;\n\n        (*parent)->children_ = children[i]->children_;\n        children[i]->children_[i] = (*parent);\n        children[i]->children_[j] = children[j];\n        (*parent) = children[i];\n\n        return &children[i]->children_[i];\n    }\n\n    __attribute__((always_inline)) static Item** swap_left(Item** parent,\n                                                           const std::array<Item*, 2>& children) noexcept\n    {\n        return swap_child(parent, 0, children);\n    }\n\n    __attribute__((always_inline)) static Item** swap_right(Item** parent,\n                                                            const std::array<Item*, 2>& children) noexcept\n    {\n        return swap_child(parent, 1, children);\n    }\n\n    __attribute__((always_inline)) static i32 depth_upper_bound(usize path) noexcept\n    {\n        constexpr i32 bits = sizeof(usize) * 8;\n        return bits - __builtin_clzll(path) - 1;\n    }\n\n    __attribute__((always_inline)) static usize get_top_mask(usize path) noexcept\n    {\n        return usize{1} << Self::depth_upper_bound(path);\n    }\n\n    template <typename Fn>\n    __attribute__((always_inline)) static void path_to_bottom(usize size, Fn&& fn) noexcept\n    {\n        const usize path = size + 1;\n        const usize top_mask = Self::get_top_mask(path);\n\n        for (usize mask = top_mask >> 1; mask != 0; mask >>= 1) {\n            bool go_left = ((path & mask) == 0);\n            fn(go_left);\n        }\n    }\n\n    template <typename Fn>\n    __attribute__((always_inline)) static void path_from_bottom(usize size, Fn&& fn) noexcept\n    {\n        const usize path = size + 1;\n        const usize top_mask = Self::get_top_mask(path);\n\n        for (usize mask = 1; mask != top_mask; mask <<= 1) {\n            bool go_left = ((path & mask) == 0);\n            if (seq::run_loop_fn(fn, go_left) == seq::LoopControl::kBreak) {\n                break;\n            }\n        }\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    PriorityHeap() = default;\n    PriorityHeap(const PriorityHeap&) = delete;\n    PriorityHeap& operator=(const PriorityHeap&) = delete;\n    ~PriorityHeap() = default;\n\n    PriorityHeap(PriorityHeap&& other) noexcept\n        : top_{other.top_}\n        , size_{other.size_}\n        , min_value_{other.min_value_}\n    {\n        other.top_ = nullptr;\n        other.size_ = 0;\n        other.min_value_ = None;\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    bool empty() const noexcept\n    {\n        return !this->top_;\n    }\n\n    usize size() const noexcept\n    {\n        return this->size_;\n    }\n\n    const Optional<IntT>& min_value() const noexcept\n    {\n        return this->min_value_;\n    }\n\n    const Item* top() const noexcept\n    {\n        return this->top_;\n    }\n\n    void insert(Item* item) noexcept\n    {\n        item->children_.fill(nullptr);\n\n        auto on_scope_exit = batt::finally([&] {\n            this->min_value_ = this->top_->order_;\n            this->size_ += 1;\n        });\n\n        if (!this->top_) {\n            this->top_ = item;\n            return;\n        }\n\n        StackVec stack{&this->top_};\n\n        // First insert at the bottom of the heap...\n        //\n        Self::path_to_bottom(this->size_, [&stack](bool go_left) {\n            Item** parent = stack.back();\n            BATT_CHECK_NOT_NULLPTR((*parent));\n\n            if (go_left) {\n                stack.push_back(&(*parent)->children_[0]);\n            } else {\n                stack.push_back(&(*parent)->children_[1]);\n            }\n        });\n        *(stack.back()) = item;\n\n        // ...then back-track, fixing the heap\n        // property.\n        //\n        Self::path_from_bottom(this->size_, [&stack](bool go_left) {\n            stack.pop_back();\n\n            Item** parent = stack.back();\n            const std::array<Item*, 2> children = (*parent)->children_;\n\n            if (go_left) {\n                if (BATT_HINT_TRUE(children[0]->order_ < (*parent)->order_)) {\n                    Self::swap_left(parent, children);\n                } else {\n                    return seq::LoopControl::kBreak;\n                }\n            } else {\n                if (BATT_HINT_TRUE(children[1]->order_ < (*parent)->order_)) {\n                    Self::swap_right(parent, children);\n                } else {\n                    return seq::LoopControl::kBreak;\n                }\n            }\n\n            return seq::LoopControl::kContinue;\n        });\n    }\n\n    Item* remove() noexcept\n    {\n        // Base case: already empty.\n        //\n        if (!this->top_) {\n            return nullptr;\n        }\n\n        auto on_scope_exit = batt::finally([&] {\n            if (this->top_) {\n                this->min_value_ = this->top_->order_;\n            } else {\n                this->min_value_ = None;\n            }\n        });\n\n        this->size_ -= 1;\n\n        Item* const removed = this->top_;\n\n        // Base case: 2->1, 1->0.\n        //\n        if (!this->top_->children_[1]) {\n            this->top_ = removed->children_[0];\n            removed->children_[0] = nullptr;\n            return removed;\n        }\n\n        // Find the bottom item.\n        //\n        Item** parent = &this->top_;\n        Item* bottom = this->top_;\n\n        Self::path_to_bottom(this->size_, [&parent, &bottom](bool go_left) {\n            if (go_left) {\n                parent = &bottom->children_[0];\n                bottom = bottom->children_[0];\n            } else {\n                parent = &bottom->children_[1];\n                bottom = bottom->children_[1];\n            }\n        });\n\n        BATT_CHECK_NOT_NULLPTR(bottom);\n        BATT_CHECK_EQ(bottom->children_[0], nullptr);\n        BATT_CHECK_EQ(bottom->children_[1], nullptr);\n\n        *parent = nullptr;\n\n        std::swap(bottom->children_[0], this->top_->children_[0]);\n        std::swap(bottom->children_[1], this->top_->children_[1]);\n        this->top_ = bottom;\n\n        parent = &this->top_;\n        for (;;) {\n            BATT_CHECK_NOT_NULLPTR(*parent);\n\n            std::array<Item*, 2> children = (*parent)->children_;\n\n            if (!children[0]) {\n                BATT_CHECK_EQ(children[1], nullptr);\n                break;\n            }\n            if (!children[1]) {\n                if (!(children[0]->order_ < (*parent)->order_)) {\n                    break;\n                }\n                parent = Self::swap_left(parent, children);\n                continue;\n            }\n            if (BATT_HINT_TRUE(children[0]->order_ < (*parent)->order_ ||\n                               children[1]->order_ < (*parent)->order_)) {\n                if (children[0]->order_ < children[1]->order_) {\n                    parent = Self::swap_left(parent, children);\n                } else {\n                    parent = Self::swap_right(parent, children);\n                }\n                continue;\n            }\n            break;\n        }\n\n        return removed;\n    }\n\n    [[nodiscard]] bool check_invariants(StackVec* stack, usize* count = nullptr)\n    {\n        BATT_CHECK_NOT_NULLPTR(stack);\n\n        usize count_ = 0;\n        if (!count) {\n            count = &count_;\n        }\n\n        bool at_top = false;\n\n        if (stack->empty()) {\n            stack->push_back(&this->top_);\n            at_top = true;\n        }\n\n        Item* const parent = *stack->back();\n        if (!parent) {\n            return true;\n        }\n        *count += 1;\n        if (parent->children_[0]) {\n            stack->push_back(&parent->children_[0]);\n            if (parent->order_ > parent->children_[0]->order_) {\n                return false;\n            }\n            if (!this->check_invariants(stack, count)) {\n                return false;\n            }\n            stack->pop_back();\n        }\n        if (parent->children_[1]) {\n            stack->push_back(&parent->children_[1]);\n            if (parent->order_ > parent->children_[1]->order_) {\n                return false;\n            }\n            if (!this->check_invariants(stack, count)) {\n                return false;\n            }\n            stack->pop_back();\n        }\n\n#if BATT_DEBUG_PRIORITY_HEAP\n        if (at_top && (*count != this->size_)) {\n            std::cerr << \"bad count!\" << BATT_INSPECT(*count) << BATT_INSPECT(this->size_) << std::endl;\n            this->dump(std::cerr);\n        }\n#endif  // BATT_DEBUG_PRIORITY_HEAP\n\n        return !at_top || (*count == this->size_);\n    }\n\n    void dump(std::ostream& out, Item* parent = nullptr, int depth = 0)\n    {\n        if (!parent && depth == 0 && this->top_) {\n            this->dump(out, this->top_);\n            return;\n        }\n\n        out << std::string(depth * 2, ' ') << \"- \";\n        if (!parent) {\n            out << \"nullptr\" << std::endl;\n        } else {\n            out << parent->order_ << std::endl;\n            this->dump(out, parent->children_[0], depth + 1);\n            this->dump(out, parent->children_[1], depth + 1);\n        }\n    }\n\n   private:\n    Item* top_ = nullptr;\n    usize size_ = 0;\n    Optional<IntT> min_value_;\n};\n\n}  //namespace detail\n\ntemplate <typename T>\nclass PriorityWatch\n{\n   public:\n    using PriorityHandler = BasicAbstractHandler<detail::PriorityHeapItem<T>, StatusOr<T>>;\n\n    static constexpr u32 kLocked = 0x01;\n\n    static constexpr u32 kOpen = 0x02;\n\n    static constexpr u32 kWaiting = 0x04;\n\n    static constexpr u32 kClosedAtEnd = 0x08;\n\n    static constexpr u32 kClosedBeforeEnd = 0x10;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    Status await_at_least(T min_value);\n\n    T clamp_min_value(T min_value);\n\n    T fetch_add(T delta);\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n   private:\n    Status get_final_status() const\n    {\n        constexpr u32 mask = PriorityWatch::kClosedAtEnd | PriorityWatch::kClosedBeforeEnd;\n\n        switch (this->spin_state_.load() & mask) {\n        case PriorityWatch::kClosedBeforeEnd:\n            return Status{StatusCode::kClosedBeforeEndOfStream};\n\n        case PriorityWatch::kClosedAtEnd:\n            return Status{StatusCode::kEndOfStream};\n\n        default:\n            break;\n        }\n\n        return Status{StatusCode::kClosed};\n    }\n\n    u32 lock_observers() const\n    {\n        for (;;) {\n            const u32 prior_state = this->spin_state_.fetch_or(kLocked);\n            if ((prior_state & kLocked) == 0) {\n                return prior_state;\n            }\n            std::this_thread::yield();\n        }\n    }\n\n    void unlock_observers(u32 desired_state) const\n    {\n        this->spin_state_.store(desired_state & ~kLocked);\n    }\n\n    void notify(T new_value)\n    {\n        const auto post_change_state = this->spin_state_.load();\n        if ((post_change_state & (kLocked | kWaiting)) == 0) {\n            //\n            // If there is a concurrent call to async_wait that results in a handler being added to the\n            // `observers_` list, it must go through the following atomic events:\n            //\n            //  1. load value (phase 1), no change\n            //  2. set kLocked\n            //  3. load value (phase 2), no change\n            //  4. set kWaiting\n            //\n            // The notifier thread (this call), when not waking observers, goes through the following atomic\n            // events:\n            //\n            //  a. change value\n            //  b. load spin state, observe not kLocked and not kWaiting\n            //\n            // (b) must occur before (1) [therefore (a) < (1)] or between (1) and (2) [(a) < (3)].  In either\n            // case, the async_wait call will load the value *after* this thread changes it (a), so there will\n            // be no spurious deadlocks.\n            //\n            return;\n        }\n\n        // Acquire the spinlock.\n        //\n        const auto pre_lock_state = this->lock_observers();\n        HandlerList<StatusOr<T>> local_observers = std::move(this->observers_);\n        this->unlock_observers(pre_lock_state & ~(kWaiting));\n\n        invoke_all_handlers(&local_observers, new_value);\n        //\n        // IMPORTANT: we must not touch *anything* in `this` after invoking handlers, since one of the\n        // handlers may delete this Watch object.\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    std::atomic<T> value_{0};\n    mutable std::atomic<u32> spin_state_{/*kOpen*/ 0};\n    mutable detail::PriorityHeap<T> observers_;\n};\n\n//#=##=##=#==#=#==#===#+==#+==========+==+=+=+=+=+=++=+++=+++++=-++++=-+++++++++++\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename IntT>\ninline Status PriorityWatch<IntT>::await_at_least(IntT min_value)\n{\n    (void)min_value;\n    return OkStatus();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename IntT>\ninline IntT PriorityWatch<IntT>::clamp_min_value(IntT min_value)\n{\n    (void)min_value;\n    return 0;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename IntT>\ninline IntT PriorityWatch<IntT>::fetch_add(IntT delta)\n{\n    (void)delta;\n    return 0;\n}\n\n}  //namespace batt\n\n#endif  // BATTERIES_ASYNC_PRIORITY_WATCH_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::PriorityHeapItem",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::PriorityHeapItem",
      "refid": "classbatt_1_1detail_1_1PriorityHeapItem",
      "title": "batt::detail::PriorityHeapItem",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1PriorityHeapItem/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::PriorityHeapItemList",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::PriorityHeapItemList",
      "refid": "classbatt_1_1detail_1_1PriorityHeapItemList",
      "title": "batt::detail::PriorityHeapItemList",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1PriorityHeapItemList/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::PriorityHeap",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::PriorityHeap",
      "refid": "classbatt_1_1detail_1_1PriorityHeap",
      "title": "batt::detail::PriorityHeap",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1PriorityHeap/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::PriorityWatch",
      "kind": "class",
      "language": "cpp",
      "name": "batt::PriorityWatch",
      "refid": "classbatt_1_1PriorityWatch",
      "title": "batt::PriorityWatch",
      "url": "/_autogen/Classes/classbatt_1_1PriorityWatch/",
      "visibility": "public"
    }
  ],
  "refid": "priority__watch_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/priority_watch.hpp",
  "url": "/_autogen/Files/priority__watch_8hpp/#file-priority-watch.hpp",
  "visibility": "public"
}