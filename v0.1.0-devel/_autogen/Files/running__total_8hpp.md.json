{
  "abstract": false,
  "anchor": "#file-running-total.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-algo-running-total-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ALGO_RUNNING_TOTAL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/algo/running_total.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/algo/running_total.hpp",
        "line": 6
      },
      "name": "BATTERIES_ALGO_RUNNING_TOTAL_HPP",
      "override": false,
      "refid": "running__total_8hpp_1a9a7fb8974a5690cb34dd7a6a49313249",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ALGO_RUNNING_TOTAL_HPP",
      "url": "/_autogen/Files/running__total_8hpp/#define-batteries-algo-running-total-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/algo/running_total.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/algo/running_total.hpp",
    "line": 0
  },
  "name": "batteries/algo/running_total.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/algo",
    "category": "dirs",
    "fullname": "batteries/algo",
    "kind": "dir",
    "language": "",
    "name": "batteries/algo",
    "refid": "dir_23237b2d5d682108d256c42b41036300",
    "title": "batteries/algo",
    "url": "/_autogen/Files/dir_23237b2d5d682108d256c42b41036300/#dir-batteries/algo",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/algo",
      "category": "dirs",
      "fullname": "batteries/algo",
      "kind": "dir",
      "language": "",
      "name": "batteries/algo",
      "refid": "dir_23237b2d5d682108d256c42b41036300",
      "title": "batteries/algo",
      "url": "/_autogen/Files/dir_23237b2d5d682108d256c42b41036300/#dir-batteries/algo",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ALGO_RUNNING_TOTAL_HPP\n#define BATTERIES_ALGO_RUNNING_TOTAL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/assert.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/interval.hpp>\n#include <batteries/slice.hpp>\n#include <batteries/stream_util.hpp>\n#include <batteries/strong_typedef.hpp>\n\n#include <boost/iterator/iterator_facade.hpp>\n\n#include <functional>\n#include <iterator>\n#include <memory>\n#include <ostream>\n\nnamespace batt {\n\nBATT_STRONG_TYPEDEF(usize, PartsCount);\nBATT_STRONG_TYPEDEF(usize, PartSize);\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// A parallel-friendly cummulative running total of `usize` values.\n//\n// This collection is structured as a series of adjacent 'parts' (or shards/partitions) plus a 'summary' that\n// records the running totals of the parts.  For example, if the input array (on which we wish to compute the\n// running total) is:\n//\n// `{2, 1, 3, 1, 1, 2, 1, 2, 3, 3, 1, 2}`\n//\n// We might divide this into three (logical) parts whose running totals can be computed independently in\n// parallel:\n//\n// input parts: `{{2, 1, 3, 1}, {1, 2, 1, 2}, {3, 3, 1, 2}}`\n// part totals: `{{2, 3, 6, 7}, {1, 3, 4, 6}, {3, 6, 7, 9}}`\n//\n// And then the summary is computed as the running total of the individual part totals plus leading zero:\n//\n// summary: `{0, 7, 13, 22}`\n//\n// So the overall set of values stored internally by `RunningTotal` for this input would be:\n//\n// <part-0> + <part-1> + <part-2> + <summary> => `{2, 3, 6, 7, 1, 3, 4, 6, 3, 6, 7, 9, 0, 7, 13, 22}`\n//\n// This allows a fast O(1) calculation of the overall running total at any point; just add the part-local\n// total to the summary for that part.\n//\nclass RunningTotal\n{\n   public:\n    class Iterator;\n\n    using iterator = Iterator;\n    using const_iterator = Iterator;\n    using value_type = usize;\n\n    using slice_type = boost::iterator_range<Iterator>;\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    RunningTotal() = default;\n\n    RunningTotal(RunningTotal&&) = default;\n\n    explicit RunningTotal(PartsCount count, PartSize size);\n\n    ~RunningTotal() = default;\n\n    RunningTotal& operator=(RunningTotal&&) = default;\n\n    PartsCount parts_count() const\n    {\n        return PartsCount{this->parts_count_};\n    }\n\n    PartSize part_size() const\n    {\n        return PartSize{this->part_size_};\n    }\n\n    usize size() const\n    {\n        return this->size_;\n    }\n\n    bool empty() const\n    {\n        return this->size() == 0;\n    }\n\n    usize front() const\n    {\n        BATT_ASSERT(!this->empty());\n        return this->values_[0];\n    }\n\n    usize back() const\n    {\n        BATT_ASSERT(!this->empty());\n        return operator[](this->size() - 1);\n    }\n\n    iterator begin() const;\n\n    iterator end() const;\n\n    slice_type slice(usize begin_index, usize end_index) const;\n\n    slice_type slice(Interval<usize> interval) const;\n\n    void reset(PartsCount count, PartSize size);\n\n    void set_size(usize new_size);\n\n    Slice<const usize> const_part(usize i) const;\n\n    Slice<usize> mutable_part(usize i);\n\n    Slice<const usize> const_summary() const;\n\n    Slice<usize> mutable_summary();\n\n    usize operator[](isize i) const;\n\n    Slice<const usize> raw_values() const;\n\n    std::function<void(std::ostream&)> dump() const;\n\n    // Recompute the summary, which is a running total of the parts.  Must be called after parts are\n    // updated.\n    //\n    void update_summary();\n\n   private:\n    Slice<const usize> const_part_impl(usize i) const;\n\n    Slice<const usize> raw_slice(usize offset, usize size) const;\n\n    Slice<usize> raw_slice(usize offset, usize size);\n\n    usize raw_size() const;\n\n    usize part_segment_offset(usize part_i) const;\n\n    usize part_segment_size() const;\n\n    usize summary_offset() const;\n\n    usize summary_size() const;\n\n    usize offset_of_part(usize part_i) const;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    std::unique_ptr<usize[]> values_{new usize[1]{0}};\n    PartsCount parts_count_{0};\n    PartSize part_size_{1};\n    usize size_{1};\n};\n\n// #=##=##=#==#=#==#===#+==#+==========+==+=+=+=+=+=++=+++=+++++=-++++=-+++++++++++\n\nclass RunningTotal::Iterator\n    : public boost::iterator_facade<        //\n          Iterator,                         // <- Derived\n          usize,                            // <- Value\n          std::random_access_iterator_tag,  // <- CategoryOrTraversal\n          usize,                            // <- Reference\n          isize                             // <- Difference\n          >\n{\n   public:\n    using Self = Iterator;\n    using iterator_category = std::random_access_iterator_tag;\n    using value_type = usize;\n    using reference = value_type;\n\n    explicit Iterator(const RunningTotal* container, usize position) noexcept\n        : container_{container}\n        , position_{static_cast<isize>(position)}\n    {\n        BATT_ASSERT_GE(this->position_, 0);\n    }\n\n    reference dereference() const\n    {\n        return (*this->container_)[this->position_];\n    }\n\n    bool equal(const Self& other) const\n    {\n        return this->container_ == other.container_ && this->position_ == other.position_;\n    }\n\n    void increment()\n    {\n        BATT_ASSERT_LT(static_cast<usize>(this->position_), this->container_->size());\n        ++this->position_;\n    }\n\n    void decrement()\n    {\n        BATT_ASSERT_GT(this->position_, 0);\n        --this->position_;\n    }\n\n    void advance(isize delta)\n    {\n        this->position_ += delta;\n        BATT_ASSERT_IN_RANGE(0, this->position_, static_cast<isize>(this->container_->size() + 1));\n    }\n\n    isize distance_to(const Self& other) const\n    {\n        return other.position_ - this->position_;\n    }\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    const RunningTotal* container() const\n    {\n        return this->container_;\n    }\n\n    isize position() const\n    {\n        return this->position_;\n    }\n\n   private:\n    const RunningTotal* container_;\n    isize position_;\n};\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\n}  // namespace batt\n\n#endif  // BATTERIES_ALGO_RUNNING_TOTAL_HPP\n\n#include <batteries/config.hpp>\n//\n#if BATT_HEADER_ONLY\n#include <batteries/algo/running_total_impl.hpp>\n#endif",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::RunningTotal",
      "kind": "class",
      "language": "cpp",
      "name": "batt::RunningTotal",
      "refid": "classbatt_1_1RunningTotal",
      "title": "batt::RunningTotal",
      "url": "/_autogen/Classes/classbatt_1_1RunningTotal/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "boost::iterator_facade< Iterator, usize, std::random_access_iterator_tag, usize, isize >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::RunningTotal::Iterator",
      "kind": "class",
      "language": "cpp",
      "name": "batt::RunningTotal::Iterator",
      "refid": "classbatt_1_1RunningTotal_1_1Iterator",
      "title": "batt::RunningTotal::Iterator",
      "url": "/_autogen/Classes/classbatt_1_1RunningTotal_1_1Iterator/",
      "visibility": "public"
    }
  ],
  "refid": "running__total_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/algo/running_total.hpp",
  "url": "/_autogen/Files/running__total_8hpp/#file-running-total.hpp",
  "visibility": "public"
}