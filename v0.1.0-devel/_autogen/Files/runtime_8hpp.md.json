{
  "abstract": false,
  "anchor": "#file-runtime.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-runtime-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_RUNTIME_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/runtime.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/runtime.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_RUNTIME_HPP",
      "override": false,
      "refid": "runtime_8hpp_1a9b7c67a95b754a021d0850a8f28ff2c7",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_RUNTIME_HPP",
      "url": "/_autogen/Files/runtime_8hpp/#define-batteries-async-runtime-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/runtime.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/runtime.hpp",
    "line": 0
  },
  "name": "batteries/async/runtime.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_RUNTIME_HPP\n#define BATTERIES_ASYNC_RUNTIME_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/dump_tasks.hpp>\n#include <batteries/async/io_result.hpp>\n#include <batteries/async/mutex.hpp>\n#include <batteries/async/task.hpp>\n#include <batteries/async/task_scheduler.hpp>\n\n#include <batteries/cpu_align.hpp>\n#include <batteries/env.hpp>\n#include <batteries/hash.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/logging.hpp>\n#include <batteries/optional.hpp>\n\n#include <boost/asio/executor_work_guard.hpp>\n#include <boost/asio/io_context.hpp>\n#include <boost/asio/signal_set.hpp>\n\n#include <boost/exception/diagnostic_information.hpp>\n#include <boost/exception_ptr.hpp>\n\n#include <chrono>\n#include <cstddef>\n#include <thread>\n#include <vector>\n\n#if defined(BATT_PLATFORM_IS_LINUX) || defined(BATT_PLATFORM_IS_APPLE)\n#include <sched.h>\n#include <signal.h>\n#endif\n\nnamespace batt {\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\nclass Runtime\n{\n   public:\n    class DefaultScheduler;\n\n    struct WeakNotifySlot {\n        Watch<u64> counter;\n        Mutex<NoneType> mutex;\n    };\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    static Runtime& instance()\n    {\n        return *Runtime::instance_ptr();\n    }\n\n    static void reset()\n    {\n        BATT_CHECK(Runtime::instance().is_halted());\n\n        delete Runtime::instance_ptr();\n        Runtime::instance_ptr() = new Runtime;\n\n        BATT_CHECK(!Runtime::instance().is_halted());\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    explicit Runtime() noexcept;\n\n    TaskScheduler& default_scheduler()\n    {\n        return *this->default_scheduler_;\n    }\n\n    // DEPRECATED; use TaskScheduler explicitly instead for DI testing.\n    //\n    boost::asio::any_io_executor schedule_task()\n    {\n        return this->scheduler_.load()->schedule_task();\n    }\n\n    TaskScheduler* exchange_task_scheduler(TaskScheduler* new_scheduler)\n    {\n        return this->scheduler_.exchange(new_scheduler);\n    }\n\n    void halt()\n    {\n        const bool halted_prior = this->halted_.exchange(true);\n        if (halted_prior) {\n            return;\n        }\n        detail::SigInfoHandler::instance().halt();\n        this->default_scheduler_->halt();\n        this->scheduler_.load()->halt();\n    }\n\n    bool is_halted() const\n    {\n        return this->halted_.load();\n    }\n\n    void join()\n    {\n        detail::SigInfoHandler::instance().join();\n        this->default_scheduler_->join();\n        this->scheduler_.load()->join();\n    }\n\n    template <typename... Ts>\n    usize get_weak_notify_slot_index(const Ts&... objs) const\n    {\n        return batt::hash(objs...) % this->n_weak_notify_slots_;\n    }\n\n    template <typename... Ts>\n    WeakNotifySlot& get_weak_notify_slot(const Ts&... objs)\n    {\n        return this->weak_notify_slot_[this->get_weak_notify_slot_index(objs...)];\n    }\n\n    template <typename... Ts>\n    void notify(const Ts&... objs)\n    {\n        WeakNotifySlot& slot = this->get_weak_notify_slot(objs...);\n        slot.counter.fetch_add(1);\n    }\n\n    template <typename... Ts>\n    Mutex<NoneType>::Lock lock(const Ts&... objs)\n    {\n        return this->get_weak_notify_slot(objs...).mutex.lock();\n    }\n\n    template <typename CheckCondition, typename... Ts>\n    auto await_condition(const CheckCondition& check_condition, const Ts&... objs)\n    {\n        WeakNotifySlot& slot = this->get_weak_notify_slot(objs...);\n\n        u64 observed_ts = slot.counter.get_value();\n        Optional<Mutex<NoneType>::Lock> locked = slot.mutex.lock();\n\n        for (;;) {\n            auto last_result = check_condition(objs...);\n            if (last_result) {\n                return last_result;\n            }\n            locked = None;\n            StatusOr<u64> updated_ts = slot.counter.await_not_equal(observed_ts);\n            if (!updated_ts.ok()) {\n                return last_result;\n            }\n            observed_ts = *updated_ts;\n            locked.emplace(slot.mutex.lock());\n        }\n    }\n\n   private:\n    static Runtime*& instance_ptr()\n    {\n        // Intentionally leaked to avoid any potential static deinit order issues.\n        //\n        static Runtime* instance_ = new Runtime;\n        return instance_;\n    }\n\n    ~Runtime() noexcept\n    {\n        this->halt();\n    }\n\n    using WorkGuard =\n        batt::Optional<boost::asio::executor_work_guard<boost::asio::io_context::executor_type>>;\n\n    std::atomic<bool> halted_{false};\n\n    std::unique_ptr<TaskScheduler> default_scheduler_;\n\n    std::atomic<TaskScheduler*> scheduler_;\n\n    const usize n_weak_notify_slots_ = std::thread::hardware_concurrency() * 1024;\n    const std::unique_ptr<WeakNotifySlot[]> weak_notify_slot_{[this] {\n        auto* slots = new WeakNotifySlot[this->n_weak_notify_slots_];\n        for (usize i = 0; i < this->n_weak_notify_slots_; ++i) {\n            slots[i].counter.set_value(0);\n        }\n        return slots;\n    }()};\n};\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\nclass Runtime::DefaultScheduler : public TaskScheduler\n{\n   public:\n    explicit DefaultScheduler() noexcept\n    {\n        BATT_VLOG(1) << \"cpu_count == \" << cpu_count_;\n\n        for (usize i = 0; i < cpu_count_; ++i) {\n            this->io_.emplace_back(std::make_unique<boost::asio::io_context>());\n\n            this->work_guards_.emplace_back(std::make_unique<WorkGuard>(io_.back()->get_executor()));\n\n            this->thread_pool_.emplace_back([i, this, io = io_.back().get()] {\n                if (i < this->cpu_count_) {\n                    usize cpu_n = i % this->cpu_count_;\n                    batt::this_thread_id() = cpu_n + 1;\n                    BATT_VLOG(1) << \"thread \" << batt::this_thread_id() << \" started; cpu=\" << (cpu_n + 1);\n#ifdef __linux__\n                    BATT_CHECK_OK(pin_thread_to_cpu(cpu_n)) << \"cpu=\" << cpu_n;\n#endif  // __linux__\n                    BATT_VLOG(1) << \"thread \" << i << \" set affinity mask; running io_context\";\n                }\n                io->run();\n            });\n        }\n    }\n\n    ~DefaultScheduler() noexcept\n    {\n        this->halt();\n        this->join();\n    }\n\n    boost::asio::any_io_executor schedule_task() override\n    {\n        if (BATT_HINT_FALSE(this->deprecated_)) {\n            BATT_LOG_WARNING() << \"DEPRECATED DefaultScheduler::schedule_task() from: \"\n                               << boost::stacktrace::stacktrace{};\n        }\n        if (BATT_HINT_FALSE(this->disabled_)) {\n            BATT_PANIC() << \"DISABLED: DefaultScheduler::schedule_task() -- Please Remove!\";\n        }\n\n        const usize i = this->round_robin_.fetch_add(1);\n\n        BATT_VLOG(1) << \"scheduling task on default thread \" << (i + 1);\n        BATT_VLOG(2) << \" -- \" << boost::stacktrace::stacktrace{};\n\n        return this->io_[i % this->cpu_count_]->get_executor();\n    }\n\n    void halt() override\n    {\n        const bool halted_prior = this->halted_.exchange(true);\n        if (halted_prior) {\n            return;\n        }\n        BATT_VLOG(1) << \"halting Runtime::DefaultScheduler...\";\n\n        for (auto& work_ptr : this->work_guards_) {\n            work_ptr.reset();\n        }\n        BATT_VLOG(1) << \"work guards released\";\n\n        for (auto& io_ptr : this->io_) {\n            io_ptr->stop();\n        }\n        BATT_VLOG(1) << \"io contexts stopped\";\n    }\n\n    void join() override\n    {\n        std::unique_lock<std::mutex> lock{this->join_mutex_};\n        while (!this->thread_pool_.empty()) {\n            try {\n                this->thread_pool_.back().join();\n            } catch (...) {\n                std::cerr << \"unhandled exception: \"\n                          << boost::diagnostic_information(boost::current_exception()) << std::endl;\n            }\n            this->thread_pool_.pop_back();\n        }\n        BATT_VLOG(1) << \"threads joined\";\n    }\n\n   private:\n    const bool deprecated_ = getenv_as<bool>(\"BATT_DEFAULT_SCHEDULER_DEPRECATE\").value_or(false);\n    const bool disabled_ = getenv_as<bool>(\"BATT_DEFAULT_SCHEDULER_DISABLE\").value_or(false);\n\n    // The number of physical execution units on the system; read at construction time.\n    //\n    const unsigned cpu_count_ =\n        getenv_as<unsigned>(\"BATT_DEFAULT_SCHEDULER_CPU_COUNT\").value_or(std::thread::hardware_concurrency());\n\n    // One io_context for each thread in the pool.\n    //\n    std::vector<std::unique_ptr<boost::asio::io_context>> io_;\n\n    // One WorkGuard for each io_context, to keep it alive even if there is no work available at the\n    // moment.\n    //\n    std::vector<std::unique_ptr<WorkGuard>> work_guards_;\n\n    // One thread per io_context.\n    //\n    std::vector<std::thread> thread_pool_;\n\n    // Latching flag to make it safe to call this->halt() more than once.\n    //\n    std::atomic<bool> halted_{false};\n\n    // The scheduling algorithm is to increment this counter each time `schedule_task` is invoked.\n    //\n    std::atomic<usize> round_robin_{0};\n\n    // Used to prevent data races inside `join()`.\n    //\n    std::mutex join_mutex_;\n};\n\n//#=##=##=#==#=#==#===#+==#+==========+==+=+=+=+=+=++=+++=+++++=-++++=-+++++++++++\n\ninline Runtime::Runtime() noexcept\n    : default_scheduler_{new DefaultScheduler{}}\n    , scheduler_{this->default_scheduler_.get()}\n{\n    ::batt::enable_dump_tasks();\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_RUNTIME_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::Runtime",
      "kind": "class",
      "language": "cpp",
      "name": "batt::Runtime",
      "refid": "classbatt_1_1Runtime",
      "title": "batt::Runtime",
      "url": "/_autogen/Classes/classbatt_1_1Runtime/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::Runtime::WeakNotifySlot",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::Runtime::WeakNotifySlot",
      "refid": "structbatt_1_1Runtime_1_1WeakNotifySlot",
      "title": "batt::Runtime::WeakNotifySlot",
      "url": "/_autogen/Classes/structbatt_1_1Runtime_1_1WeakNotifySlot/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::TaskScheduler",
          "refid": "classbatt_1_1TaskScheduler",
          "url": "/_autogen/Classes/classbatt_1_1TaskScheduler/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::Runtime::DefaultScheduler",
      "kind": "class",
      "language": "cpp",
      "name": "batt::Runtime::DefaultScheduler",
      "refid": "classbatt_1_1Runtime_1_1DefaultScheduler",
      "title": "batt::Runtime::DefaultScheduler",
      "url": "/_autogen/Classes/classbatt_1_1Runtime_1_1DefaultScheduler/",
      "visibility": "public"
    }
  ],
  "refid": "runtime_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/runtime.hpp",
  "url": "/_autogen/Files/runtime_8hpp/#file-runtime.hpp",
  "visibility": "public"
}