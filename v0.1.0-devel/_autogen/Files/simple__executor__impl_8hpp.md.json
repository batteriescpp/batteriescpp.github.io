{
  "abstract": false,
  "anchor": "#file-simple-executor-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-simple-executor-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_SIMPLE_EXECUTOR_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/simple_executor_impl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/simple_executor_impl.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_SIMPLE_EXECUTOR_IMPL_HPP",
      "override": false,
      "refid": "simple__executor__impl_8hpp_1a3422d9ab202a5ee979df13724151edf9",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_SIMPLE_EXECUTOR_IMPL_HPP",
      "url": "/_autogen/Files/simple__executor__impl_8hpp/#define-batteries-async-simple-executor-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/simple_executor_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/simple_executor_impl.hpp",
    "line": 0
  },
  "name": "batteries/async/simple_executor_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_SIMPLE_EXECUTOR_IMPL_HPP\n#define BATTERIES_ASYNC_SIMPLE_EXECUTOR_IMPL_HPP\n\n#include <batteries/config.hpp>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL auto SimpleExecutionContext::get_executor() noexcept -> executor_type\n{\n    return executor_type{this};\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void SimpleExecutionContext::stop() noexcept\n{\n    this->stop_.store(true);\n    this->cond_.notify_all();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void SimpleExecutionContext::run() noexcept\n{\n    SimpleExecutionContext* prev_context = this;\n    std::swap(*this_thread_inside_run(), prev_context);\n    auto on_scope_exit = batt::finally([&] {\n        std::swap(*this_thread_inside_run(), prev_context);\n    });\n\n    while (!this->stop_.load() && this->work_count_.get_value() > 0) {\n        bool have_more = false;\n\n        auto next = [this, &have_more]() -> AbstractHandler<>* {\n            std::unique_lock<std::mutex> lock{this->mutex_};\n\n            while (this->queue_.empty() && !this->stop_.load() && this->work_count_.get_value() > 0) {\n                this->cond_.wait(lock);\n            }\n\n            if (this->queue_.empty()) {\n                return nullptr;\n            }\n\n            auto* ptr = &(this->queue_.front());\n            this->queue_.pop_front();\n            have_more = !this->queue_.empty();\n\n            return ptr;\n        }();\n\n        if (have_more) {\n            this->cond_.notify_one();\n        }\n\n        if (next) {\n            try {\n                next->notify();\n            } catch (...) {\n                continue;\n            }\n        }\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename OutstandingWorkP>\nBATT_INLINE_IMPL SimpleExecutionContext& BasicSimpleExecutor<OutstandingWorkP>::query(\n    boost::asio::execution::context_t) const noexcept\n{\n    return *this->context_;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename OutstandingWorkP>\nBATT_INLINE_IMPL boost::asio::execution_context& BasicSimpleExecutor<OutstandingWorkP>::query(\n    boost::asio::execution::context_as_t<boost::asio::execution_context&>) const noexcept\n{\n    return *this->context_;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename OutstandingWorkP>\nBATT_INLINE_IMPL void BasicSimpleExecutor<OutstandingWorkP>::on_work_started() const noexcept\n{\n    if (this->context_ != nullptr) {\n        BATT_CHECK_NE(this->context_->work_count_.fetch_add(1) + 1u, 0u);\n        this->context_->wake();\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename OutstandingWorkP>\nBATT_INLINE_IMPL void BasicSimpleExecutor<OutstandingWorkP>::on_work_finished() const noexcept\n{\n    if (this->context_ != nullptr) {\n        BATT_CHECK_GT(this->context_->work_count_.fetch_sub(1), 0u);\n        this->context_->wake();\n    }\n}\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// Explicit instantiations.\n//\ntemplate class BasicSimpleExecutor<boost::asio::execution::outstanding_work_t::tracked_t>;\ntemplate class BasicSimpleExecutor<boost::asio::execution::outstanding_work_t::untracked_t>;\n\n//#=##=##=#==#=#==#===#+==#+==========+==+=+=+=+=+=++=+++=+++++=-++++=-+++++++++++\n// Type requirement checks.\n\nstatic_assert(std::is_constructible<boost::asio::any_io_executor, SimpleExecutor>{},\n              \"If this check fails, hopefully one or more of the following more scoped checks will fail as \"\n              \"well, which will help with debugging!\");\n\nstatic_assert(\n    boost::asio::execution::can_execute<SimpleExecutor, boost::asio::execution::invocable_archetype>::value,\n    \"\");\n\nstatic_assert(std::is_same_v<bool, decltype(std::declval<const SimpleExecutor>() ==\n                                            std::declval<const SimpleExecutor>())>,\n              \"\");\n\nstatic_assert(std::is_same_v<bool, decltype(std::declval<const SimpleExecutor>() !=\n                                            std::declval<const SimpleExecutor>())>,\n              \"\");\n\nstatic_assert(std::is_nothrow_copy_constructible<SimpleExecutor>::value, \"\");\nstatic_assert(std::is_nothrow_destructible<SimpleExecutor>::value, \"\");\nstatic_assert(boost::asio::traits::equality_comparable<SimpleExecutor>::is_valid, \"\");\nstatic_assert(boost::asio::traits::equality_comparable<SimpleExecutor>::is_noexcept, \"\");\n\nstatic_assert(boost::asio::execution::is_executor_v<SimpleExecutor>, \"\");\n\nstatic_assert(boost::asio::execution::context_as_t<boost::asio::execution_context&>::is_applicable_property_v<\n                  SimpleExecutor>,\n              \"\");\n\nstatic_assert(\n    boost::asio::can_query<SimpleExecutor,\n                           boost::asio::execution::context_as_t<boost::asio::execution_context&>>::value ||\n        true,\n    \"\");\n\nstatic_assert(boost::asio::is_applicable_property_v<\n                  SimpleExecutor, boost::asio::execution::context_as_t<boost::asio::execution_context&>>,\n              \"\");\n\nstatic_assert(boost::asio::execution::detail::supportable_properties<\n                  0, void(boost::asio::execution::context_as_t<boost::asio::execution_context&>)>::\n                      template is_valid_target<SimpleExecutor>::value ||\n                  true,\n              \"\");\n\nstatic_assert(\n    boost::asio::execution::detail::is_valid_target_executor<\n        SimpleExecutor, void(boost::asio::execution::context_as_t<boost::asio::execution_context&>)>::value,\n    \"\");\n\nstatic_assert(std::is_same_v<decltype(boost::asio::query(\n                                 std::declval<const SimpleExecutor>(),\n                                 boost::asio::execution::context_as<boost::asio::execution_context&>)),\n                             boost::asio::execution_context&>,\n              \"\");\n\nstatic_assert(boost::asio::is_executor<SimpleExecutionContext::executor_type>::value);\n\nstatic_assert(boost::asio::execution::detail::is_executor_of_impl<\n              SimpleExecutionContext::executor_type, boost::asio::execution::invocable_archetype>::value);\n\nstatic_assert(boost::asio::execution::is_executor<SimpleExecutionContext::executor_type>::value);\n\n}  //namespace batt\n\n#endif  // BATTERIES_ASYNC_SIMPLE_EXECUTOR_IMPL_HPP",
  "refid": "simple__executor__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/simple_executor_impl.hpp",
  "url": "/_autogen/Files/simple__executor__impl_8hpp/#file-simple-executor-impl.hpp",
  "visibility": "public"
}