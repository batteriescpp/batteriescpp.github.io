{
  "abstract": false,
  "anchor": "#file-state-machine-model.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-state-machine-model-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_STATE_MACHINE_MODEL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/state_machine_model.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/state_machine_model.hpp",
        "line": 6
      },
      "name": "BATTERIES_STATE_MACHINE_MODEL_HPP",
      "override": false,
      "refid": "state__machine__model_8hpp_1afeee3e244e15c2c48a6ce639f7131f2b",
      "static": false,
      "strong": false,
      "title": "BATTERIES_STATE_MACHINE_MODEL_HPP",
      "url": "/_autogen/Files/state__machine__model_8hpp/#define-batteries-state-machine-model-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/state_machine_model.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/state_machine_model.hpp",
    "line": 0
  },
  "name": "batteries/state_machine_model.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_STATE_MACHINE_MODEL_HPP\n#define BATTERIES_STATE_MACHINE_MODEL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/state_machine_model/entropy_source.hpp>\n#include <batteries/state_machine_model/exhaustive_model_checker.hpp>\n#include <batteries/state_machine_model/parallel_model_check_state.hpp>\n#include <batteries/state_machine_model/state_machine_result.hpp>\n#include <batteries/state_machine_model/state_machine_traits.hpp>\n#include <batteries/state_machine_model/stochastic_model_checker.hpp>\n#include <batteries/state_machine_model/verbose.hpp>\n\n#include <batteries/async/debug_info.hpp>\n#include <batteries/async/mutex.hpp>\n#include <batteries/async/queue.hpp>\n\n#include <batteries/assert.hpp>\n#include <batteries/cpu_align.hpp>\n#include <batteries/hash.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/radix_queue.hpp>\n#include <batteries/static_dispatch.hpp>\n#include <batteries/strong_typedef.hpp>\n\n#include <array>\n#include <atomic>\n#include <bitset>\n#include <chrono>\n#include <deque>\n#include <unordered_map>\n#include <unordered_set>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\ntemplate <typename StateT, typename StateHash = std::hash<StateT>,\n          typename StateEqual = std::equal_to<StateT>>\nclass StateMachineModel\n{\n   public:\n    using state_type = StateT;\n    using state_hash_type = StateHash;\n    using state_equal_type = StateEqual;\n\n    using Base = StateMachineModel;\n    using Branch = StateMachineBranch<StateT, StateHash, StateEqual>;\n    using Result = StateMachineResult;\n    using AdvancedOptions = StateMachineModelCheckAdvancedOptions;\n\n    enum struct VisitResult {\n        kFirstTime,\n        kSeenBefore,\n    };\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    StateMachineModel(const StateMachineModel&) = delete;\n    StateMachineModel& operator=(const StateMachineModel&) = delete;\n\n    virtual ~StateMachineModel() = default;\n\n    StateMachineModel() = default;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    template <typename Checker = ExhaustiveModelChecker<StateMachineModel>>\n    Result check_model(StaticType<Checker> = {});\n\n    bool state_visited(const state_type& s) const\n    {\n        return this->visited_.count(s) != 0;\n    }\n\n    std::shared_ptr<std::ostringstream> debug_out = std::make_shared<std::ostringstream>();\n\n    // Attach the passed entropy source to the model.  This is used to return values from `pick_int`, etc.\n    // during the model's `step()` function.\n    //\n    void set_entropy(StateMachineEntropySource&& entropy_source)\n    {\n        this->entropy_ = std::move(entropy_source);\n    }\n\n    // Clears the set of states visited by the model.\n    //\n    void reset_visited_states()\n    {\n        this->visited_.clear();\n    }\n\n    // Returns whether this is the first time visiting the passed state.\n    //\n    VisitResult visit(const StateT& state, const Branch& src_branch)\n    {\n        // We save a subgraph of the overall search so we can give somewhat meaningful information to help\n        // users understand how a state machine got into a certain state, if things go wrong.\n        //\n        const auto& [iter, inserted] = this->visited_.emplace(state, src_branch);\n\n        (void)iter;\n\n        if (inserted) {\n            return VisitResult::kFirstTime;\n        }\n        return VisitResult::kSeenBefore;\n    }\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n    // Derived classes must implemented these methods to define the state machine simulation.\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    // Returns the initial state value for the search.\n    //\n    virtual state_type initialize() = 0;\n\n    // Invoked whenever a state is entered, prior to checking invariants and generating branches.\n    //\n    virtual void enter_state(const state_type&) = 0;\n\n    // Should non-deterministically update the state machine using one or more calls to `pick_int` and/or\n    // `do_one_of`.  This defines the state transition space.  Eventually all values of non-deterministic\n    // variables will be searched.\n    //\n    virtual void step() = 0;\n\n    // Invoked after step() to retrieve the serialized snapshot of the new state.\n    //\n    virtual state_type leave_state() = 0;\n\n    // Verifies the invariants of the state machine that should hold after initialization and between each\n    // step.  Returns false if the check failed.\n    //\n    virtual bool check_invariants() = 0;\n\n    // (Optional) Verifies any invariants that should hold across subsequent states.  Returns false if the\n    // check failed.\n    //\n    virtual bool check_stepwise_invariants()\n    {\n        return true;\n    }\n\n    // (Optional) Maps symmetrical states onto a single normalized form; in many cases this can dramatically\n    // reduce the overall state search space.\n    //\n    virtual state_type normalize(const state_type& s)\n    {\n        return s;\n    }\n\n    // (Optional) How often to report progress during a model check.\n    //\n    virtual double progress_report_interval_seconds() const\n    {\n        return 5.0;\n    }\n\n    // (Optional) Report progress during a model check.\n    //\n    virtual void report_progress(const Result&)\n    {\n    }\n\n    // (Optional) Should return > 1 if this model supports parallel execution via object cloning.\n    //\n    virtual usize max_concurrency() const\n    {\n        return 1;\n    }\n\n    // If the derived model implementation class returns `max_concurrency() > 1`, this method must return\n    // non-nullptr.\n    //\n    virtual std::unique_ptr<StateMachineModel> clone() const\n    {\n        return nullptr;\n    }\n\n    // (Optional) Advanced tuning of model check algorithm.\n    //\n    virtual AdvancedOptions advanced_options() const\n    {\n        return AdvancedOptions::with_default_values();\n    }\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    // Returns an integer `i` non-deterministically, such that `i >= min_value && i <= max_value`.\n    //\n    usize pick_int(usize min_value, usize max_value)\n    {\n        return this->entropy_.pick_int(min_value, max_value);\n    }\n\n    // Returns false or true.\n    //\n    bool pick_branch()\n    {\n        return this->entropy_.pick_branch();\n    }\n\n    // Returns one of the items in `values`, using `pick_int`.\n    //\n    template <typename T>\n    T pick_one_of(std::initializer_list<T> values)\n    {\n        return this->entropy_.pick_one_of(values);\n    }\n\n    // If there is at least one runnable completion handler in `context`, one such handler is selected (via\n    // `pick_int`) and invoked, and this function returns true.  Else false is returned.\n    //\n    bool run_one(FakeExecutionContext& context)\n    {\n        return this->entropy_.run_one(context);\n    }\n\n    // Performs one of the passed action functions.  Each `Fn` in `actions...` must be callable with no\n    // arguments and its return type must be ignorable.\n    //\n    template <typename... Fn>\n    void do_one_of(Fn&&... actions)\n    {\n        this->entropy_.do_one_of(BATT_FORWARD(actions)...);\n    }\n\n    // Returns a generic entropy source that can be passed around by state machine implementations to\n    // implement modular simulations.  No copy of the returned object may outlive `this`, or behavior is\n    // undefined!\n    //\n    StateMachineEntropySource entropy()\n    {\n        return this->entropy_;\n    }\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n   private:\n    using VisitedBranchMap = std::unordered_map<state_type, Branch, StateHash, StateEqual>;\n\n    VisitedBranchMap visited_;\n    StateMachineEntropySource entropy_;\n};\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\ntemplate <typename StateT, typename StateHash, typename StateEqual>\ntemplate <typename Checker>\nauto StateMachineModel<StateT, StateHash, StateEqual>::check_model(StaticType<Checker>) -> Result\n{\n    const usize n_shards = this->max_concurrency();\n    BATT_CHECK_GT(n_shards, 0u);\n\n    const auto print_summary = finally([&] {\n        BATT_STATE_MACHINE_VERBOSE() << \"Model check done; \" << BATT_INSPECT(this->visited_.size());\n    });\n\n    detail::ParallelModelCheckState<Branch> mesh{/*shard_count=*/n_shards};\n\n    if (n_shards == 1) {\n        Checker checker{*this, mesh, 0};\n        return checker.run();\n    }\n\n    // Set up a thread pool and process a shard per thread.\n    //\n    std::vector<std::unique_ptr<Latch<Result>>> shard_results(n_shards);\n    std::vector<VisitedBranchMap> shard_visited(n_shards);\n    std::vector<std::unique_ptr<StateMachineModel>> shard_models(n_shards);\n    std::vector<std::thread> threads;\n    const usize cpu_count = std::thread::hardware_concurrency();\n\n    // IMPORTANT: all of the latches must be created before we launch any of the threads.\n    //\n    for (usize shard_i = 0; shard_i < n_shards; ++shard_i) {\n        shard_results[shard_i] = std::make_unique<Latch<Result>>();\n\n        // Each thread gets its own copy of the model object.\n        //\n        shard_models[shard_i] = this->clone();\n        BATT_CHECK_NOT_NULLPTR(shard_models[shard_i])\n            << \"clone() MUST return non-nullptr if max_concurrency() is > 1\";\n    }\n\n    const bool pin_cpu = this->advanced_options().pin_shard_to_cpu;\n\n    // Launch threads, one per shard.  Each thread will explore the model state space that hashes to its\n    // portion of the hash space (i.e., its \"shard\") and then do O(log_2(N)) combine operations to collect the\n    // results of other shards.  These two stages are like Map and Reduce.\n    //\n    for (usize shard_i = 0; shard_i < n_shards; ++shard_i) {\n        threads.emplace_back([shard_i, &shard_results, &shard_models, &shard_visited, &mesh, cpu_count,\n                              pin_cpu] {\n            boost::asio::io_context io;\n\n            batt::Task shard_task{\n                io.get_executor(), [&] {\n                    // Pin each thread to a different CPU to try to speed things up.\n                    //\n                    if (pin_cpu) {\n                        const usize cpu_i = shard_i % cpu_count;\n                        pin_thread_to_cpu(cpu_i).IgnoreError();\n                    }\n\n                    // First step is to compute the shard-local result.\n                    //\n                    Checker checker{*shard_models[shard_i], mesh, shard_i};\n                    Result tmp_result = checker.run();\n                    tmp_result.shards.set(shard_i, true);\n\n                    shard_visited[shard_i] = std::move(shard_models[shard_i]->visited_);\n\n                    // Combine sub-results until the merge mask collides with the least-significant 1 bit of\n                    // the shard index.\n                    //\n                    // Example:\n                    //\n                    // shard_i  | merge_i values\n                    // ---------|---------------------------------\n                    // 0b0000   | {0b0001, 0b0010, 0b0100, 0b1000}\n                    // 0b0001   | {}\n                    // 0b0010   | {0b0011}\n                    // 0b0011   | {}\n                    // 0b0100   | {0b0101, 0b0110}\n                    // 0b0101   | {}\n                    // 0b0110   | {0b0111}\n                    // 0b0111   | {}\n                    // 0b1000   | {0b1001, 0b1010, 0b1100}\n                    // 0b1001   | {}\n                    // 0b1010   | {0b1011}\n                    // 0b1011   | {}\n                    // 0b1100   | {0b1101, 0b1110}\n                    // 0b1101   | {}\n                    // 0b1110   | {0b1111}\n                    // 0b1111   | {}\n                    //\n\n                    for (usize merge_mask = 1; (merge_mask & shard_i) == 0; merge_mask <<= 1) {\n                        const usize merge_i = (shard_i | merge_mask);\n                        if (merge_i >= mesh.shard_count) {\n                            // `merge_i` is only going to get bigger, so stop as soon as this happens.\n                            break;\n                        }\n                        BATT_CHECK_LT(shard_i, merge_i);\n                        BATT_CHECK_LT(merge_i, shard_results.size());\n\n                        const Result merge_result = BATT_OK_RESULT_OR_PANIC(shard_results[merge_i]->await());\n\n                        tmp_result = combine_results(tmp_result, merge_result);\n\n                        shard_visited[shard_i].insert(shard_visited[merge_i].begin(),\n                                                      shard_visited[merge_i].end());\n                    }\n                    BATT_CHECK(shard_results[shard_i]->set_value(std::move(tmp_result)));\n\n                    io.stop();\n                }};\n\n            io.run();\n        });\n    }\n\n    for (std::thread& t : threads) {\n        t.join();\n    }\n\n    {\n        usize shard_i = 0;\n        for (auto& r : shard_results) {\n            *this->debug_out << shard_i << \": \" << BATT_OK_RESULT_OR_PANIC(r->poll()) << std::endl;\n            ++shard_i;\n        }\n    }\n\n    this->visited_ = std::move(shard_visited[0]);\n    Result result = BATT_OK_RESULT_OR_PANIC(shard_results[0]->poll());\n    result.state_count = this->visited_.size();\n\n    return result;\n}\n\n//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n/* TEMPLATE FOR NEW STATE MACHINE MODEL IMPLS:\n\n#include <batteries/state_machine_model.hpp>\n\n#include <boost/functional/hash.hpp>\n#include <boost/operators.hpp>\n\nstruct $ImplState : boost::equality_comparable<$ImplState> {\n  struct Hash {\n    usize operator()(const $ImplState& s) const\n    {\n      return batt::hash();\n    }\n  };\n\n  friend bool operator==(const $ImplState& l, const $ImplState& r)\n  {\n    return false;\n  }\n\n  bool is_terminal() const\n  {\n    return true;\n  }\n};\n\nclass $ImplModel : public batt::StateMachineModel<$ImplState, $ImplState::Hash>\n{\n public:\n    $ImplState initialize() override\n    {\n        return $ImplState{};\n    }\n\n    void enter_state(const $ImplState& s) override\n    {\n        this->state_ = s;\n    }\n\n    void step() override\n    {\n        if (this->state_.is_terminal()) {\n            return;\n        }\n\n        this->pick_int(min, max);\n\n        this->do_one_of([]{\n            action1();\n          },\n          []{\n            action2();\n          });\n    }\n\n    $ImplState leave_state() override\n    {\n        return this->state_;\n    }\n\n    bool check_invariants() override\n    {\n        return true;\n    }\n\n    $ImplState normalize(const $ImplState& s) override\n    {\n        return s;\n    }\n\n   private:\n    $ImplState state_;\n};\n\nTEST($ImplTest, StateMachineSimulation)\n{\n    $ImplModel model;\n\n    $ImplModel::Result result = model.check_model();\n    EXPECT_TRUE(result.ok());\n}\n\n */\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\n}  // namespace batt\n\n#endif  // BATTERIES_STATE_MACHINE_MODEL_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::StateMachineModel",
      "kind": "class",
      "language": "cpp",
      "name": "batt::StateMachineModel",
      "refid": "classbatt_1_1StateMachineModel",
      "title": "batt::StateMachineModel",
      "url": "/_autogen/Classes/classbatt_1_1StateMachineModel/",
      "visibility": "public"
    }
  ],
  "refid": "state__machine__model_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/state_machine_model.hpp",
  "url": "/_autogen/Files/state__machine__model_8hpp/#file-state-machine-model.hpp",
  "visibility": "public"
}