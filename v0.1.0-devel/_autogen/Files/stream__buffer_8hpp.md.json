{
  "abstract": false,
  "anchor": "#file-stream-buffer.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-stream-buffer-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_STREAM_BUFFER_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/stream_buffer.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/stream_buffer.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_STREAM_BUFFER_HPP",
      "override": false,
      "refid": "stream__buffer_8hpp_1a0fccc9459904aaf2c2a23885de5bd726",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_STREAM_BUFFER_HPP",
      "url": "/_autogen/Files/stream__buffer_8hpp/#define-batteries-async-stream-buffer-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/stream_buffer.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/stream_buffer.hpp",
    "line": 0
  },
  "name": "batteries/async/stream_buffer.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_STREAM_BUFFER_HPP\n#define BATTERIES_ASYNC_STREAM_BUFFER_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/io_result.hpp>\n#include <batteries/async/types.hpp>\n#include <batteries/async/watch.hpp>\n\n#include <batteries/assert.hpp>\n#include <batteries/buffer.hpp>\n#include <batteries/checked_cast.hpp>\n#include <batteries/finally.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/small_vec.hpp>\n#include <batteries/status.hpp>\n#include <batteries/type_traits.hpp>\n\n#include <batteries/asio/any_io_executor.hpp>\n#include <batteries/asio/system_executor.hpp>\n\n#include <functional>\n#include <memory>\n\nnamespace batt {\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\nclass StreamBuffer\n{\n   public:\n    static constexpr usize kTempBufferSize = 512;\n\n    using executor_type = boost::asio::any_io_executor;\n\n    // Creates a new stream buffer large enough to hold `capacity` bytes of data.\n    //\n    explicit StreamBuffer(usize capacity) noexcept;\n\n    // Calls `this->close()`.\n    //\n    ~StreamBuffer() noexcept;\n\n    // The maximum number of bytes that this buffer can hold.\n    //\n    usize capacity() const;\n\n    // The current number of bytes available as consumable data.\n    //\n    usize size() const;\n\n    // The current number of bytes available as committable buffer space.\n    //\n    usize space() const;\n\n    // The executor associated with this stream buffer.\n    //\n    executor_type get_executor() const\n    {\n        return this->executor_;\n    }\n\n    // Returns a MutableBufferSequence that is exactly `exact_count` bytes large.\n    //\n    // This method may block the current task if buffer space is not available to satisfy the request.  It\n    // will unblock once enough data has been trimmed from the buffer via `consume()`, or if this object is\n    // closed for reading.\n    //\n    // If an `exact_count` that exceeds `this->capacity()` is passed, then this method will immediately return\n    // a StatusCode::kInvalidArgument result.\n    //\n    StatusOr<SmallVec<MutableBuffer, 2>> prepare_exactly(i64 exact_count);\n\n    // Like `prepare_exactly`, except that this method will return as soon as `this->space()` is at least\n    // `min_count` bytes, and the returned MutableBufferSequence will be as large as possible.\n    //\n    StatusOr<SmallVec<MutableBuffer, 2>> prepare_at_least(i64 min_count);\n\n    // Invokes the passed handler with a MutableBufferSequence as soon as at least `min_count` free bytes can\n    // be allocated within the buffer.\n    //\n    template <typename Handler = void(const ErrorCode& ec, SmallVec<MutableBuffer, 2>)>\n    void async_prepare_at_least(i64 min_count, Handler&& handler);\n\n    // Logically transfer `count` bytes of data from the \"prepared\" region of the buffer to the \"committed\"\n    // region, by advancing the commit offset pointer.  This method does not literally copy data.  Behavior is\n    // undefined if `count > this->space()`.\n    //\n    void commit(i64 count);\n\n    // Prepare enough space in the buffer to make a byte-for-byte copy of `value` in the buffer, copy the\n    // value, and do the equivalent of `this->commit(sizeof(T))`.  `T` must be safe to copy via `memcpy`,\n    // otherwise behavior is undefined.\n    //\n    template <typename T>\n    Status write_type(StaticType<T>, const T& value);\n\n    // Copy at least 1 byte of the passed data to the buffer and then invoke the handler with the number of\n    // bytes written.\n    //\n    template <typename ConstBuffers, typename Handler = void(const ErrorCode& ec, usize n_bytes_written)>\n    void async_write_some(ConstBuffers&& buffers, Handler&& handler);\n\n    // Convenience shortcut for `prepare_exactly`, copy the data, then `commit`.\n    //\n    Status write_all(ConstBuffer buffer);\n\n    // Unblocks any current and future calls to `fetch_at_least` (and all other fetch/read methods).  This\n    // signals to the buffer (and all other clients of this object) that no more data will be\n    // written/committed.\n    //\n    void close_for_write();\n\n    // Returns a ConstBufferSequence containing at least `min_count` bytes of data.\n    //\n    // This method may block the current task if there isn't enough committed data in the buffer to satisfy\n    // the request (i.e., if `this->size() < min_count`).\n    //\n    // If `min_count` that exceeds `this->capacity()` is passed, then this method will immediately return\n    // a StatusCode::kInvalidArgument result.\n    //\n    StatusOr<SmallVec<ConstBuffer, 2>> fetch_at_least(i64 min_count);\n\n    // Frees the specified number of bytes at the beginning of the \"committed\" region of the buffer, making\n    // that buffer space available for current or future calls to `prepare_exactly` or `prepare_at_least`.\n    //\n    void consume(i64 count);\n\n    // Returns the next sizeof(T) bytes of the stream as a reference to `const T`.  If the stream forces T to\n    // be split over the end of the buffer, then a reference to a copy of the data is returned.  The\n    // referenced data is valid until the next call to `fetch_type` or `consume`.\n    //\n    template <typename T>\n    StatusOr<std::reference_wrapper<const T>> fetch_type(StaticType<T> = {});\n\n    // Consumes sizeof(T) bytes from the stream.\n    //\n    template <typename T>\n    void consume_type(StaticType<T> = {});\n\n    // Reads and returns a single value of type T from the stream, copying byte-for-byte as if by memcpy.\n    //\n    // Behavior is undefined if it is unsafe to copy values of type T in this manner.\n    //\n    template <typename T>\n    StatusOr<T> read_type(StaticType<T> = {});\n\n    // Unblocks any current and future calls to `prepare_at_least` (and all other fetch/read methods).  This\n    // signals to the buffer (and all other clients of this object) that no more data will be read/consumed.\n    //\n    void close_for_read();\n\n    // Shortcut for `this->close_for_read()` and `this->close_for_write()`.\n    //\n    void close();\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n   private:\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    template <typename BufferType>\n    SmallVec<BufferType, 2> get_buffers(i64 offset, i64 count, StaticType<BufferType> buffer_type = {});\n\n    template <typename BufferType, typename GetMaxCount>\n    StatusOr<SmallVec<BufferType, 2>> pre_transfer(i64 min_count, Watch<i64>& fixed_pos,\n                                                   Watch<i64>& moving_pos, i64 min_delta,\n                                                   const GetMaxCount& get_max_count,\n                                                   WaitForResource wait_for_resource,\n                                                   StaticType<BufferType> buffer_type = {},\n                                                   i64* moving_pos_observed = nullptr);\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    executor_type executor_ = boost::asio::system_executor();\n\n    // The size in bytes of the array pointed to by `buffer_`.\n    //\n    i64 capacity_;\n\n    // Points to the buffer for this object.\n    //\n    std::unique_ptr<u8[]> buffer_;\n\n    // A temporary buffer so that we can make sure the first buffer always holds at least the min_count.\n    //\n    SmallVec<u8, kTempBufferSize> tmp_buffer_;\n\n    // The offset from the beginning of the stream that represents the upper bound of read data.  This value\n    // increases monotonically beyond `this->capacity_`; the implementation must find the true consume\n    // position within the buffer by taking this value modulo `this->capacity_`.\n    //\n    Watch<i64> consume_pos_;\n\n    // The offset from the beginning of the stream that represents the upper bound of written data.  This\n    // value increases monotonically beyond `this->capacity_`; the implementation must find the true commit\n    // position within the buffer by taking this value modulo `this->capacity_`.\n    //\n    Watch<i64> commit_pos_;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\ntemplate <typename T>\nStatusOr<std::reference_wrapper<StreamBuffer>> operator<<(\n    StatusOr<std::reference_wrapper<StreamBuffer>> stream_buffer, T&& obj);\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_STREAM_BUFFER_HPP\n\n#if BATT_HEADER_ONLY\n#include <batteries/async/stream_buffer_impl.hpp>\n#endif\n\n#include <batteries/async/stream_buffer.ipp>",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::StreamBuffer",
      "kind": "class",
      "language": "cpp",
      "name": "batt::StreamBuffer",
      "refid": "classbatt_1_1StreamBuffer",
      "title": "batt::StreamBuffer",
      "url": "/_autogen/Classes/classbatt_1_1StreamBuffer/",
      "visibility": "public"
    }
  ],
  "refid": "stream__buffer_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/stream_buffer.hpp",
  "url": "/_autogen/Files/stream__buffer_8hpp/#file-stream-buffer.hpp",
  "visibility": "public"
}