{
  "abstract": false,
  "anchor": "#file-task-decl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-task-decl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_TASK_DECL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/task_decl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/task_decl.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_TASK_DECL_HPP",
      "override": false,
      "refid": "task__decl_8hpp_1a14aa9f182df4eea283cebeb7dd297267",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_TASK_DECL_HPP",
      "url": "/_autogen/Files/task__decl_8hpp/#define-batteries-async-task-decl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/task_decl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/task_decl.hpp",
    "line": 0
  },
  "name": "batteries/async/task_decl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "privateClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::Task::SpinLockGuard",
      "kind": "class",
      "language": "cpp",
      "name": "batt::Task::SpinLockGuard",
      "refid": "classbatt_1_1Task_1_1SpinLockGuard",
      "title": "batt::Task::SpinLockGuard",
      "url": "/_autogen/Classes/classbatt_1_1Task_1_1SpinLockGuard/",
      "visibility": "private"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::Task::Trampoline",
      "kind": "class",
      "language": "cpp",
      "name": "batt::Task::Trampoline",
      "refid": "classbatt_1_1Task_1_1Trampoline",
      "title": "batt::Task::Trampoline",
      "url": "/_autogen/Classes/classbatt_1_1Task_1_1Trampoline/",
      "visibility": "private"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_TASK_DECL_HPP\n#define BATTERIES_ASYNC_TASK_DECL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/assert.hpp>\n#include <batteries/async/continuation.hpp>\n#include <batteries/async/future_decl.hpp>\n#include <batteries/async/handler.hpp>\n#include <batteries/async/io_result.hpp>\n#include <batteries/async/watch_decl.hpp>\n#include <batteries/case_of.hpp>\n#include <batteries/constants.hpp>\n#include <batteries/finally.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/logging.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/segv.hpp>\n#include <batteries/status.hpp>\n#include <batteries/suppress.hpp>\n#include <batteries/utility.hpp>\n\n#ifdef __clang__\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wswitch-enum\"\n#pragma clang diagnostic ignored \"-Wunused-variable\"\n#elif defined(__GNUC__)\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wswitch-enum\"\n#endif  // __clang__\n\nBATT_SUPPRESS_IF_GCC(\"-Wsuggest-override\")\nBATT_SUPPRESS_IF_CLANG(\"-Wsuggest-override\")\n//\n#include <boost/asio/deadline_timer.hpp>\n#include <boost/asio/executor.hpp>\n//\nBATT_UNSUPPRESS_IF_CLANG()\nBATT_UNSUPPRESS_IF_GCC()\n\n#include <boost/asio/defer.hpp>\n#include <boost/asio/dispatch.hpp>\n#include <boost/asio/executor_work_guard.hpp>\n#include <boost/asio/post.hpp>\n#include <boost/asio/read.hpp>\n#include <boost/asio/write.hpp>\n#include <boost/exception/diagnostic_information.hpp>\n#include <boost/preprocessor/cat.hpp>\n\n#ifdef __clang__\n#pragma clang diagnostic pop\n#elif defined(__GNUC__)\n#pragma GCC diagnostic pop\n#endif  // __clang__\n\n#include <atomic>\n#include <bitset>\n#include <functional>\n#include <future>\n#include <thread>\n#include <type_traits>\n#include <utility>\n\nnamespace batt {\n\ni32 next_thread_id();\n\ni32& this_thread_id();\n\n// Forward-declaration.\n//\nclass DebugInfoFrame;\n\nclass Task\n    : public boost::intrusive::list_base_hook<boost::intrusive::link_mode<boost::intrusive::auto_unlink>>\n{\n    friend class DebugInfoFrame;\n\n    friend void print_debug_info(DebugInfoFrame* p, std::ostream& out);\n\n   public:\n    BATT_STRONG_TYPEDEF(bool, DeferStart);\n\n    using state_type = u32;\n\n    BATT_STRONG_TYPEDEF_WITH_DEFAULT(i32, Priority, 0);\n\n    BATT_STRONG_TYPEDEF(bool, IsDone);\n\n    using executor_type = boost::asio::any_io_executor;\n\n    using TaskList = boost::intrusive::list<Task, boost::intrusive::constant_time_size<false>>;\n\n    class ConcurrentTaskList\n    {\n       public:\n        ConcurrentTaskList() = default;\n\n        ConcurrentTaskList(const ConcurrentTaskList&) = delete;\n        ConcurrentTaskList& operator=(const ConcurrentTaskList&) = delete;\n\n        void push_back(Task& task);\n\n        void unlink(Task& task);\n\n        void await_empty();\n\n        template <typename Fn, typename R = std::invoke_result_t<Fn&&, TaskList&>>\n        R with_lock(Fn&& fn);\n\n       private:\n        std::mutex mutex_;\n        TaskList task_list_;\n        std::atomic<i64> link_count_{0};\n        Watch<i64> unlink_count_{0};\n    };\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n    // Task creation defaults\n    //----- --- -- -  -  -   -\n\n    static constexpr StackSize kDefaultStackSize = StackSize{8 * kMiB};\n\n    static constexpr StackType kDefaultStackType = StackType::kFixedSize;\n\n    static constexpr DeferStart kDefaultDeferStart = DeferStart{false};\n\n    static std::string default_name()\n    {\n        return \"(anonymous)\";\n    }\n\n    static Priority default_priority()\n    {\n        return Priority{Task::current_priority() + 100};\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n    struct Options {\n        Optional<std::string> name;\n        Optional<StackSize> stack_size;\n        Optional<StackType> stack_type;\n        Optional<Priority> priority;\n        Optional<DeferStart> defer_start;\n\n        //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n        template <typename... Args>\n        static Options from_args(Args&&... args)\n        {\n            Options options;\n            options.set_params(BATT_FORWARD(args)...);\n            return options;\n        }\n\n        //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n        Options& set_params()\n        {\n            return *this;\n        }\n\n        template <typename... Args>\n        Options& set_params(std::string&& name, Args&&... args)\n        {\n            this->name.emplace(std::move(name));\n            return this->set_params(BATT_FORWARD(args)...);\n        }\n\n        template <typename... Args>\n        Options& set_params(StackSize stack_size, Args&&... args)\n        {\n            this->stack_size = stack_size;\n            return this->set_params(BATT_FORWARD(args)...);\n        }\n\n        template <typename... Args>\n        Options& set_params(StackType stack_type, Args&&... args)\n        {\n            this->stack_type = stack_type;\n            return this->set_params(BATT_FORWARD(args)...);\n        }\n\n        template <typename... Args>\n        Options& set_params(Priority priority, Args&&... args)\n        {\n            this->priority = priority;\n            return this->set_params(BATT_FORWARD(args)...);\n        }\n\n        template <typename... Args>\n        Options& set_params(DeferStart defer_start, Args&&... args)\n        {\n            this->defer_start = defer_start;\n            return this->set_params(BATT_FORWARD(args)...);\n        }\n\n        //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n        std::string get_name() && noexcept\n        {\n            if (this->name) {\n                return std::move(*this->name);\n            }\n            return Task::default_name();\n        }\n\n        std::string get_name() const&& noexcept\n        {\n            if (this->name) {\n                return *this->name;\n            }\n            return Task::default_name();\n        }\n\n        std::string get_name() const& noexcept\n        {\n            return std::move(*this).get_name();\n        }\n\n        StackSize get_stack_size() const noexcept\n        {\n            return this->stack_size.value_or(kDefaultStackSize);\n        }\n\n        StackType get_stack_type() const noexcept\n        {\n            return this->stack_type.value_or(kDefaultStackType);\n        }\n\n        Priority get_priority() const noexcept\n        {\n            if (this->priority) {\n                return *this->priority;\n            }\n            return Task::default_priority();\n        }\n\n        DeferStart get_defer_start() const noexcept\n        {\n            return this->defer_start.value_or(kDefaultDeferStart);\n        }\n    };\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    static usize& nesting_depth();\n\n    static constexpr usize kMaxNestingDepth = 8;\n\n    static constexpr usize kHandlerMemoryBytes = 128;\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    static constexpr state_type kNeedSignal = state_type{1} << 0;\n\n    static constexpr state_type kHaveSignal = state_type{1} << 1;\n\n    static constexpr state_type kSuspended = state_type{1} << 2;\n\n    static constexpr state_type kTerminated = state_type{1} << 3;\n\n    static constexpr state_type kStackTrace = state_type{1} << 4;\n\n    static constexpr state_type kSleepTimerLock = state_type{1} << 5;\n\n    static constexpr state_type kCompletionHandlersLock = state_type{1} << 6;\n\n    static constexpr state_type kSleepTimerLockSuspend = state_type{1} << 7;\n\n    static constexpr state_type kCompletionHandlersClosed = state_type{1} << 8;\n\n    static constexpr state_type kInitialized = state_type{1} << 9;\n\n    static constexpr state_type kStarted = state_type{1} << 10;\n\n    static constexpr usize kNumStateFlags = 11;\n\n    //----- --- -- -  -  -   -\n    //\n    static_assert((kNumStateFlags + 7) / 8 <= sizeof(state_type),\n                  \"state_type does not have enough bits to store all the state flags!\");\n    //\n    //----- --- -- -  -  -   -\n\n    using StateBitset = std::bitset<kNumStateFlags>;\n\n    static constexpr bool is_post_init_state(state_type state)\n    {\n        return (state & kInitialized) == kInitialized;\n    }\n\n    static constexpr bool is_pre_start_state(state_type state)\n    {\n        // IMPORTANT: this must be an **exact** match.\n        //\n        return (state == (kInitialized | kNeedSignal));\n    }\n\n    static constexpr bool is_started_state(state_type state)\n    {\n        return (state & (kInitialized | kStarted)) == (kInitialized | kStarted);\n    }\n\n    static constexpr bool is_running_state(state_type state)\n    {\n        return (state & (kInitialized | kStarted | kSuspended)) == (kInitialized | kStarted);\n    }\n\n    static constexpr bool is_ready_state(state_type state)\n    {\n        return\n            // The task must be suspended but not terminated.\n            //\n            ((state & (kInitialized | kStarted | kSuspended | kTerminated)) ==\n             (kInitialized | kStarted | kSuspended))\n\n            && (  // *Either* task is not waiting for a signal...\n                  //\n                   (state & (kNeedSignal | kHaveSignal)) == 0 ||\n\n                   // ...*Or* task was waiting for a signal, and it received one.\n                   //\n                   (state & (kNeedSignal | kHaveSignal)) == (kNeedSignal | kHaveSignal)  //\n\n                   )\n\n            // The stack trace flag is not set.\n            //\n            && ((state & kStackTrace) == 0);\n    }\n\n    static constexpr bool is_terminal_state(state_type state)\n    {\n        return (state & (kInitialized | kStarted | kSuspended | kTerminated)) ==\n               (kInitialized | kStarted | kSuspended | kTerminated);\n    }\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    struct DebugTrace {\n        boost::stacktrace::stacktrace stack_trace;\n        std::string debug_info;\n        StateBitset state_bits;\n        isize stack_growth_bytes;\n    };\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    static ConcurrentTaskList& all_tasks();\n\n    static Task& current();\n\n    template <typename... CtorArgs>\n    static void spawn(CtorArgs&&... args)\n    {\n        Task* parent = Task::current_ptr();\n        if (parent == nullptr) {\n            Task::spawn_impl(Task::all_tasks(), BATT_FORWARD(args)...);\n        } else {\n            Task::spawn_impl(parent->child_tasks_, BATT_FORWARD(args)...);\n        }\n    }\n\n    static std::string_view current_name()\n    {\n        auto ptr = Task::current_ptr();\n        if (ptr) {\n            return ptr->name();\n        }\n        return \"\";\n    }\n\n    static i32 current_id()\n    {\n        auto ptr = Task::current_ptr();\n        if (ptr) {\n            return ptr->id();\n        }\n        thread_local const i32 id_ = Task::next_id();\n        return id_;\n    }\n\n    static Optional<usize> current_stack_pos();\n\n    static Optional<usize> current_stack_pos_of(const volatile void* ptr);\n\n    static i32 backtrace_all(bool force, std::ostream& out = std::cerr);\n\n    static void yield();\n\n    template <typename Duration = boost::posix_time::ptime>\n    static ErrorCode sleep(const Duration& duration)\n    {\n        Task* current_task = Task::current_ptr();\n        if (current_task) {\n            return current_task->sleep_impl(duration);\n        }\n\n        std::this_thread::sleep_for(std::chrono::nanoseconds(duration.total_nanoseconds()));\n        return ErrorCode{};\n    }\n\n    template <typename R, typename Fn>\n    static R await(Fn&& fn)\n    {\n        // If there is a Task active on the current thread, use the Task impl of await.\n        //\n        Task* current_task = Task::current_ptr();\n        if (current_task) {\n            return current_task->template await_impl<R>(BATT_FORWARD(fn));\n        }\n\n        //---------------\n        // This is the generic thread (non-Task) implementation:\n        //\n        HandlerMemory<kHandlerMemoryBytes> handler_memory;\n        std::promise<R> prom;\n        std::atomic<bool> ok_to_exit{false};\n        BATT_FORWARD(fn)\n        (make_custom_alloc_handler(handler_memory, [&prom, &ok_to_exit](auto&&... args) {\n            prom.set_value(R{BATT_FORWARD(args)...});\n            ok_to_exit.store(true);\n        }));\n\n        auto wait_for_promise = batt::finally([&] {\n            while (!ok_to_exit.load()) {\n                std::this_thread::yield();\n            }\n        });\n\n        // TODO [tastolfi 2020-12-01] - detect deadlock here\n\n        return prom.get_future().get();\n    }\n\n    // TODO [tastolfi 2021-12-22] - Implement await_with_timeout\n\n    template <typename R, typename Fn>\n    static R await(batt::StaticType<R>, Fn&& fn)\n    {\n        return Task::await<R>(BATT_FORWARD(fn));\n    }\n\n    template <typename T>\n    static StatusOr<T> await(const Future<T>& future_result)\n    {\n        return Task::await<StatusOr<T>>([&](auto&& handler) {\n            future_result.async_wait(BATT_FORWARD(handler));\n        });\n    }\n\n    template <typename AsyncStream, typename BufferSequence>\n    static IOResult<usize> await_read_some(AsyncStream& s, BufferSequence&& buffers)\n    {\n        return Task::await<IOResult<usize>>([&](auto&& handler) {\n            s.async_read_some(BATT_FORWARD(buffers), BATT_FORWARD(handler));\n        });\n    }\n\n    template <typename AsyncStream, typename BufferSequence>\n    static IOResult<usize> await_read(AsyncStream& s, BufferSequence&& buffers)\n    {\n        return Task::await<IOResult<usize>>([&](auto&& handler) {\n            boost::asio::async_read(s, BATT_FORWARD(buffers), BATT_FORWARD(handler));\n        });\n    }\n\n    template <typename AsyncStream, typename BufferSequence>\n    static IOResult<usize> await_write_some(AsyncStream& s, BufferSequence&& buffers)\n    {\n        return Task::await<IOResult<usize>>([&](auto&& handler) {\n            s.async_write_some(BATT_FORWARD(buffers), BATT_FORWARD(handler));\n        });\n    }\n\n    template <typename AsyncStream, typename BufferSequence>\n    static IOResult<usize> await_write(AsyncStream& s, BufferSequence&& buffers)\n    {\n        return Task::await<IOResult<usize>>([&](auto&& handler) {\n            boost::asio::async_write(s, BATT_FORWARD(buffers), BATT_FORWARD(handler));\n        });\n    }\n\n    template <typename AsyncStream, typename Endpoint>\n    static ErrorCode await_connect(AsyncStream& s, const Endpoint& endpoint)\n    {\n        return Task::await<ErrorCode>([&](auto&& handler) {\n            s.async_connect(BATT_FORWARD(endpoint), BATT_FORWARD(handler));\n        });\n    }\n\n    template <typename AsyncAcceptor,                                      //\n              typename ProtocolT = typename AsyncAcceptor::protocol_type,  //\n              typename StreamT = typename ProtocolT::socket>\n    static IOResult<StreamT> await_accept(AsyncAcceptor& a)\n    {\n        return Task::await<IOResult<StreamT>>([&](auto&& handler) {\n            a.async_accept(BATT_FORWARD(handler));\n        });\n    }\n\n    template <typename SignalSetT>\n    static IOResult<int> await_signal(SignalSetT& signal_set)\n    {\n        return Task::await<IOResult<int>>([&signal_set](auto&& handler) {\n            signal_set.async_wait(BATT_FORWARD(handler));\n        });\n    }\n\n    static Priority current_priority()\n    {\n        Task* current_task = Task::current_ptr();\n        if (current_task == nullptr) {\n            return Priority{0};\n        }\n        return current_task->get_priority();\n    }\n\n    static bool& inside_work_fn()\n    {\n        auto ptr = Task::current_ptr();\n        if (ptr) {\n            return ptr->is_inside_work_fn_;\n        }\n\n        thread_local bool b_ = false;\n        return b_;\n    }\n\n    static std::atomic<i64>& create_count()\n    {\n        static std::atomic<i64> count_{0};\n        return count_;\n    }\n\n    static std::atomic<i64>& destroy_count()\n    {\n        static std::atomic<i64> count_{0};\n        return count_;\n    }\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    Task(const Task&) = delete;\n\n    Task& operator=(const Task&) = delete;\n\n    template <typename BodyFn = void()>\n    explicit Task(const boost::asio::any_io_executor& ex, StackSize stack_size, BodyFn&& body_fn) noexcept\n        : Task{ex, BATT_FORWARD(body_fn), /*name=*/default_name(), stack_size}\n    {\n    }\n\n    template <typename BodyFn = void(), typename... Args, typename = EnableIfNoShadow<Options, Args...>>\n    explicit Task(const boost::asio::any_io_executor& ex, BodyFn&& body_fn, Args&&... args) noexcept\n        : Task{Task::all_tasks(), ex, BATT_FORWARD(body_fn), BATT_FORWARD(args)...}\n    {\n    }\n\n    template <typename BodyFn = void()>\n    explicit Task(const boost::asio::any_io_executor& ex, BodyFn&& body_fn) noexcept\n        : Task{Task::all_tasks(), ex, BATT_FORWARD(body_fn), Options{}}\n    {\n    }\n\n    template <typename BodyFn = void(), typename... Args, typename = EnableIfNoShadow<Options, Args...>>\n    explicit Task(ConcurrentTaskList& parent_task_list, const boost::asio::any_io_executor& ex,\n                  BodyFn&& body_fn, Args&&... args) noexcept\n        : Task{parent_task_list, ex, BATT_FORWARD(body_fn), Options::from_args(BATT_FORWARD(args)...)}\n    {\n    }\n\n    template <typename BodyFn = void()>\n    explicit Task(ConcurrentTaskList& parent_task_list, const boost::asio::any_io_executor& ex,\n                  BodyFn&& body_fn) noexcept\n        : Task{parent_task_list, ex, BATT_FORWARD(body_fn), Options::from_args()}\n    {\n    }\n\n    template <typename BodyFn = void(), typename OptionsT,\n              typename = std::enable_if_t<std::is_same_v<std::decay_t<OptionsT>, Options>>>\n    explicit Task(ConcurrentTaskList& parent_task_list, const boost::asio::any_io_executor& ex,\n                  BodyFn&& body_fn, OptionsT&& options) noexcept\n        : name_(std::move(options).get_name())\n        , ex_(ex)\n        , priority_{options.get_priority()}\n        , parent_task_list_{parent_task_list}\n    {\n        // Initialize the task stack and run pre-body fn setup in the task context.  `pre_body_fn_entry` will\n        // switch back to this context because kHaveSignal is set but kSignal is not.\n        //\n        this->self_ = callcc(  //\n            options.get_stack_size(), options.get_stack_type(),\n            [body_fn = ::batt::make_optional(BATT_FORWARD(body_fn)), this](Continuation&& parent) mutable {\n                auto work_guard = boost::asio::make_work_guard(this->ex_);\n\n                this->pre_body_fn_entry(std::move(parent));\n\n                try {\n                    (*body_fn)();\n                } catch (...) {\n                    BATT_LOG_WARNING() << \"task fn exited via unhandled exception [task='\" << this->name_\n                                       << \"']: \" << boost::current_exception_diagnostic_information();\n                }\n                body_fn = None;\n\n                return this->post_body_fn_exit();\n            });\n\n        // Add this task to the parent list.  If this is a top-level task (no parent), then `parent_task_list`\n        // will be Task::all_tasks().\n        //\n        this->parent_task_list_.push_back(*this);\n\n        // Set the initalized state bit, for sanity checking.\n        //\n        this->state_.fetch_or(kInitialized);\n\n        // Unless defer start is true, start the task now (by setting the kStarted and kSignal bits to put the\n        // task into a runnable state).\n        //\n        if (!options.get_defer_start()) {\n            this->start();\n        }\n\n        // Track task creation/destruction (for diagnostics).\n        //\n        Task::create_count().fetch_add(1);\n    }\n\n    ~Task() noexcept;\n\n    bool is_started() const\n    {\n        return Task::is_started_state(this->state_.load());\n    }\n\n    void start()\n    {\n        // Even if kStarted is already set, this is harmless.\n        //\n        const state_type prior_state = this->state_.fetch_or(kStarted);\n\n        // If somehow we got here without having set the kInitialized bit, something has gone very wrong...\n        //\n        BATT_CHECK(Task::is_post_init_state(prior_state))\n            << \"Task started before being fully initialized!\" << BATT_INSPECT(this->name())\n            << BATT_INSPECT(this->id());\n\n        // This should only trigger once.\n        //\n        if (Task::is_pre_start_state(prior_state)) {\n            this->handle_event(kSuspended | kHaveSignal);\n        }\n    }\n\n    i32 id() const\n    {\n        return this->id_;\n    }\n\n    std::string_view name() const\n    {\n        return this->name_;\n    }\n\n    Priority get_priority() const\n    {\n        return Priority{this->priority_.load()};\n    }\n\n    void set_priority(Priority new_priority)\n    {\n        this->priority_.store(new_priority);\n    }\n\n    usize stack_pos() const;\n\n    usize stack_pos_of(const volatile void* ptr) const;\n\n    void join();\n\n    IsDone try_join();\n\n    bool wake();\n\n    executor_type get_executor() const\n    {\n        return this->ex_;\n    }\n\n    IsDone is_done() const;\n\n    template <typename F = void()>\n    void call_when_done(F&& handler)\n    {\n        for (;;) {\n            if (this->is_done()) {\n                this->wait_for_run_completion_handlers();\n                BATT_FORWARD(handler)();\n                return;\n            }\n\n            SpinLockGuard lock{this, kCompletionHandlersLock};\n            if (Task::is_terminal_state(lock.prior_state()) ||\n                (lock.prior_state() & kCompletionHandlersClosed) != 0) {\n                // It's possible that the completion handlers list was cleared out after the call to\n                // `is_done()` above, but before we grab the spin lock.  If so, keep retrying until we resolve\n                // the race.\n                //\n                continue;\n            }\n            push_handler(&this->completion_handlers_, BATT_FORWARD(handler));\n            return;\n        }\n    }\n\n    // =#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\n    DebugInfoFrame* debug_info = nullptr;\n\n    // =#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\n   private:\n    //=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n    //\n    class SpinLockGuard\n    {\n       public:\n        explicit SpinLockGuard(Task* task, state_type mask) noexcept : task_{task}, mask_{mask}\n        {\n            this->prior_state_ = task_->spin_lock(mask);\n        }\n\n        SpinLockGuard(const SpinLockGuard&) = delete;\n        SpinLockGuard& operator=(const SpinLockGuard&) = delete;\n\n        ~SpinLockGuard() noexcept\n        {\n            task_->spin_unlock(mask_);\n        }\n\n        state_type prior_state() const\n        {\n            return this->prior_state_;\n        }\n\n       private:\n        Task* const task_;\n        const state_type mask_;\n        state_type prior_state_;\n    };\n\n    class Trampoline\n    {\n       public:\n        static void activate_task(Task* t);\n\n        static Task* get_current_task();\n\n       private:\n        static Trampoline& per_thread_instance();\n\n        Task* next_to_run_ = nullptr;\n        Task* current_task_ = nullptr;\n    };\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    static i32 next_id();\n\n    static Task* current_ptr();\n\n    template <typename... TaskCtorArgs>\n    static void spawn_impl(ConcurrentTaskList& parent_task_list, TaskCtorArgs&&... task_ctor_args)\n    {\n        Task* const child = new Task{parent_task_list, BATT_FORWARD(task_ctor_args)...};\n\n        child->call_when_done([child] {\n            delete child;\n        });\n    }\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    // Invoked in the task's context prior to entering the task function; yields control back to the parent\n    // context, ensuring that the task function is invoked via the executor.\n    //\n    void pre_body_fn_entry(Continuation&& parent) noexcept;\n\n    // Invoked in the task's context after the task function returns.\n    //\n    Continuation post_body_fn_exit() noexcept;\n\n    // Suspend the task, resuming the parent context.\n    //\n    void yield_impl();\n\n    // Set the timer to expire after the given duration, suspending the task in a manner identical to\n    // `await_impl`.\n    //\n    ErrorCode sleep_impl(const boost::posix_time::time_duration& duration);\n\n    // Clears state flags kSuspended|kNeedSignal|kHaveSignal and resumes the task via its executor.  If\n    // `force_post` is true, the resume is always scheduled via boost::asio::post.  Otherwise, if\n    // Task::nesting_depth() is below the limit, boost::asio::dispatch is used instead.  `observed_state` is\n    // the last observed value of `Task::state_`.\n    //\n    void schedule_to_run(state_type observed_state, bool force_post = false);\n\n    // Resumes execution of the task on the current thread; this is the normal code path, when the task\n    // receives a signal or is ready to run.  Stack traces collected on the task do not use this method;\n    // rather they directly call resume_impl after atomically setting the kStackTrace bit (conditional on the\n    // thread *not* being in a running, ready-to-run, or terminal state).\n    //\n    IsDone run();\n\n    // Switch the current thread context to the task and resume execution.\n    //\n    void resume_impl();\n\n    // `fn` is passed a callable acting as the continutation of the suspended Task.  This continuation may\n    // receive any set of arguments from which the await operation's result type `R` can be constructed.\n    //\n    template <typename R, typename Fn>\n    R await_impl(Fn&& fn)\n    {\n        Optional<R> result;\n\n        HandlerMemory<kHandlerMemoryBytes> handler_memory;\n\n        const state_type prior_state = this->state_.fetch_or(kNeedSignal);\n        BATT_CHECK_NE((prior_state & kHaveSignal), kHaveSignal) << \"prior_state=\" << StateBitset{prior_state};\n\n        BATT_FORWARD(fn)\n        (/*callback handler=*/make_custom_alloc_handler(\n            handler_memory,\n            [this,\n             &result](auto&&... args) -> std::enable_if_t<std::is_constructible_v<R, decltype(args)&&...>> {\n                result.emplace(BATT_FORWARD(args)...);\n\n                this->handle_event(kHaveSignal);\n            }));\n\n        // Suspend this Task.  It will not be in a ready state until the kHaveSignal event has been handled.\n        //\n        this->yield_impl();\n\n        return std::move(*result);\n    }\n\n    // Tells the task to handle events which may affect its running/suspended state.  This function is safe to\n    // invoke inside the task or outside.  `event_mask` *must* be one of:\n    //\n    // - kHaveSignal\n    // - kSuspended\n    // - kTerminated\n    //\n    void handle_event(state_type event_mask);\n\n    // Acquire a spin lock on the given state bit mask.  `lock_mask` must be one of:\n    //\n    // - kSleepTimerLock\n    // - kCompletionHandlersLock\n    //\n    // Locks acquired via this function are not recursive.\n    //\n    state_type spin_lock(state_type lock_mask);\n\n    // Same as `spin_lock`, except only try once to acquire the lock.  Returns `true` iff the lock was\n    // acquired. Sets `prior_state` equal to the last observed value of `state_`.\n    //\n    bool try_spin_lock(state_type lock_mask, state_type& prior_state);\n\n    // Release the given spin lock bit.  `lock_mask` must be a legal value passed to\n    // `spin_lock`/`try_spin_lock`, and the calling thread must currently hold a lock on the given bit\n    // (acquired via `spin_lock`/`try_spin_lock`).\n    //\n    void spin_unlock(state_type lock_mask);\n\n    // Attempt to collect a stack trace from the task, dumping it to stderr if successful.  This will fail if\n    // the task is running, ready-to-run, or terminated.  Returns true iff successful.\n    //\n    bool try_dump_stack_trace(bool force, std::ostream& out = std::cerr);\n\n    // Activate this task via boost::asio::post.\n    //\n    void activate_via_post();\n\n    // Activate this task via boost::asio::dispatch.\n    //\n    void activate_via_dispatch();\n\n    // Create an activation completion handler for use inside `activate_via_post`, `activate_via_dispatch`,\n    // etc.\n    //\n    auto make_activation_handler(bool via_post);\n\n    // Joins to all child tasks.\n    //\n    void join_child_tasks();\n\n    // Unconditionally removes completion handlers from `this` and runs them on the current thread/task.\n    //\n    void run_completion_handlers();\n\n    // Waits for run_completion_handlers to run; must only be called *after* this->is_done() returns true.\n    //\n    void wait_for_run_completion_handlers();\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    // Process-unique serial id number for this Task; automatically assigned at construction time.\n    //\n    const i32 id_ = next_id();\n\n    // Human-readable (non-unique) name for this Task; passed in at construction time.\n    //\n    const std::string name_;\n\n    // The (Boost.Async) Executor used to activate/schedule this task.\n    //\n    executor_type ex_;\n\n    // The most recent context from which this Task was activated/scheduled.  If this is non-empty, then the\n    // task is active/running.  At most one of `scheduler_` and `self_` are non-empty at any given time.\n    //\n    Continuation scheduler_;\n\n    // The current (suspended) context of this Task.  If this is non-copy, then the task is suspended/waiting.\n    // At most one of `scheduler_` and `self_` are non-empty at any given time.\n    //\n    Continuation self_;\n\n    // Contains all spin lock bits and run-state information for this task.  Initially set to `kNeedSignal`\n    // because the task must receive the \"go\" signal before it can enter normal operation.\n    //\n    std::atomic<state_type> state_{kNeedSignal};\n\n    // The current advisory priority for this task.  Higher numeric values signify more urgent priority.\n    //\n    std::atomic<Priority::value_type> priority_;\n\n    // Used to implement this->sleep().\n    //\n    Optional<boost::asio::deadline_timer> sleep_timer_;\n\n    // When a stack trace is gathered from a task, we must temporarily swap its context in, then capture the\n    // stack, then swap back; this member stores the stack trace.  TODO [tastolfi 2023-02-21] there could be a\n    // race condition on this field if two threads attempt to capture a stack trace on the same task\n    // concurrently!\n    //\n    Optional<boost::stacktrace::stacktrace> stack_trace_;\n\n    // A linked list of handlers that are waiting for notification when this task finishes/joins.\n    //\n    HandlerList<> completion_handlers_;\n\n    // A handler-attached memory buffer used whenever this task is scheduled via dispatch or post;\n    // conceptually, this memory is used to store linked-list pointers for the task on some scheduler queue.\n    //\n    HandlerMemory<kHandlerMemoryBytes> activate_memory_;\n\n    // Set to an address near the base of the stack when the task begins running; used to estimate the current\n    // stack growth.\n    //\n    const volatile u8* stack_base_ = nullptr;\n\n    // Set to true when this task performs some action that causes a task with higher priority to move into a\n    // ready state; this causes the current task to be rescheduled via `post()` so that the higher priority\n    // task can be scheduled immediately, possibly on the same thread, via `dispatch()`.\n    //\n    bool is_preempted_ = false;\n\n    // Used to prevent deadlock in WorkerPools.\n    //\n    bool is_inside_work_fn_ = false;\n\n    // Monotonic counter, incremented whenever this task is suspended.\n    //\n    volatile usize suspend_count_ = 0;\n\n    // Monotonic counter, incremented whenever this task is resumed.\n    //\n    volatile usize resume_count_ = 0;\n\n    // A list of spawned tasks; will be joined when this terminates.\n    //\n    ConcurrentTaskList child_tasks_;\n\n    // The list to which this task was added at creation time.\n    //\n    ConcurrentTaskList& parent_task_list_;\n};\n\n//#=##=##=#==#=#==#===#+==#+==========+==+=+=+=+=+=++=+++=+++++=-++++=-+++++++++++\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename Fn, typename R>\nR Task::ConcurrentTaskList::with_lock(Fn&& fn)\n{\n    std::unique_lock<std::mutex> lock{this->mutex_};\n    return BATT_FORWARD(fn)(this->task_list_);\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_TASK_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "boost::intrusive::list_base_hook< boost::intrusive::link_mode< boost::intrusive::auto_unlink > >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "brief": "A user-space cooperatively scheduled thread of control. ",
      "category": "classes",
      "fullname": "batt::Task",
      "kind": "class",
      "language": "cpp",
      "name": "batt::Task",
      "refid": "classbatt_1_1Task",
      "summary": "A user-space cooperatively scheduled thread of control. ",
      "title": "batt::Task",
      "url": "/_autogen/Classes/classbatt_1_1Task/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "Thread-safe list of tasks. ",
      "category": "classes",
      "fullname": "batt::Task::ConcurrentTaskList",
      "kind": "class",
      "language": "cpp",
      "name": "batt::Task::ConcurrentTaskList",
      "refid": "classbatt_1_1Task_1_1ConcurrentTaskList",
      "summary": "Thread-safe list of tasks. ",
      "title": "batt::Task::ConcurrentTaskList",
      "url": "/_autogen/Classes/classbatt_1_1Task_1_1ConcurrentTaskList/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "[Optional]() params for [Task](/_autogen/Classes/classbatt_1_1Task/) creation. ",
      "category": "classes",
      "fullname": "batt::Task::Options",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::Task::Options",
      "refid": "structbatt_1_1Task_1_1Options",
      "summary": "Optional params for Task creation. ",
      "title": "batt::Task::Options",
      "url": "/_autogen/Classes/structbatt_1_1Task_1_1Options/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "Stack trace and debug information collected from a [Task](/_autogen/Classes/classbatt_1_1Task/). ",
      "category": "classes",
      "fullname": "batt::Task::DebugTrace",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::Task::DebugTrace",
      "refid": "structbatt_1_1Task_1_1DebugTrace",
      "summary": "Stack trace and debug information collected from a Task. ",
      "title": "batt::Task::DebugTrace",
      "url": "/_autogen/Classes/structbatt_1_1Task_1_1DebugTrace/",
      "visibility": "public"
    }
  ],
  "refid": "task__decl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/task_decl.hpp",
  "url": "/_autogen/Files/task__decl_8hpp/#file-task-decl.hpp",
  "visibility": "public"
}