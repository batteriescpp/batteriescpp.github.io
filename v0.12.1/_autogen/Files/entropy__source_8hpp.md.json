{
  "abstract": false,
  "anchor": "#file-entropy-source.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-state-machine-model-entropy-source-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_STATE_MACHINE_MODEL_ENTROPY_SOURCE_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/state_machine_model/entropy_source.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/state_machine_model/entropy_source.hpp",
        "line": 6
      },
      "name": "BATTERIES_STATE_MACHINE_MODEL_ENTROPY_SOURCE_HPP",
      "override": false,
      "refid": "entropy__source_8hpp_1afc01a453d0d3e4a351195ead75dc8de2",
      "static": false,
      "strong": false,
      "title": "BATTERIES_STATE_MACHINE_MODEL_ENTROPY_SOURCE_HPP",
      "url": "/_autogen/Files/entropy__source_8hpp/#define-batteries-state-machine-model-entropy-source-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/state_machine_model/entropy_source.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/state_machine_model/entropy_source.hpp",
    "line": 0
  },
  "name": "batteries/state_machine_model/entropy_source.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/state-machine-model",
    "category": "dirs",
    "fullname": "batteries/state_machine_model",
    "kind": "dir",
    "language": "",
    "name": "batteries/state_machine_model",
    "refid": "dir_a632bc4ac9c412aedbec832ef7391aeb",
    "title": "batteries/state_machine_model",
    "url": "/_autogen/Files/dir_a632bc4ac9c412aedbec832ef7391aeb/#dir-batteries/state-machine-model",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/state-machine-model",
      "category": "dirs",
      "fullname": "batteries/state_machine_model",
      "kind": "dir",
      "language": "",
      "name": "batteries/state_machine_model",
      "refid": "dir_a632bc4ac9c412aedbec832ef7391aeb",
      "title": "batteries/state_machine_model",
      "url": "/_autogen/Files/dir_a632bc4ac9c412aedbec832ef7391aeb/#dir-batteries/state-machine-model",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_STATE_MACHINE_MODEL_ENTROPY_SOURCE_HPP\n#define BATTERIES_STATE_MACHINE_MODEL_ENTROPY_SOURCE_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/fake_executor.hpp>\n#include <batteries/async/handler.hpp>\n\n#include <batteries/int_types.hpp>\n#include <batteries/static_dispatch.hpp>\n#include <batteries/utility.hpp>\n\n#include <functional>\n#include <initializer_list>\n#include <tuple>\n#include <utility>\n\nnamespace batt {\n\n// Forward-declaration.\n//\ntemplate <typename Fn>\nclass BasicStateMachineEntropySource;\n\n// A type-erased entropy source.\n//\nusing StateMachineEntropySource =\n    BasicStateMachineEntropySource<std::function<usize(usize min_value, usize max_value)>>;\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\ntemplate <typename Fn>\nclass BasicStateMachineEntropySource\n{\n   public:\n    using PickIntFn = Fn;\n\n    // Allow default construction if `Fn` permits.\n    //\n    BasicStateMachineEntropySource() = default;\n\n    // Constructs a new entropy source from the given `pick_int` function.\n    //\n    explicit BasicStateMachineEntropySource(PickIntFn&& pick_int_fn) noexcept\n        : pick_int_{BATT_FORWARD(pick_int_fn)}\n    {\n    }\n\n    // Returns an integer `i` non-deterministically, such that `i >= min_value && i <= max_value`.\n    //\n    usize pick_int(usize min_value, usize max_value) const\n    {\n        return this->pick_int_(min_value, max_value);\n    }\n\n    // Returns false or true.\n    //\n    bool pick_branch() const\n    {\n        return this->pick_int(0, 1) == 0;\n    }\n\n    // Returns one of the items in `values`, using `pick_int`.\n    //\n    template <typename T>\n    T pick_one_of(std::initializer_list<T> values) const\n    {\n        const usize index = this->pick_int(0, values.size() - 1);\n        return *(values.begin() + index);\n    }\n\n    // If there is at least one runnable completion handler in `context`, one such handler is selected (via\n    // `pick_int`) and invoked, and this function returns true.  Else false is returned.\n    //\n    bool run_one(FakeExecutionContext& context) const\n    {\n        UniqueHandler<> handler = context.pop_ready_handler([this](usize count) {\n            return this->pick_int(0, count - 1);\n        });\n        if (!handler) {\n            return false;\n        }\n        handler();\n        return true;\n    }\n\n    // Performs one of the passed action functions.  Each `Fn` in `actions...` must be callable with no\n    // arguments and its return type must be ignorable.\n    //\n    template <typename... ActionFn>\n    void do_one_of(ActionFn&&... actions) const\n    {\n        auto actions_tuple = std::forward_as_tuple(BATT_FORWARD(actions)...);\n\n        static_dispatch<usize, 0, sizeof...(ActionFn)>(\n            this->pick_int(0, sizeof...(ActionFn) - 1), [&](auto kI) {\n                std::get<decltype(kI)::value>(std::move(actions_tuple))();\n            });\n    }\n\n   private:\n    PickIntFn pick_int_;\n};\n\n}  // namespace batt\n\n#endif  // BATTERIES_STATE_MACHINE_MODEL_ENTROPY_SOURCE_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::BasicStateMachineEntropySource",
      "kind": "class",
      "language": "cpp",
      "name": "batt::BasicStateMachineEntropySource",
      "refid": "classbatt_1_1BasicStateMachineEntropySource",
      "title": "batt::BasicStateMachineEntropySource",
      "url": "/_autogen/Classes/classbatt_1_1BasicStateMachineEntropySource/",
      "visibility": "public"
    }
  ],
  "refid": "entropy__source_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/state_machine_model/entropy_source.hpp",
  "url": "/_autogen/Files/entropy__source_8hpp/#file-entropy-source.hpp",
  "visibility": "public"
}