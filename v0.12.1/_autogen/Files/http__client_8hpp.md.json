{
  "abstract": false,
  "anchor": "#file-http-client.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-http-client-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_HTTP_CLIENT_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/http/http_client.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/http/http_client.hpp",
        "line": 6
      },
      "name": "BATTERIES_HTTP_CLIENT_HPP",
      "override": false,
      "refid": "http__client_8hpp_1ad708a98c3befc204c85926d79bcd78ed",
      "static": false,
      "strong": false,
      "title": "BATTERIES_HTTP_CLIENT_HPP",
      "url": "/_autogen/Files/http__client_8hpp/#define-batteries-http-client-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/http/http_client.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/http/http_client.hpp",
    "line": 0
  },
  "name": "batteries/http/http_client.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::detail",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::detail",
      "refid": "namespacebatt_1_1detail",
      "title": "batt::detail",
      "url": "/_autogen/Namespaces/namespacebatt_1_1detail/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/http",
    "category": "dirs",
    "fullname": "batteries/http",
    "kind": "dir",
    "language": "",
    "name": "batteries/http",
    "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
    "title": "batteries/http",
    "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/http",
      "category": "dirs",
      "fullname": "batteries/http",
      "kind": "dir",
      "language": "",
      "name": "batteries/http",
      "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
      "title": "batteries/http",
      "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_HTTP_CLIENT_HPP\n#define BATTERIES_HTTP_CLIENT_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/http/host_address.hpp>\n#include <batteries/http/http_client_connection_decl.hpp>\n#include <batteries/http/http_client_host_context_decl.hpp>\n#include <batteries/http/http_data.hpp>\n#include <batteries/http/http_header.hpp>\n#include <batteries/http/http_request.hpp>\n#include <batteries/http/http_response.hpp>\n#include <batteries/http/http_version.hpp>\n\n#include <batteries/pico_http/parser.hpp>\n\n#include <batteries/async/mutex.hpp>\n#include <batteries/async/queue.hpp>\n#include <batteries/async/stream_buffer.hpp>\n#include <batteries/async/task.hpp>\n\n#include <batteries/case_of.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/small_fn.hpp>\n#include <batteries/status.hpp>\n#include <batteries/url_parse.hpp>\n\n#include <boost/asio/executor_work_guard.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/functional/hash.hpp>\n\n#include <unordered_map>\n\nnamespace batt {\n\nclass HttpClient\n{\n   public:\n    static constexpr usize kDefaultMaxConnectionsPerHost = HttpClientHostContext::kDefaultMaxConnections;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    explicit HttpClient(boost::asio::io_context& io) noexcept : io_{io}\n    {\n    }\n\n    boost::asio::io_context& get_io_context() const noexcept\n    {\n        return this->io_;\n    }\n\n    Status submit_request(const HostAddress& host_address, Pin<HttpRequest>&& request,\n                          Pin<HttpResponse>&& response);\n\n   private:\n    boost::asio::io_context& io_;\n\n    Mutex<std::unordered_map<HostAddress, SharedPtr<HttpClientHostContext>, boost::hash<HostAddress>>>\n        host_contexts_;\n};\n\nclass DefaultHttpClient\n{\n   public:\n    static HttpClient& get()\n    {\n        static DefaultHttpClient* default_client_ = new DefaultHttpClient;\n        //\n        // This object is intentionally leaked!\n\n        return default_client_->client_;\n    }\n\n   private:\n    boost::asio::io_context io_;\n\n    Optional<boost::asio::executor_work_guard<boost::asio::io_context::executor_type>> work_guard_{\n        this->io_.get_executor()};\n\n    HttpClient client_{this->io_};\n\n    std::thread io_thread_{[this] {\n        this->io_.run();\n    }};\n};\n\nnamespace detail {\n\nclass HttpClientRequestContext\n{\n   public:\n    explicit HttpClientRequestContext()\n    {\n        this->set_version(HttpVersion{1, 1}).IgnoreError();\n\n        this->request_.async_set_message(this->message_);\n        this->request_.async_set_data(this->data_);\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    Status set_params()\n    {\n        return OkStatus();\n    }\n\n    template <typename... Rest>\n    Status set_params(const HttpHeader& hdr, Rest&&... rest)\n    {\n        this->set_header(hdr);\n        this->message_.headers.push_back(hdr);\n        return this->set_params(BATT_FORWARD(rest)...);\n    }\n\n    template <typename... Rest>\n    Status set_params(HttpData&& data, Rest&&... rest)\n    {\n        this->set_data(std::move(data));\n        return this->set_params(BATT_FORWARD(rest)...);\n    }\n\n    template <typename... Rest>\n    Status set_params(HttpClient& client, Rest&&... rest)\n    {\n        this->client_ = &client;\n        return this->set_params(BATT_FORWARD(rest)...);\n    }\n\n    template <typename... Rest>\n    Status set_params(HttpResponse* response, Rest&&... rest)\n    {\n        BATT_CHECK_NOT_NULLPTR(response);\n        this->set_response_object(response);\n        return this->set_params(BATT_FORWARD(rest)...);\n    }\n\n    template <typename... Rest>\n    Status set_params(const HttpVersion& version, Rest&&... rest)\n    {\n        Status result = this->set_version(version);\n        BATT_REQUIRE_OK(result);\n        return this->set_params(BATT_FORWARD(rest)...);\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    Status set_version(const HttpVersion& version)\n    {\n        this->message_.major_version = version.major_version;\n        this->message_.minor_version = version.minor_version;\n\n        return OkStatus();\n    }\n\n    Status set_method(std::string_view method)\n    {\n        this->message_.method = method;\n        return OkStatus();\n    }\n\n    Status set_path(std::string_view path)\n    {\n        this->message_.path = path;\n        return OkStatus();\n    }\n\n    Status set_url(const UrlParse& url)\n    {\n        this->host_address_.scheme = url.scheme;\n        this->host_address_.hostname = url.host;\n        this->host_address_.port = url.port;\n\n        usize needed = url.path.size();\n        if (!url.query.empty()) {\n            needed += 1 + url.query.size();\n        }\n        if (!url.fragment.empty()) {\n            needed += 1 + url.fragment.size();\n        }\n        this->path_.reserve(needed);\n\n        this->path_ = url.path;\n        if (!url.query.empty()) {\n            this->path_ += \"?\";\n            this->path_ += url.query;\n        }\n        if (!url.fragment.empty()) {\n            this->path_ += \"#\";\n            this->path_ += url.fragment;\n        }\n\n        this->message_.path = this->path_;\n\n        return OkStatus();\n    }\n\n    void set_header(const HttpHeader& hdr)\n    {\n        this->message_.headers.push_back(hdr);\n    }\n\n    void set_data(HttpData&& data)\n    {\n        this->data_ = std::move(data);\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    HttpResponse* get_response_object() const noexcept\n    {\n        return this->response_;\n    }\n\n    void set_response_object(HttpResponse* response) noexcept\n    {\n        this->response_ = response;\n    }\n\n    const HttpRequest* get_request_object() const noexcept\n    {\n        return &this->request_;\n    }\n\n    HttpRequest* get_request_object() noexcept\n    {\n        return &this->request_;\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    Status submit()\n    {\n        BATT_CHECK_NOT_NULLPTR(this->client_);\n        BATT_CHECK_NOT_NULLPTR(this->response_);\n\n        // TODO [tastolfi 2022-03-29] Check headers and adjust `this->data_` accordingly.\n\n        this->request_.state().set_value(HttpRequest::kInitialized);\n        return this->client_->submit_request(this->host_address_, make_pin(&this->request_),\n                                             make_pin(this->response_));\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n   private:\n    HttpClient* client_ = &DefaultHttpClient::get();\n    std::string path_;\n    std::string content_length_;\n    HostAddress host_address_;\n    pico_http::Request message_;\n    HttpData data_;\n    HttpRequest request_;\n    HttpResponse* response_ = nullptr;\n\n};  // class HttpClientRequestContext\n\n}  // namespace detail\n\ntemplate <typename... Params>\nStatusOr<std::unique_ptr<HttpResponse>> http_request(std::string_view method, std::string_view url,\n                                                     Params&&... params)\n{\n    StatusOr<UrlParse> url_parse = parse_url(url);\n    BATT_REQUIRE_OK(url_parse);\n\n    // Create a request context object to hold all the things we may need to submit the request.\n    //\n    detail::HttpClientRequestContext context;\n\n    // Initialize the request from args.\n    //\n    Status method_status = context.set_method(method);\n    BATT_REQUIRE_OK(method_status);\n\n    Status path_status = context.set_url(*url_parse);\n    BATT_REQUIRE_OK(path_status);\n\n    Status params_status = context.set_params(BATT_FORWARD(params)...);\n    BATT_REQUIRE_OK(params_status);\n\n    // If the caller did not pass an HttpResponse object to receive the response, then create one to\n    // use/return.\n    //\n    std::unique_ptr<HttpResponse> new_response;\n    if (context.get_response_object() == nullptr) {\n        new_response = std::make_unique<HttpResponse>();\n        context.set_response_object(new_response.get());\n    }\n\n    // The request is now ready to go!\n    //\n    Status submitted = context.submit();\n    BATT_REQUIRE_OK(submitted);\n\n    //----- --- -- -  -  -   -\n    // Before we can return, we must make sure that the context object is not in use by the HttpClient.\n    //----- --- -- -  -  -   -\n\n    HttpRequest* const request = context.get_request_object();\n    HttpResponse* const response = context.get_response_object();\n\n    // Await notification from the HttpClient that our request has been fully consumed.\n    //\n    Status request_consumed = request->state().await_equal(HttpRequest::kConsumed);\n    if (!request_consumed.ok()) {\n        BATT_REQUIRE_OK(request->get_status());\n    }\n    BATT_REQUIRE_OK(request_consumed);\n\n    // Await notification from the HttpClient that the response has been read and parsed; this is not required\n    // for object/reference lifetime issues (like `request` above), but rather so that any errors in the\n    // response can be reported via StatusCode from this function.\n    //\n    // TODO [tastolfi 2022-05-06] Should we provide an option to skip this step?\n    //\n    Status response_received = response->state().await_equal(HttpResponse::kInitialized);\n    if (!response_received.ok()) {\n        BATT_REQUIRE_OK(response->get_status());\n    }\n    BATT_REQUIRE_OK(response_received);\n\n    // Return the response that was created on behalf of the caller, if there was one.  NOTE: if this is\n    // nullptr, that isn't an error, it just means that the caller supplied their own HttpResponse object\n    // pointer.\n    //\n    return new_response;\n}\n\ntemplate <typename... Params>\nStatusOr<std::unique_ptr<HttpResponse>> http_get(std::string_view url, Params&&... params)\n{\n    return http_request(\"GET\", url, BATT_FORWARD(params)...);\n}\n\ntemplate <typename... Params>\nStatusOr<std::unique_ptr<HttpResponse>> http_post(std::string_view url, Params&&... params)\n{\n    return http_request(\"POST\", url, BATT_FORWARD(params)...);\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_HTTP_CLIENT_HPP\n\n#if BATT_HEADER_ONLY\n#include <batteries/http/http_client_connection_impl.hpp>\n#include <batteries/http/http_client_host_context_impl.hpp>\n#include <batteries/http/http_client_impl.hpp>\n#endif  // BATT_HEADER_ONLY",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::HttpClient",
      "kind": "class",
      "language": "cpp",
      "name": "batt::HttpClient",
      "refid": "classbatt_1_1HttpClient",
      "title": "batt::HttpClient",
      "url": "/_autogen/Classes/classbatt_1_1HttpClient/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::DefaultHttpClient",
      "kind": "class",
      "language": "cpp",
      "name": "batt::DefaultHttpClient",
      "refid": "classbatt_1_1DefaultHttpClient",
      "title": "batt::DefaultHttpClient",
      "url": "/_autogen/Classes/classbatt_1_1DefaultHttpClient/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::HttpClientRequestContext",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::HttpClientRequestContext",
      "refid": "classbatt_1_1detail_1_1HttpClientRequestContext",
      "title": "batt::detail::HttpClientRequestContext",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1HttpClientRequestContext/",
      "visibility": "public"
    }
  ],
  "refid": "http__client_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/http/http_client.hpp",
  "url": "/_autogen/Files/http__client_8hpp/#file-http-client.hpp",
  "visibility": "public"
}