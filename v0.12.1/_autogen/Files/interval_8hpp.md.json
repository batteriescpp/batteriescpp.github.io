{
  "abstract": false,
  "anchor": "#file-interval.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-interval-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_INTERVAL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/interval.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/interval.hpp",
        "line": 5
      },
      "name": "BATTERIES_INTERVAL_HPP",
      "override": false,
      "refid": "interval_8hpp_1a79caf101677bcd083206a160d5b779f8",
      "static": false,
      "strong": false,
      "title": "BATTERIES_INTERVAL_HPP",
      "url": "/_autogen/Files/interval_8hpp/#define-batteries-interval-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/interval.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/interval.hpp",
    "line": 0
  },
  "name": "batteries/interval.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_INTERVAL_HPP\n#define BATTERIES_INTERVAL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/interval_traits.hpp>\n#include <batteries/seq/reverse.hpp>\n#include <batteries/small_vec.hpp>\n\n#include <cstddef>\n#include <ostream>\n\nnamespace batt {\n\ntemplate <typename T, typename U = T>\nstruct IClosedOpen\n    : IntervalTraits<T, U, InclusiveLowerBound::kTrue, InclusiveUpperBound::kFalse, seq::NaturalOrder,\n                     seq::NaturalEquals> {\n};\n\ntemplate <typename T, typename U = T>\nstruct IClosed\n    : IntervalTraits<T, U, InclusiveLowerBound::kTrue, InclusiveUpperBound::kTrue, seq::NaturalOrder,\n                     seq::NaturalEquals> {\n};\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\ntemplate <typename Traits>\nstruct BasicInterval;\n\ntemplate <typename T>\nusing Interval = BasicInterval<IClosedOpen<T>>;\n\ntemplate <typename T>\nusing CInterval = BasicInterval<IClosed<T>>;\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\ntemplate <typename Traits>\nstruct BasicInterval {\n    using traits_type = Traits;\n\n    typename Traits::lower_bound_type lower_bound;\n    typename Traits::upper_bound_type upper_bound;\n\n    auto size() const\n    {\n        return Traits::size(this->lower_bound, this->upper_bound);\n    }\n\n    bool empty() const\n    {\n        return Traits::empty(this->lower_bound, this->upper_bound);\n    }\n\n    template <typename V>\n    bool contains(const V& item) const\n    {\n        return Traits::lower_includes_x(this->lower_bound, item) &&\n               Traits::x_included_by_upper(item, this->upper_bound);\n    }\n\n    template <typename ThatTraits>\n    bool adjacent_to(const BasicInterval<ThatTraits>& that) const\n    {\n        static_assert(interval_traits_compatible<Traits, ThatTraits>(), \"\");\n\n        // The intervals are adjacent if no non-empty interval can be constructed between them.\n        //\n        return Traits::adjacent(this->lower_bound, this->upper_bound, that.lower_bound, that.upper_bound);\n    }\n\n    template <typename ThatTraits>\n    BasicInterval union_with(const BasicInterval<ThatTraits>& that) const\n    {\n        static_assert(interval_traits_compatible<Traits, ThatTraits>(), \"\");\n\n        return BasicInterval{std::min(this->lower_bound, that.lower_bound),\n                             std::max(this->upper_bound, that.upper_bound)};\n    }\n\n    template <typename ThatTraits>\n    bool overlaps(const BasicInterval<ThatTraits>& that) const\n    {\n        static_assert(interval_traits_compatible<Traits, ThatTraits>(), \"\");\n        return !Traits::empty(that.lower_bound, this->upper_bound) &&\n               !ThatTraits::empty(this->lower_bound, that.upper_bound);\n    }\n\n    template <typename ThatTraits>\n    BasicInterval intersection_with(const BasicInterval<ThatTraits>& that) const\n    {\n        static_assert(interval_traits_compatible<Traits, ThatTraits>(), \"\");\n\n        BasicInterval i{\n            .lower_bound = Traits::max(this->lower_bound, that.lower_bound),\n            .upper_bound = Traits::min(this->upper_bound, that.upper_bound),\n        };\n        if (i.empty()) {\n            return BasicInterval{this->lower_bound, this->lower_bound};\n        }\n        return i;\n    }\n\n    SmallVec<BasicInterval, 2> without(const BasicInterval& that) const\n    {\n        if (this->empty()) {\n            return {};\n        }\n\n        BasicInterval first{this->lower_bound, Traits::min(this->upper_bound, that.lower_bound)};\n        BasicInterval second{Traits::max(this->lower_bound, that.upper_bound), this->upper_bound};\n\n        if (first.adjacent_to(second)) {\n            return {*this};\n        }\n\n        SmallVec<BasicInterval, 2> diff;\n        if (!first.empty()) {\n            diff.emplace_back(first);\n        }\n        if (!second.empty()) {\n            diff.emplace_back(second);\n        }\n\n        return diff;\n    }\n\n    template <typename DiffT>\n    BasicInterval shift_up(const DiffT& d) const\n    {\n        return BasicInterval{\n            .lower_bound = this->lower_bound + d,\n            .upper_bound = this->upper_bound + d,\n        };\n    }\n\n    template <typename DiffT>\n    BasicInterval shift_down(const DiffT& d) const\n    {\n        return BasicInterval{\n            .lower_bound = this->lower_bound - d,\n            .upper_bound = this->upper_bound - d,\n        };\n    }\n\n    template <typename TraitsL, typename TraitsR>\n    friend bool operator==(const BasicInterval<TraitsL>& l, const BasicInterval<TraitsR>& r);\n\n    template <typename TraitsL, typename TraitsR>\n    friend bool operator!=(const BasicInterval<TraitsL>& l, const BasicInterval<TraitsR>& r);\n\n    template <typename TraitsT>\n    friend std::ostream& operator<<(std::ostream& out, const BasicInterval<TraitsT>& t);\n\n    struct LinearOrder {\n        template <typename TraitsL, typename TraitsR>\n        bool operator()(const BasicInterval<TraitsL>& l, const BasicInterval<TraitsR>& r) const\n        {\n            static_assert(interval_traits_compatible<TraitsL, TraitsR>(), \"\");\n            return TraitsL::empty(r.lower_bound, l.upper_bound);\n        }\n\n        template <typename L, typename TraitsR>\n        bool operator()(const L& l, const BasicInterval<TraitsR>& r) const\n        {\n            return TraitsR::x_excluded_by_lower(l, r.lower_bound);\n        }\n\n        template <typename TraitsL, typename R>\n        bool operator()(const BasicInterval<TraitsL>& l, const R& r) const\n        {\n            return TraitsL::upper_excludes_x(l.upper_bound, r);\n        }\n    };\n\n    using ReverseLinearOrder = seq::Reverse<LinearOrder>;\n\n    struct LexicographicalOrder {\n        template <typename TraitsL, typename TraitsR>\n        bool operator()(const BasicInterval<TraitsL>& l, const BasicInterval<TraitsR>& r) const\n        {\n            static_assert(interval_traits_compatible<TraitsL, TraitsR>(), \"\");\n            return TraitsL::less_than(l.lower_bound, r.lower_bound) ||\n                   (TraitsL::equal(l.lower_bound, r.lower_bound) &&\n                    TraitsL::less_than(l.upper_bound, r.upper_bound));\n        }\n    };\n\n    using ReverseLexicographicalOrder = seq::Reverse<LexicographicalOrder>;\n};\n\ntemplate <typename TraitsT, typename DeltaT>\nBasicInterval<TraitsT> push_back(const BasicInterval<TraitsT>& i, DeltaT delta)\n{\n    return {i.lower_bound, i.upper_bound + delta};\n}\n\ntemplate <typename TraitsT, typename DeltaT>\nBasicInterval<TraitsT> push_front(const BasicInterval<TraitsT>& i, DeltaT delta)\n{\n    return {i.lower_bound - delta, i.upper_bound};\n}\n\ntemplate <typename TraitsT, typename DeltaT>\nBasicInterval<TraitsT> pop_back(const BasicInterval<TraitsT>& i, DeltaT delta)\n{\n    return {i.lower_bound, i.upper_bound - delta};\n}\n\ntemplate <typename TraitsT, typename DeltaT>\nBasicInterval<TraitsT> pop_front(const BasicInterval<TraitsT>& i, DeltaT delta)\n{\n    return {i.lower_bound + delta, i.upper_bound};\n}\n\ntemplate <typename T, typename U>\nBasicInterval<IClosedOpen<std::decay_t<T>, std::decay_t<U>>> make_interval(T&& lower, U&& upper)\n{\n    return {BATT_FORWARD(lower), BATT_FORWARD(upper)};\n}\n\ntemplate <typename TraitsL, typename TraitsR>\ninline bool operator==(const BasicInterval<TraitsL>& l, const BasicInterval<TraitsR>& r)\n{\n    return interval_traits_compatible<TraitsL, TraitsR>() && TraitsL::equal(l.lower_bound, r.lower_bound) &&\n           TraitsL::equal(l.upper_bound, r.upper_bound);\n}\n\ntemplate <typename TraitsL, typename TraitsR>\ninline bool operator!=(const BasicInterval<TraitsL>& l, const BasicInterval<TraitsR>& r)\n{\n    return !(l == r);\n}\n\ntemplate <typename Traits>\ninline std::ostream& operator<<(std::ostream& out, const BasicInterval<Traits>& t)\n{\n    return out << Traits::left_bracket() << t.lower_bound << \",\" << t.upper_bound << Traits::right_bracket();\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_INTERVAL_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::IntervalTraits< T, T, InclusiveLowerBound::kTrue, InclusiveUpperBound::kFalse, seq::NaturalOrder, seq::NaturalEquals >",
          "refid": "structbatt_1_1IntervalTraits",
          "url": "/_autogen/Classes/structbatt_1_1IntervalTraits/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::IClosedOpen",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::IClosedOpen",
      "refid": "structbatt_1_1IClosedOpen",
      "title": "batt::IClosedOpen",
      "url": "/_autogen/Classes/structbatt_1_1IClosedOpen/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::IntervalTraits< T, T, InclusiveLowerBound::kTrue, InclusiveUpperBound::kTrue, seq::NaturalOrder, seq::NaturalEquals >",
          "refid": "structbatt_1_1IntervalTraits",
          "url": "/_autogen/Classes/structbatt_1_1IntervalTraits/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::IClosed",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::IClosed",
      "refid": "structbatt_1_1IClosed",
      "title": "batt::IClosed",
      "url": "/_autogen/Classes/structbatt_1_1IClosed/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "A set of totally ordered values, defined by a lower and upper bound. ",
      "category": "classes",
      "fullname": "batt::BasicInterval",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::BasicInterval",
      "refid": "structbatt_1_1BasicInterval",
      "summary": "A set of totally ordered values, defined by a lower and upper bound. ",
      "title": "batt::BasicInterval",
      "url": "/_autogen/Classes/structbatt_1_1BasicInterval/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "Partial order on Interval values that corresponds to a strict ordering on a one dimensional number line. ",
      "category": "classes",
      "fullname": "batt::BasicInterval::LinearOrder",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::BasicInterval::LinearOrder",
      "refid": "structbatt_1_1BasicInterval_1_1LinearOrder",
      "summary": "Partial order on Interval values that corresponds to a strict ordering on a one dimensional number line. ",
      "title": "batt::BasicInterval::LinearOrder",
      "url": "/_autogen/Classes/structbatt_1_1BasicInterval_1_1LinearOrder/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "Total order that sorts intervals first by lower bound, then by upper bound (i.e., by \"dictionary order\"). ",
      "category": "classes",
      "fullname": "batt::BasicInterval::LexicographicalOrder",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::BasicInterval::LexicographicalOrder",
      "refid": "structbatt_1_1BasicInterval_1_1LexicographicalOrder",
      "summary": "Total order that sorts intervals first by lower bound, then by upper bound (i.e., by \"dictionary order\"). ",
      "title": "batt::BasicInterval::LexicographicalOrder",
      "url": "/_autogen/Classes/structbatt_1_1BasicInterval_1_1LexicographicalOrder/",
      "visibility": "public"
    }
  ],
  "refid": "interval_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/interval.hpp",
  "url": "/_autogen/Files/interval_8hpp/#file-interval.hpp",
  "visibility": "public"
}