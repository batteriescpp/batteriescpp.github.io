{
  "abstract": false,
  "anchor": "#file-radix-queue.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-radix-queue-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_RADIX_QUEUE_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/radix_queue.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/radix_queue.hpp",
        "line": 5
      },
      "name": "BATTERIES_RADIX_QUEUE_HPP",
      "override": false,
      "refid": "radix__queue_8hpp_1a9d27c44768b21515b12a04e268475b82",
      "static": false,
      "strong": false,
      "title": "BATTERIES_RADIX_QUEUE_HPP",
      "url": "/_autogen/Files/radix__queue_8hpp/#define-batteries-radix-queue-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/radix_queue.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/radix_queue.hpp",
    "line": 0
  },
  "name": "batteries/radix_queue.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_RADIX_QUEUE_HPP\n#define BATTERIES_RADIX_QUEUE_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/assert.hpp>\n#include <batteries/int_types.hpp>\n\n#include <boost/functional/hash.hpp>\n#include <boost/operators.hpp>\n\n#include <array>\n#include <limits>\n#include <type_traits>\n\nnamespace batt {\n\ntemplate <usize kCapacityInBits>\nclass RadixQueue;\n\ntemplate <usize N_>\nstd::ostream& operator<<(std::ostream& out, const RadixQueue<N_>& t);\n\n// A fixed-capacity FIFO queue of integers with variable radix per integer.  This is used to store sequences\n// of events.\n//\ntemplate <usize kCapacityInBits>\nclass RadixQueue : public boost::equality_comparable<RadixQueue<kCapacityInBits>>\n{\n   public:\n    static constexpr usize kQueueSize = kCapacityInBits / 64;\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    using index_type = std::conditional_t<\n        (kCapacityInBits <= std::numeric_limits<u16>::max()),\n        std::conditional_t<(kCapacityInBits <= std::numeric_limits<u8>::max()), u8, u16>,\n        std::conditional_t<(kCapacityInBits <= std::numeric_limits<u32>::max()), u32, u64>>;\n\n    // The queue is stored in segments of 64 bits each.\n    //\n    struct Segment {\n        u64 radix = 1;\n        u64 value = 0;\n\n        friend inline std::ostream& operator<<(std::ostream& out, const Segment& t)\n        {\n            return out << \"{.value=\" << t.value << \", .radix=\" << t.radix << \"}\";\n        }\n    };\n\n    // Default hash function.\n    //\n    struct Hash {\n        using value_type = usize;\n\n        usize operator()(const RadixQueue& r) const\n        {\n            const usize size = r.queue_size();\n            usize seed = size;\n            for (usize i = 0; i < size; ++i) {\n                const usize j = (r.front_ + i) % kQueueSize;\n                boost::hash_combine(seed, r.queue_[j].radix);\n                boost::hash_combine(seed, r.queue_[j].value);\n            }\n            return seed;\n        }\n    };\n\n    bool operator==(const RadixQueue& other) const\n    {\n        const usize size = this->queue_size();\n        if (size != other.queue_size()) {\n            return false;\n        }\n        for (usize i = 0; i < size; ++i) {\n            const usize this_j = (this->front_ + i) % kQueueSize;\n            const usize other_j = (other.front_ + i) % kQueueSize;\n            if (this->queue_[this_j].radix != other.queue_[other_j].radix ||\n                this->queue_[this_j].value != other.queue_[other_j].value) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    RadixQueue() = default;\n\n    // Returns true when there are no items in the queue.\n    //\n    bool empty() const\n    {\n        return this->queue_size() == 1 && this->front().radix == 1;\n    }\n\n    // Returns true when the queue has reached its maximum capacity.\n    //\n    bool full() const\n    {\n        return this->front_ == (this->back_ + 1) % kQueueSize;\n    }\n\n    // Discards the contents of the queue, resetting it to default state.\n    //\n    void clear()\n    {\n        this->front_ = 0;\n        this->back_ = 0;\n        this->queue_[0] = Segment{};\n    }\n\n    // Insert the given value with the given radix at the back of the queue.\n    //\n    void push(u64 radix, u64 value)\n    {\n        BATT_CHECK_GT(radix, value) << \"value must not exceed the supplied radix\";\n\n        const bool would_overflow = std::numeric_limits<u64>::max() / this->back().radix < radix;\n\n        if (would_overflow) {\n            this->push_back();\n        }\n\n        Segment& s = this->back();\n        s.value += value * s.radix;\n        s.radix *= radix;\n    }\n\n    // Extract the next value out of the queue.  The passed radix must match the radix used when inserting\n    // the item originally; otherwise behavior is undefined.\n    //\n    u64 pop(u64 radix)\n    {\n        Segment& s = this->front();\n        BATT_CHECK_LE(radix, s.radix) << \"the supplied radix is too large\";\n\n        const u64 value = s.value % radix;\n        s.radix /= radix;\n        s.value /= radix;\n\n        BATT_CHECK_LT(s.value, s.radix);\n\n        if (s.radix == 1 && this->queue_size() > 1) {\n            this->pop_front();\n        }\n\n        return value;\n    }\n\n    template <usize N_>\n    friend std::ostream& operator<<(std::ostream& out, const RadixQueue<N_>& t);\n\n   private:\n    static void advance_index(index_type* i)\n    {\n        *i = (*i + 1) % kQueueSize;\n    }\n\n    usize queue_size() const\n    {\n        const usize upper_bound = [&]() -> usize {\n            if (this->front_ <= this->back_) {\n                return this->back_ + 1;\n            }\n            return kQueueSize + this->back_ + 1;\n        }();\n        BATT_CHECK_LT(this->front_, upper_bound);\n\n        return upper_bound - this->front_;\n    }\n\n    Segment& front()\n    {\n        return this->queue_[this->front_];\n    }\n    const Segment& front() const\n    {\n        return this->queue_[this->front_];\n    }\n\n    Segment& back()\n    {\n        return this->queue_[this->back_];\n    }\n    const Segment& back() const\n    {\n        return this->queue_[this->back_];\n    }\n\n    void pop_front()\n    {\n        BATT_CHECK_NE(this->front_, this->back_) << \"pull failed; the RadixQueue is empty\";\n        advance_index(&this->front_);\n    }\n\n    void push_back()\n    {\n        BATT_CHECK(!this->full()) << \"push failed; the RadixQueue is full\";\n        advance_index(&this->back_);\n        this->queue_[this->back_] = Segment{};\n    }\n\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    index_type front_ = 0;\n    index_type back_ = 0;\n    std::array<Segment, kQueueSize> queue_;\n};\n\ntemplate <usize N_>\ninline std::ostream& operator<<(std::ostream& out, const RadixQueue<N_>& t)\n{\n    usize end = (t.front_ <= t.back_) ? (t.back_ + 1) : (t.back_ + 1 + t.queue_.size());\n    out << \"{\";\n    for (usize i = t.front_; i < end; ++i) {\n        const auto& s = t.queue_[i % t.queue_.size()];\n        out << s.value << \"/\" << s.radix << \",\";\n    }\n    return out << \"}\";\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_RADIX_QUEUE_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "boost::equality_comparable< RadixQueue< kCapacityInBits > >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::RadixQueue",
      "kind": "class",
      "language": "cpp",
      "name": "batt::RadixQueue",
      "refid": "classbatt_1_1RadixQueue",
      "title": "batt::RadixQueue",
      "url": "/_autogen/Classes/classbatt_1_1RadixQueue/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::RadixQueue::Segment",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::RadixQueue::Segment",
      "refid": "structbatt_1_1RadixQueue_1_1Segment",
      "title": "batt::RadixQueue::Segment",
      "url": "/_autogen/Classes/structbatt_1_1RadixQueue_1_1Segment/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::RadixQueue::Hash",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::RadixQueue::Hash",
      "refid": "structbatt_1_1RadixQueue_1_1Hash",
      "title": "batt::RadixQueue::Hash",
      "url": "/_autogen/Classes/structbatt_1_1RadixQueue_1_1Hash/",
      "visibility": "public"
    }
  ],
  "refid": "radix__queue_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/radix_queue.hpp",
  "url": "/_autogen/Files/radix__queue_8hpp/#file-radix-queue.hpp",
  "visibility": "public"
}