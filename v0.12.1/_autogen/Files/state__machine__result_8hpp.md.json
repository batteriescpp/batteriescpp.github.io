{
  "abstract": false,
  "anchor": "#file-state-machine-result.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-state-machine-model-state-machine-result-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_STATE_MACHINE_MODEL_STATE_MACHINE_RESULT_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/state_machine_model/state_machine_result.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/state_machine_model/state_machine_result.hpp",
        "line": 6
      },
      "name": "BATTERIES_STATE_MACHINE_MODEL_STATE_MACHINE_RESULT_HPP",
      "override": false,
      "refid": "state__machine__result_8hpp_1a4c719df5d9fe1cca07ca853a178d4b5a",
      "static": false,
      "strong": false,
      "title": "BATTERIES_STATE_MACHINE_MODEL_STATE_MACHINE_RESULT_HPP",
      "url": "/_autogen/Files/state__machine__result_8hpp/#define-batteries-state-machine-model-state-machine-result-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/state_machine_model/state_machine_result.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/state_machine_model/state_machine_result.hpp",
    "line": 0
  },
  "name": "batteries/state_machine_model/state_machine_result.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/state-machine-model",
    "category": "dirs",
    "fullname": "batteries/state_machine_model",
    "kind": "dir",
    "language": "",
    "name": "batteries/state_machine_model",
    "refid": "dir_a632bc4ac9c412aedbec832ef7391aeb",
    "title": "batteries/state_machine_model",
    "url": "/_autogen/Files/dir_a632bc4ac9c412aedbec832ef7391aeb/#dir-batteries/state-machine-model",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/state-machine-model",
      "category": "dirs",
      "fullname": "batteries/state_machine_model",
      "kind": "dir",
      "language": "",
      "name": "batteries/state_machine_model",
      "refid": "dir_a632bc4ac9c412aedbec832ef7391aeb",
      "title": "batteries/state_machine_model",
      "url": "/_autogen/Files/dir_a632bc4ac9c412aedbec832ef7391aeb/#dir-batteries/state-machine-model",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_STATE_MACHINE_MODEL_STATE_MACHINE_RESULT_HPP\n#define BATTERIES_STATE_MACHINE_MODEL_STATE_MACHINE_RESULT_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/int_types.hpp>\n\n#include <bitset>\n#include <chrono>\n#include <ostream>\n\nnamespace batt {\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\nstruct StateMachineResult {\n    bool ok = false;\n    usize branch_push_count = 0;\n    usize branch_pop_count = 0;\n    usize branch_miss_count = 0;\n    usize state_count = 0;\n    usize self_branch_count = 0;\n    std::chrono::steady_clock::time_point start_time;\n    usize elapsed_ms = 0;\n    double states_per_second = 0.0;\n    double branch_pop_per_second = 0.0;\n    double branch_push_per_second = 0.0;\n    std::bitset<64> shards{0};\n    Optional<usize> seed;\n\n    void update_elapsed_time()\n    {\n        this->elapsed_ms = std::chrono::duration_cast<std::chrono::milliseconds>(\n                               std::chrono::steady_clock::now() - this->start_time)\n                               .count();\n        this->update_rates();\n    }\n\n    double compute_rate(usize count) const\n    {\n        return double(count * 1000 + 1) / double(this->elapsed_ms + 1);\n    }\n\n    void update_rates()\n    {\n        this->states_per_second = this->compute_rate(this->state_count);\n        this->branch_pop_per_second = this->compute_rate(this->branch_pop_count);\n        this->branch_push_per_second = this->compute_rate(this->branch_push_count);\n    }\n};\n\ninline StateMachineResult combine_results(const StateMachineResult& a, const StateMachineResult& b)\n{\n    StateMachineResult c;\n\n    c.ok = a.ok && b.ok;\n    c.branch_push_count = a.branch_push_count + b.branch_push_count;\n    c.branch_pop_count = a.branch_pop_count + b.branch_pop_count;\n    c.branch_miss_count = a.branch_miss_count + b.branch_miss_count;\n    c.state_count = a.state_count + b.state_count;\n    c.self_branch_count = a.self_branch_count + b.self_branch_count;\n    c.elapsed_ms = std::max(a.elapsed_ms, b.elapsed_ms);\n    c.start_time = std::chrono::steady_clock::now() - std::chrono::milliseconds(c.elapsed_ms);\n    c.shards = a.shards | b.shards;\n    c.update_rates();\n\n    if (a.seed) {\n        c.seed = a.seed;\n    } else {\n        c.seed = b.seed;\n    }\n\n    return c;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ninline std::ostream& operator<<(std::ostream& out, const StateMachineResult& r)\n{\n    return out << \"StateMachineResult{\"                                     //\n               << \".ok=\" << r.ok                                            //\n               << \", .branch_push_count=\" << r.branch_push_count            //\n               << \", .branch_pop_count=\" << r.branch_pop_count              //\n               << \", .branch_miss_count=\" << r.branch_miss_count            //\n               << \", .state_count=\" << r.state_count                        //\n               << \", .self_branch_count=\" << r.self_branch_count            //\n               << \", .states_per_second=\" << r.states_per_second            //\n               << \", .branch_push_per_second=\" << r.branch_push_per_second  //\n               << \", .branch_pop_per_second=\" << r.branch_pop_per_second    //\n               << \", .elapsed_ms=\" << r.elapsed_ms                          //\n               << \", .shards=\" << r.shards                                  //\n               << \", .seed=\" << r.seed                                      //\n               << \",}\";\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_STATE_MACHINE_MODEL_STATE_MACHINE_RESULT_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::StateMachineResult",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::StateMachineResult",
      "refid": "structbatt_1_1StateMachineResult",
      "title": "batt::StateMachineResult",
      "url": "/_autogen/Classes/structbatt_1_1StateMachineResult/",
      "visibility": "public"
    }
  ],
  "refid": "state__machine__result_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/state_machine_model/state_machine_result.hpp",
  "url": "/_autogen/Files/state__machine__result_8hpp/#file-state-machine-result.hpp",
  "visibility": "public"
}