{
  "abstract": false,
  "anchor": "#file-var-size-array.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-var-size-array-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_VAR_SIZE_ARRAY_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/var_size_array.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/var_size_array.hpp",
        "line": 5
      },
      "name": "BATTERIES_VAR_SIZE_ARRAY_HPP",
      "override": false,
      "refid": "var__size__array_8hpp_1aa217f7c9f64a32977812c22ddc08b8e9",
      "static": false,
      "strong": false,
      "title": "BATTERIES_VAR_SIZE_ARRAY_HPP",
      "url": "/_autogen/Files/var__size__array_8hpp/#define-batteries-var-size-array-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/var_size_array.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/var_size_array.hpp",
    "line": 0
  },
  "name": "batteries/var_size_array.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_VAR_SIZE_ARRAY_HPP\n#define BATTERIES_VAR_SIZE_ARRAY_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/int_types.hpp>\n\n#include <memory>\n#include <type_traits>\n\nnamespace batt {\n\ntemplate <typename T, usize kStaticAlloc = 1>\nclass VarSizeArray\n{\n   public:\n    using size_type = usize;\n    using value_type = T;\n    using reference = T&;\n    using const_reference = const T&;\n    using iterator = T*;\n    using const_iterator = const T*;\n\n    template <typename... Args>\n    VarSizeArray(usize size, Args&&... args) : size_{size}\n    {\n        if (size > kStaticAlloc) {\n            this->dynamic_storage_ = std::make_unique<std::aligned_storage_t<sizeof(T)>[]>(size);\n            this->array_ = reinterpret_cast<T*>(this->dynamic_storage_.get());\n        } else {\n            this->array_ = reinterpret_cast<T*>(&this->static_storage_);\n        }\n\n        for (usize i = 0; i < this->size_; ++i) {\n            new (&this->array_[i]) T(args...);\n        }\n    }\n\n    ~VarSizeArray()\n    {\n        for (T& elem : *this) {\n            elem.~T();\n        }\n    }\n\n    // TODO [tastolfi 2021-05-10] - implement copy/move semantics.\n    //\n    VarSizeArray(const VarSizeArray&) = delete;\n    VarSizeArray& operator=(const VarSizeArray&) = delete;\n\n    usize size() const\n    {\n        return this->size_;\n    }\n\n    iterator begin()\n    {\n        return &this->array_[0];\n    }\n\n    iterator end()\n    {\n        return &this->array_[this->size_];\n    }\n\n    const_iterator cbegin() const\n    {\n        return &this->array_[0];\n    }\n\n    const_iterator cend() const\n    {\n        return &this->array_[this->size_];\n    }\n\n    const_iterator begin() const\n    {\n        return this->cbegin();\n    }\n\n    const_iterator end() const\n    {\n        return this->cend();\n    }\n\n    T* data()\n    {\n        return this->array_;\n    }\n\n    const T* data() const\n    {\n        return this->array_;\n    }\n\n    reference operator[](isize i)\n    {\n        return this->array_[i];\n    }\n\n    const_reference operator[](isize i) const\n    {\n        return this->array_[i];\n    }\n\n    bool is_dynamic() const\n    {\n        return (const void*)this->array_ == (const void*)this->dynamic_storage_.get();\n    }\n\n   private:\n    std::unique_ptr<std::aligned_storage_t<sizeof(T)>[]> dynamic_storage_;\n    std::aligned_storage_t<sizeof(T) * kStaticAlloc> static_storage_;\n    T* array_;\n    const usize size_;\n};\n\n}  // namespace batt\n\n#endif  // BATTERIES_VAR_SIZE_ARRAY_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::VarSizeArray",
      "kind": "class",
      "language": "cpp",
      "name": "batt::VarSizeArray",
      "refid": "classbatt_1_1VarSizeArray",
      "title": "batt::VarSizeArray",
      "url": "/_autogen/Classes/classbatt_1_1VarSizeArray/",
      "visibility": "public"
    }
  ],
  "refid": "var__size__array_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/var_size_array.hpp",
  "url": "/_autogen/Files/var__size__array_8hpp/#file-var-size-array.hpp",
  "visibility": "public"
}