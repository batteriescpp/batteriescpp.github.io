{
  "abstract": false,
  "anchor": "#file-status-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-status-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_STATUS_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/status_impl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/status_impl.hpp",
        "line": 6
      },
      "name": "BATTERIES_STATUS_IMPL_HPP",
      "override": false,
      "refid": "status__impl_8hpp_1a16610e019509c53819e6bb9ffbd47606",
      "static": false,
      "strong": false,
      "title": "BATTERIES_STATUS_IMPL_HPP",
      "url": "/_autogen/Files/status__impl_8hpp/#define-batteries-status-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/status_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/status_impl.hpp",
    "line": 0
  },
  "name": "batteries/status_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_STATUS_IMPL_HPP\n#define BATTERIES_STATUS_IMPL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/assert.hpp>\n#include <batteries/config.hpp>\n\n#include <utility>\n#include <vector>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL std::ostream& operator<<(std::ostream& out, const Status& t)\n{\n    return out << t.code() << \":\" << t.message();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL bool operator==(const Status& l, const Status& r)\n{\n    return l.code() == r.code() || (l.ok() && r.ok());\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL bool operator!=(const Status& l, const Status& r)\n{\n    return !(l == r);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Status OkStatus()\n{\n    return Status{};\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL detail::StatusBase::StatusBase() noexcept\n{\n    [[maybe_unused]] static bool initialized = [] {\n        Status::register_codes_internal<StatusCode>({\n            {StatusCode::kOk, \"Ok\"},\n            {StatusCode::kCancelled, \"Cancelled\"},\n            {StatusCode::kUnknown, \"Unknown\"},\n            {StatusCode::kInvalidArgument, \"Invalid Argument\"},\n            {StatusCode::kDeadlineExceeded, \"Deadline Exceeded\"},\n            {StatusCode::kNotFound, \"Not Found\"},\n            {StatusCode::kAlreadyExists, \"Already Exists\"},\n            {StatusCode::kPermissionDenied, \"Permission Denied\"},\n            {StatusCode::kResourceExhausted, \"Resource Exhausted\"},\n            {StatusCode::kFailedPrecondition, \"Failed Precondition\"},\n            {StatusCode::kAborted, \"Aborted\"},\n            {StatusCode::kOutOfRange, \"Out of Range\"},\n            {StatusCode::kUnimplemented, \"Unimplemented\"},\n            {StatusCode::kInternal, \"Internal\"},\n            {StatusCode::kUnavailable, \"Unavailable\"},\n            {StatusCode::kDataLoss, \"Data Loss\"},\n            {StatusCode::kUnauthenticated, \"Unauthenticated\"},\n            //\n            {StatusCode::kClosed, \"Closed\"},\n            {StatusCode::kGrantUnavailable, \"The requested grant count exceeds available count\"},\n            {StatusCode::kLoopBreak, \"Loop break\"},\n            {StatusCode::kEndOfStream, \"End of stream\"},\n            {StatusCode::kClosedBeforeEndOfStream, \"The stream was closed before the end of data\"},\n            {StatusCode::kGrantRevoked, \"The Grant was revoked\"},\n        });\n\n        std::vector<std::pair<ErrnoValue, std::string>> errno_codes;\n        for (int code = 0; code < Status::kGroupSize; ++code) {\n            const char* msg = std::strerror(code);\n            if (msg) {\n                errno_codes.emplace_back(static_cast<ErrnoValue>(code), std::string(msg));\n            } else {\n                errno_codes.emplace_back(static_cast<ErrnoValue>(code), std::string(\"(unknown)\"));\n            }\n        }\n        return Status::register_codes_internal<ErrnoValue>(errno_codes);\n    }();\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_STATUS_IMPL_HPP",
  "refid": "status__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/status_impl.hpp",
  "url": "/_autogen/Files/status__impl_8hpp/#file-status-impl.hpp",
  "visibility": "public"
}