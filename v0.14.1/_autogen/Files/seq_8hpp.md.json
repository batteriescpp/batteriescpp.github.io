{
  "abstract": false,
  "anchor": "#file-seq.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-seq-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_SEQ_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/seq.hpp",
        "bodyStart": 9,
        "column": 9,
        "file": "batteries/seq.hpp",
        "line": 9
      },
      "name": "BATTERIES_SEQ_HPP",
      "override": false,
      "refid": "seq_8hpp_1a3c22f39976d771a07a52b8ad53de3f75",
      "static": false,
      "strong": false,
      "title": "BATTERIES_SEQ_HPP",
      "url": "/_autogen/Files/seq_8hpp/#define-batteries-seq-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/seq.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/seq.hpp",
    "line": 0
  },
  "name": "batteries/seq.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::seq",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::seq",
      "refid": "namespacebatt_1_1seq",
      "title": "batt::seq",
      "url": "/_autogen/Namespaces/namespacebatt_1_1seq/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2022 Anthony Paul Astolfi\n//\n\n// Utilities for dealing with sequences.\n//\n#pragma once\n#ifndef BATTERIES_SEQ_HPP\n#define BATTERIES_SEQ_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/assert.hpp>\n#include <batteries/case_of.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/seq/all_true.hpp>\n#include <batteries/seq/any_true.hpp>\n#include <batteries/seq/apply.hpp>\n#include <batteries/seq/attach.hpp>\n#include <batteries/seq/boxed.hpp>\n#include <batteries/seq/cache_next.hpp>\n#include <batteries/seq/chain.hpp>\n#include <batteries/seq/collect.hpp>\n#include <batteries/seq/collect_vec.hpp>\n#include <batteries/seq/consume.hpp>\n#include <batteries/seq/count.hpp>\n#include <batteries/seq/decay.hpp>\n#include <batteries/seq/deref.hpp>\n#include <batteries/seq/emplace_back.hpp>\n#include <batteries/seq/filter.hpp>\n#include <batteries/seq/filter_map.hpp>\n#include <batteries/seq/first.hpp>\n#include <batteries/seq/flatten.hpp>\n#include <batteries/seq/for_each.hpp>\n#include <batteries/seq/fuse.hpp>\n#include <batteries/seq/group_by.hpp>\n#include <batteries/seq/inner_reduce.hpp>\n#include <batteries/seq/inspect.hpp>\n#include <batteries/seq/inspect_adjacent.hpp>\n#include <batteries/seq/is_sorted.hpp>\n#include <batteries/seq/kmerge.hpp>\n#include <batteries/seq/last.hpp>\n#include <batteries/seq/lazy.hpp>\n#include <batteries/seq/map.hpp>\n#include <batteries/seq/map_adjacent.hpp>\n#include <batteries/seq/map_fold.hpp>\n#include <batteries/seq/map_pairwise.hpp>\n#include <batteries/seq/merge_by.hpp>\n#include <batteries/seq/natural_order.hpp>\n#include <batteries/seq/print_out.hpp>\n#include <batteries/seq/printable.hpp>\n#include <batteries/seq/product.hpp>\n#include <batteries/seq/reduce.hpp>\n#include <batteries/seq/rolling.hpp>\n#include <batteries/seq/rolling_sum.hpp>\n#include <batteries/seq/seq_item.hpp>\n#include <batteries/seq/skip_n.hpp>\n#include <batteries/seq/splice.hpp>\n#include <batteries/seq/status_ok.hpp>\n#include <batteries/seq/sub_range_seq.hpp>\n#include <batteries/seq/sum.hpp>\n#include <batteries/seq/take_n.hpp>\n#include <batteries/seq/take_while.hpp>\n#include <batteries/small_vec.hpp>\n#include <batteries/stream_util.hpp>\n#include <batteries/type_traits.hpp>\n#include <batteries/utility.hpp>\n\n#include <boost/range/iterator_range.hpp>\n\n#include <algorithm>\n#include <ostream>\n#include <string_view>\n#include <type_traits>\n#include <variant>\n#include <vector>\n\nnamespace batt {\n\ntemplate <typename ForwardIter>\nauto as_seq(ForwardIter&& begin, ForwardIter&& end)\n{\n    return as_seq(boost::make_iterator_range(BATT_FORWARD(begin), BATT_FORWARD(end)));\n}\n\ntemplate <typename VectorLike, typename = decltype(std::declval<VectorLike>().data()),\n          typename = decltype(std::declval<VectorLike>().size()),\n          typename = std::enable_if_t<std::is_same_v<decltype(std::declval<VectorLike>().data()),\n                                                     decltype(std::declval<VectorLike>().data() +\n                                                              std::declval<VectorLike>().size())>>>\nauto as_seq(VectorLike&& v)\n{\n    return as_seq(v.data(), v.data() + v.size());\n}\n\ntemplate <typename T, typename Begin = decltype(std::declval<const T&>().data()),\n          typename End = decltype(std::declval<Begin>() + std::declval<const T&>().size()),\n          typename = std::enable_if_t<std::is_same_v<Begin, End>>>\nauto vec_range(const T& vec)\n{\n    return boost::make_iterator_range(vec.data(), vec.data() + vec.size());\n}\n\ntemplate <typename T>\nstruct VecSeqBase {\n    explicit VecSeqBase(std::vector<T>&& v) noexcept : vec(std::move(v))\n    {\n    }\n\n    std::vector<T> vec;\n};\n\ntemplate <typename T>\nclass VecSeq\n    : public VecSeqBase<T>\n    , public SubRangeSeq<boost::iterator_range<const T*>>\n{\n   public:\n    explicit VecSeq(std::vector<T>&& v) noexcept\n        : VecSeqBase<T>{std::move(v)}\n        , SubRangeSeq<boost::iterator_range<const T*>>{\n              boost::make_iterator_range(this->vec.data(), this->vec.data() + this->vec.size())}\n    {\n    }\n};\n\ntemplate <typename T>\nauto into_seq(std::vector<T>&& v)\n{\n    return VecSeq<T>{std::move(v)};\n}\n\nnamespace seq {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// single_item\n//\ntemplate <typename T>\nclass SingleItem\n{\n   public:\n    using Item = T;\n\n    explicit SingleItem(T&& item) noexcept : item_(BATT_FORWARD(item))\n    {\n    }\n\n    Optional<Item> peek()\n    {\n        return item_;\n    }\n\n    Optional<Item> next()\n    {\n        auto n = std::move(item_);\n        item_ = None;\n        return n;\n    }\n\n   private:\n    Optional<Item> item_;\n};\n\ntemplate <typename T>\n[[nodiscard]] SingleItem<T> single_item(T&& item)\n{\n    return SingleItem<T>{BATT_FORWARD(item)};\n}\n\n}  // namespace seq\n}  // namespace batt\n\n#endif  // BATTERIES_SEQ_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "derivedClasses": [
        {
          "external": false,
          "name": "batt::VecSeq< T >",
          "refid": "classbatt_1_1VecSeq",
          "url": "/_autogen/Classes/classbatt_1_1VecSeq/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "fullname": "batt::VecSeqBase",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::VecSeqBase",
      "refid": "structbatt_1_1VecSeqBase",
      "title": "batt::VecSeqBase",
      "url": "/_autogen/Classes/structbatt_1_1VecSeqBase/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::VecSeqBase< T >",
          "refid": "structbatt_1_1VecSeqBase",
          "url": "/_autogen/Classes/structbatt_1_1VecSeqBase/",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": false,
          "name": "batt::SubRangeSeq< boost::iterator_range< const T * > >",
          "refid": "classbatt_1_1SubRangeSeq",
          "url": "/_autogen/Classes/classbatt_1_1SubRangeSeq/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::VecSeq",
      "kind": "class",
      "language": "cpp",
      "name": "batt::VecSeq",
      "refid": "classbatt_1_1VecSeq",
      "title": "batt::VecSeq",
      "url": "/_autogen/Classes/classbatt_1_1VecSeq/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::SingleItem",
      "kind": "class",
      "language": "cpp",
      "name": "batt::seq::SingleItem",
      "refid": "classbatt_1_1seq_1_1SingleItem",
      "title": "batt::seq::SingleItem",
      "url": "/_autogen/Classes/classbatt_1_1seq_1_1SingleItem/",
      "visibility": "public"
    }
  ],
  "refid": "seq_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/seq.hpp",
  "url": "/_autogen/Files/seq_8hpp/#file-seq.hpp",
  "visibility": "public"
}