{
  "abstract": false,
  "anchor": "#file-host-address.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-http-host-address-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_HTTP_HOST_ADDRESS_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/http/host_address.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/http/host_address.hpp",
        "line": 6
      },
      "name": "BATTERIES_HTTP_HOST_ADDRESS_HPP",
      "override": false,
      "refid": "host__address_8hpp_1a137d12fb4c41c8a89a9ca0b9edc6dcff",
      "static": false,
      "strong": false,
      "title": "BATTERIES_HTTP_HOST_ADDRESS_HPP",
      "url": "/_autogen/Files/host__address_8hpp/#define-batteries-http-host-address-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/http/host_address.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/http/host_address.hpp",
    "line": 0
  },
  "name": "batteries/http/host_address.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/http",
    "category": "dirs",
    "fullname": "batteries/http",
    "kind": "dir",
    "language": "",
    "name": "batteries/http",
    "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
    "title": "batteries/http",
    "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/http",
      "category": "dirs",
      "fullname": "batteries/http",
      "kind": "dir",
      "language": "",
      "name": "batteries/http",
      "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
      "title": "batteries/http",
      "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_HTTP_HOST_ADDRESS_HPP\n#define BATTERIES_HTTP_HOST_ADDRESS_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/task.hpp>\n\n#include <batteries/int_types.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/small_vec.hpp>\n#include <batteries/stream_util.hpp>\n#include <batteries/utility.hpp>\n\n#include <boost/asio/io_context.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/functional/hash.hpp>\n\n#include <string>\n\nnamespace batt {\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\nstruct HostAddress {\n    std::string scheme;\n    std::string hostname;\n    Optional<i64> port;\n\n    friend usize hash_value(const HostAddress& host_key);\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ninline StatusOr<SmallVec<boost::asio::ip::tcp::endpoint>> await_resolve(\n    boost::asio::ip::tcp::resolver& resolver, const HostAddress& host_address)\n{\n    auto hosts = Task::await<IOResult<boost::asio::ip::tcp::resolver::results_type>>([&](auto&& handler) {\n        resolver.async_resolve(host_address.hostname, host_address.scheme, BATT_FORWARD(handler));\n    });\n    BATT_REQUIRE_OK(hosts);\n\n    SmallVec<boost::asio::ip::tcp::endpoint> endpoints;\n    for (const auto& result : *hosts) {\n        auto endpoint = result.endpoint();\n        if (host_address.port) {\n            endpoint.port(*host_address.port);\n        }\n        endpoints.emplace_back(std::move(endpoint));\n    }\n\n    return endpoints;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ninline StatusOr<SmallVec<boost::asio::ip::tcp::endpoint>> await_resolve(boost::asio::io_context& io,\n                                                                        const HostAddress& host_address)\n{\n    boost::asio::ip::tcp::resolver resolver{io};\n    return await_resolve(resolver, host_address);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ninline usize hash_value(const HostAddress& host_key)\n{\n    usize seed = 0;\n    boost::hash_combine(seed, host_key.scheme);\n    boost::hash_combine(seed, host_key.hostname);\n    boost::hash_combine(seed, host_key.port.value_or(-1));\n    return seed;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ninline bool operator==(const HostAddress& l, const HostAddress& r)\n{\n    return l.scheme == r.scheme && l.hostname == r.hostname && l.port == r.port;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ninline bool operator!=(const HostAddress& l, const HostAddress& r)\n{\n    return !(l == r);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ninline std::ostream& operator<<(std::ostream& out, const HostAddress& t)\n{\n    return out << \"HostAddress{.scheme=\" << batt::c_str_literal(t.scheme)\n               << \", .hostname=\" << batt::c_str_literal(t.hostname) << \", .port=\" << t.port << \",}\";\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_HTTP_HOST_ADDRESS_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::HostAddress",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::HostAddress",
      "refid": "structbatt_1_1HostAddress",
      "title": "batt::HostAddress",
      "url": "/_autogen/Classes/structbatt_1_1HostAddress/",
      "visibility": "public"
    }
  ],
  "refid": "host__address_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/http/host_address.hpp",
  "url": "/_autogen/Files/host__address_8hpp/#file-host-address.hpp",
  "visibility": "public"
}