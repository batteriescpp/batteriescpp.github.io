{
  "abstract": false,
  "anchor": "#file-stream-buffer-input-stream.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-protobuf-stream-buffer-input-stream-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_PROTOBUF_STREAM_BUFFER_INPUT_STREAM_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/protobuf/stream_buffer_input_stream.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/protobuf/stream_buffer_input_stream.hpp",
        "line": 6
      },
      "name": "BATTERIES_PROTOBUF_STREAM_BUFFER_INPUT_STREAM_HPP",
      "override": false,
      "refid": "stream__buffer__input__stream_8hpp_1added1515fe96b80c5ae7defaa06118d1",
      "static": false,
      "strong": false,
      "title": "BATTERIES_PROTOBUF_STREAM_BUFFER_INPUT_STREAM_HPP",
      "url": "/_autogen/Files/stream__buffer__input__stream_8hpp/#define-batteries-protobuf-stream-buffer-input-stream-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/protobuf/stream_buffer_input_stream.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/protobuf/stream_buffer_input_stream.hpp",
    "line": 0
  },
  "name": "batteries/protobuf/stream_buffer_input_stream.hpp",
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/protobuf",
    "category": "dirs",
    "fullname": "batteries/protobuf",
    "kind": "dir",
    "language": "",
    "name": "batteries/protobuf",
    "refid": "dir_ad31cac107356ba3b876e0559a878901",
    "title": "batteries/protobuf",
    "url": "/_autogen/Files/dir_ad31cac107356ba3b876e0559a878901/#dir-batteries/protobuf",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/protobuf",
      "category": "dirs",
      "fullname": "batteries/protobuf",
      "kind": "dir",
      "language": "",
      "name": "batteries/protobuf",
      "refid": "dir_ad31cac107356ba3b876e0559a878901",
      "title": "batteries/protobuf",
      "url": "/_autogen/Files/dir_ad31cac107356ba3b876e0559a878901/#dir-batteries/protobuf",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_PROTOBUF_STREAM_BUFFER_INPUT_STREAM_HPP\n#define BATTERIES_PROTOBUF_STREAM_BUFFER_INPUT_STREAM_HPP\n\n#include <batteries/config.hpp>\n\n#ifndef BATT_PROTOBUF_AVAILABLE\n#error This header may only be included if BATT_PROTOBUF_AVAILABLE is defined\n#else\n\n#include <google/protobuf/io/zero_copy_stream.h>\n\n#include <batteries/assert.hpp>\n#include <batteries/async/stream_buffer.hpp>\n#include <batteries/buffer.hpp>\n#include <batteries/checked_cast.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/small_vec.hpp>\n\n#include <algorithm>\n\nnamespace batt {\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\nclass StreamBufferInputStream : public google::protobuf::io::ZeroCopyInputStream\n{\n   public:\n    explicit StreamBufferInputStream(StreamBuffer& buffer) noexcept : buffer_{buffer}\n    {\n    }\n\n    ~StreamBufferInputStream() noexcept\n    {\n        this->consume_data();\n    }\n\n    // Obtains a chunk of data from the stream.\n    //\n    bool Next(const void** data, int* size) override\n    {\n        BATT_ASSERT_NOT_NULLPTR(data);\n        BATT_ASSERT_NOT_NULLPTR(size);\n\n        Optional<ConstBuffer> next = this->fetch_next();\n        if (!next) {\n            return false;\n        }\n\n        *data = next->data();\n        *size = BATT_CHECKED_CAST(int, next->size());\n\n        return true;\n    }\n\n    // Backs up a number of bytes, so that the next call to Next() returns data again that was already\n    // returned by the last call to Next().\n    //\n    void BackUp(int count) override\n    {\n        BATT_CHECK_LE(count, this->n_to_consume_);\n        this->n_to_consume_ -= count;\n        this->byte_count_ -= count;\n    }\n\n    // Skips a number of bytes.\n    //\n    bool Skip(int count) override\n    {\n        while (count > 0) {\n            const void* data = nullptr;\n            int size = 0;\n            bool result = this->Next(&data, &size);\n            if (!result || size == 0) {\n                return false;\n            }\n\n            if (size > count) {\n                this->BackUp(size - count);\n                count = 0;\n            } else {\n                count -= size;\n            }\n        }\n        return true;\n    }\n\n    // Returns the total number of bytes read since this object was created.\n    //\n    i64 ByteCount() const override\n    {\n        return this->byte_count_;\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    void consume_data()\n    {\n        if (this->n_to_consume_ > 0) {\n            i64 n = 0;\n            std::swap(n, this->n_to_consume_);\n            this->buffer_.consume(n);\n        }\n    }\n\n   private:\n    //==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    Optional<ConstBuffer> fetch_next()\n    {\n        this->consume_data();\n\n        StatusOr<SmallVec<ConstBuffer, 2> > fetched = this->buffer_.fetch_at_least(1);\n\n        if (!fetched.ok()) {\n            return None;\n        }\n\n        ConstBuffer& next = fetched->front();\n\n        this->n_to_consume_ = next.size();\n        this->byte_count_ += next.size();\n\n        return next;\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    StreamBuffer& buffer_;\n    i64 byte_count_ = 0;\n    i64 n_to_consume_ = 0;\n};\n\n}  // namespace batt\n\n#endif  // BATT_PROTOBUF_AVAILABLE\n\n#endif  // BATTERIES_PROTOBUF_STREAM_BUFFER_INPUT_STREAM_HPP",
  "refid": "stream__buffer__input__stream_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/protobuf/stream_buffer_input_stream.hpp",
  "url": "/_autogen/Files/stream__buffer__input__stream_8hpp/#file-stream-buffer-input-stream.hpp",
  "visibility": "public"
}