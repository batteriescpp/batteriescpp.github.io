{
  "abstract": false,
  "anchor": "#file-fetch.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-fetch-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_FETCH_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/fetch.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/fetch.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_FETCH_HPP",
      "override": false,
      "refid": "fetch_8hpp_1a3954da54ba6fa0d3ea9ad5ee71e27ba5",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_FETCH_HPP",
      "url": "/_autogen/Files/fetch_8hpp/#define-batteries-async-fetch-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/fetch.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/fetch.hpp",
    "line": 0
  },
  "name": "batteries/async/fetch.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_FETCH_HPP\n#define BATTERIES_ASYNC_FETCH_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/assert.hpp>\n#include <batteries/async/io_result.hpp>\n#include <batteries/async/pin.hpp>\n#include <batteries/async/task.hpp>\n#include <batteries/hint.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/pointers.hpp>\n#include <batteries/utility.hpp>\n\n#include <boost/asio/buffer.hpp>\n\n#include <algorithm>\n#include <cstddef>\n#include <limits>\n\nnamespace batt {\n\ntemplate <typename AsyncFetchStreamT>\nclass BasicScopedChunk\n{\n   public:\n    static constexpr usize kLocalStorageSize = 48;\n\n    using stream_type = AsyncFetchStreamT;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    BasicScopedChunk() = default;\n\n    BasicScopedChunk(const BasicScopedChunk&) = delete;\n\n    BasicScopedChunk& operator=(const BasicScopedChunk&) = delete;\n\n    BasicScopedChunk(BasicScopedChunk&& other) noexcept\n        : source_{std::move(other.source_)}\n        , local_storage_{std::move(other.local_storage_)}\n        , buffer_{other.buffer_}\n    {\n        // The buffer_ in the other object should be cleared.\n        //\n        other.buffer_ = boost::asio::const_buffer{nullptr, 0};\n\n        // Check to see whether we need to fix up buffer_ to point to the local_storage_ buffer.\n        //\n        if (!this->local_storage_.empty()) {\n            this->buffer_ =\n                boost::asio::const_buffer{this->local_storage_.data(), this->local_storage_.size()};\n        }\n    }\n\n    BasicScopedChunk& operator=(BasicScopedChunk&& other) noexcept\n    {\n        if (BATT_HINT_TRUE(this != &other)) {\n            this->source_ = std::move(other.source_);\n            this->local_storage_ = std::move(other.local_storage_);\n            this->buffer_ = other.buffer_;\n\n            // The buffer_ in the other object should be cleared.\n            //\n            other.buffer_ = boost::asio::const_buffer{nullptr, 0};\n\n            // Check to see whether we need to fix up buffer_ to point to the local_storage_ buffer.\n            //\n            if (!this->local_storage_.empty()) {\n                this->buffer_ =\n                    boost::asio::const_buffer{this->local_storage_.data(), this->local_storage_.size()};\n            }\n        }\n        return *this;\n    }\n\n    explicit BasicScopedChunk(stream_type* source, const boost::asio::const_buffer& buffer) noexcept\n        : source_{source}\n        , local_storage_{}\n        , buffer_{buffer}\n    {\n    }\n\n    explicit BasicScopedChunk(stream_type* source, batt::SmallVec<char, kLocalStorageSize>&& storage) noexcept\n        : source_{source}\n        , local_storage_{std::move(storage)}\n        , buffer_{this->local_storage_.data(), this->local_storage_.size()}\n    {\n    }\n\n    ~BasicScopedChunk() noexcept\n    {\n        this->consume();\n    }\n\n    const void* data() const noexcept\n    {\n        return this->buffer_.data();\n    }\n\n    usize size() const noexcept\n    {\n        return this->buffer_.size();\n    }\n\n    const boost::asio::const_buffer& buffer() const noexcept\n    {\n        return this->buffer_;\n    }\n\n    bool empty() const noexcept\n    {\n        return !this->source_ || this->buffer_.size() == 0;\n    }\n\n    void back_up(usize n = std::numeric_limits<usize>::max()) noexcept\n    {\n        n = std::min(n, this->size());\n        this->buffer_ = boost::asio::const_buffer{this->data(), this->size() - n};\n    }\n\n    void consume() noexcept\n    {\n        // Important: we must look at whether source_ is nullptr, regardless of whether this->empty()\n        // returns true, since each async_fetch must be paired with a call to consume, even if we are\n        // consuming 0 bytes.\n        //\n        if (this->source_) {\n            stream_type* const local_source = this->source_.release();\n            local_source->consume(this->buffer_.size());\n            this->buffer_ = boost::asio::const_buffer{};\n        }\n    }\n\n   private:\n    batt::UniqueNonOwningPtr<stream_type> source_;\n\n    batt::SmallVec<char, kLocalStorageSize> local_storage_;\n\n    boost::asio::const_buffer buffer_;\n};\n\ntemplate <typename AsyncFetchStreamT, typename ScopedChunk = BasicScopedChunk<AsyncFetchStreamT>,\n          typename ConstBufferSequence = typename AsyncFetchStreamT::const_buffers_type>\nbatt::StatusOr<ScopedChunk> fetch_chunk(AsyncFetchStreamT& stream, usize min_size)\n{\n    if (min_size == 0) {\n        return {batt::StatusCode::kInvalidArgument};\n    }\n\n    auto result =\n        batt::Task::await<batt::IOResult<ConstBufferSequence>>([&stream, min_size](auto&& handler) {  //\n            stream.async_fetch(min_size, BATT_FORWARD(handler));\n        });\n    BATT_REQUIRE_OK(result);\n\n    ConstBufferSequence& buffers = result.value();\n\n    auto next_iter = boost::asio::buffer_sequence_begin(buffers);\n    const auto last_iter = boost::asio::buffer_sequence_end(buffers);\n    BATT_CHECK_NE(next_iter, last_iter);\n\n    ConstBuffer first_chunk = *next_iter;\n    if (first_chunk.size() >= min_size) {\n        return ScopedChunk{&stream, boost::asio::const_buffer{*next_iter}};\n    }\n\n    // We need to gather the fetched buffers into a single chunk.\n    //\n    usize bytes_remaining = min_size;\n    usize offset = 0;\n    batt::SmallVec<char, ScopedChunk::kLocalStorageSize> storage(min_size);\n\n    while (bytes_remaining > 0 && next_iter != last_iter) {\n        const usize bytes_to_copy = std::min(bytes_remaining, next_iter->size());\n        std::memcpy(storage.data() + offset, next_iter->data(), bytes_to_copy);\n        bytes_remaining -= bytes_to_copy;\n        offset += bytes_to_copy;\n        ++next_iter;\n    }\n\n    BATT_CHECK_EQ(bytes_remaining, 0u) << \"The stream returned less than the minimum fetch size!\";\n\n    return ScopedChunk{&stream, std::move(storage)};\n}\n\ntemplate <typename From, typename To>\ninline StatusOr<usize> transfer_chunked_data(From& from, To& to)\n{\n    usize bytes_transferred = 0;\n    for (;;) {\n        auto chunk = from.fetch_chunk();\n        if (!chunk.ok()) {\n            if (chunk.status() != boost::asio::error::eof) {\n                return chunk.status();\n            }\n            break;\n        }\n\n        auto n_written = to.write(chunk->buffer());\n        BATT_REQUIRE_OK(n_written);\n        if (*n_written == 0) {\n            return {batt::StatusCode::kClosedBeforeEndOfStream};\n        }\n        chunk->back_up(chunk->size() - *n_written);\n\n        bytes_transferred += *n_written;\n    }\n\n    return bytes_transferred;\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_FETCH_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "brief": "A fetched chunk of data that is automatically consumed (partially or entirely) when it goes out of scope. ",
      "category": "classes",
      "fullname": "batt::BasicScopedChunk",
      "kind": "class",
      "language": "cpp",
      "name": "batt::BasicScopedChunk",
      "refid": "classbatt_1_1BasicScopedChunk",
      "summary": "A fetched chunk of data that is automatically consumed (partially or entirely) when it goes out of scope. ",
      "title": "batt::BasicScopedChunk",
      "url": "/_autogen/Classes/classbatt_1_1BasicScopedChunk/",
      "visibility": "public"
    }
  ],
  "refid": "fetch_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/fetch.hpp",
  "url": "/_autogen/Files/fetch_8hpp/#file-fetch.hpp",
  "visibility": "public"
}