{
  "abstract": false,
  "anchor": "#file-map-pairwise.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-seq-map-pairwise-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_SEQ_MAP_PAIRWISE_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/seq/map_pairwise.hpp",
        "bodyStart": 7,
        "column": 9,
        "file": "batteries/seq/map_pairwise.hpp",
        "line": 7
      },
      "name": "BATTERIES_SEQ_MAP_PAIRWISE_HPP",
      "override": false,
      "refid": "map__pairwise_8hpp_1a340d3c8a478cbe8ee70499bbbe86f350",
      "static": false,
      "strong": false,
      "title": "BATTERIES_SEQ_MAP_PAIRWISE_HPP",
      "url": "/_autogen/Files/map__pairwise_8hpp/#define-batteries-seq-map-pairwise-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/seq/map_pairwise.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/seq/map_pairwise.hpp",
    "line": 0
  },
  "name": "batteries/seq/map_pairwise.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::seq",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::seq",
      "refid": "namespacebatt_1_1seq",
      "title": "batt::seq",
      "url": "/_autogen/Namespaces/namespacebatt_1_1seq/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/seq",
    "category": "dirs",
    "fullname": "batteries/seq",
    "kind": "dir",
    "language": "",
    "name": "batteries/seq",
    "refid": "dir_0985703d1fb34e0edc7cc330d020d62d",
    "title": "batteries/seq",
    "url": "/_autogen/Files/dir_0985703d1fb34e0edc7cc330d020d62d/#dir-batteries/seq",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/seq",
      "category": "dirs",
      "fullname": "batteries/seq",
      "kind": "dir",
      "language": "",
      "name": "batteries/seq",
      "refid": "dir_0985703d1fb34e0edc7cc330d020d62d",
      "title": "batteries/seq",
      "url": "/_autogen/Files/dir_0985703d1fb34e0edc7cc330d020d62d/#dir-batteries/seq",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n\n#pragma once\n#ifndef BATTERIES_SEQ_MAP_PAIRWISE_HPP\n#define BATTERIES_SEQ_MAP_PAIRWISE_HPP\n\n#include <batteries/config.hpp>\n//\n\n#include <batteries/hint.hpp>\n#include <batteries/utility.hpp>\n\n#include <type_traits>\n\nnamespace batt {\nnamespace seq {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// map_pairwise\n//  Given: seqA = {a0, a1, a2, ...}, seqB = {b0, b1, b2, ...}, fn = (A, B) -> T\n//  Produce: {fn(a0, b0), fn(a1, b1), fn(a2, b2), ...}\n//\ntemplate <typename LeftSeq, typename RightSeq, typename MapFn>\nclass MapPairwise\n{\n   public:\n    using Item = std::invoke_result_t<MapFn, SeqItem<LeftSeq>, SeqItem<RightSeq>>;\n\n    explicit MapPairwise(LeftSeq&& left, RightSeq&& right, MapFn&& map_fn) noexcept\n        : left_(BATT_FORWARD(left))\n        , right_(BATT_FORWARD(right))\n        , map_fn_(BATT_FORWARD(map_fn))\n    {\n    }\n\n    MapPairwise(MapPairwise&& that) noexcept\n        : left_(BATT_FORWARD(that.left_))\n        , right_(BATT_FORWARD(that.right_))\n        , map_fn_(BATT_FORWARD(*that.map_fn_))\n    {\n    }\n\n    MapPairwise(const MapPairwise& that) : left_(that.left_), right_(that.right_), map_fn_(*that.map_fn_)\n    {\n    }\n\n    MapPairwise& operator=(MapPairwise&& that) noexcept\n    {\n        if (BATT_HINT_TRUE(this != &that)) {\n            this->left_ = BATT_FORWARD(that.left_);\n            this->right_ = BATT_FORWARD(that.right_);\n            this->map_fn_.emplace(BATT_FORWARD(*that.map_fn_));\n        }\n        return *this;\n    }\n\n    MapPairwise& operator=(const MapPairwise& that)\n    {\n        if (BATT_HINT_TRUE(this != &that)) {\n            this->left_ = that.left_;\n            this->right_ = that.right_;\n            this->map_fn_.emplace(*that.map_fn_);\n        }\n        return *this;\n    }\n\n    Optional<Item> peek()\n    {\n        return left_.peek().flat_map([this](auto&& left_item) {\n            return right_.peek().map([this, &left_item](auto&& right_item) {\n                return (*map_fn_)(BATT_FORWARD(left_item), BATT_FORWARD(right_item));\n            });\n        });\n    }\n\n    Optional<Item> next()\n    {\n        return left_.next().flat_map([this](auto&& left_item) {\n            return right_.next().map([this, &left_item](auto&& right_item) {\n                return (*map_fn_)(BATT_FORWARD(left_item), BATT_FORWARD(right_item));\n            });\n        });\n    }\n\n   private:\n    LeftSeq left_;\n    RightSeq right_;\n    Optional<MapFn> map_fn_;\n};\n\ntemplate <typename RightSeq, typename MapFn>\nstruct MapPairwiseBinder {\n    RightSeq right;\n    MapFn map_fn;\n};\n\ntemplate <typename RightSeq, typename MapFn>\nMapPairwiseBinder<RightSeq, MapFn> map_pairwise(RightSeq&& right, MapFn&& map_fn)\n{\n    return {BATT_FORWARD(right), BATT_FORWARD(map_fn)};\n}\n\ntemplate <typename LeftSeq, typename RightSeq, typename MapFn>\n[[nodiscard]] MapPairwise<LeftSeq, RightSeq, MapFn> operator|(LeftSeq&& left,\n                                                              MapPairwiseBinder<RightSeq, MapFn>&& binder)\n{\n    static_assert(std::is_same_v<LeftSeq, std::decay_t<LeftSeq>>,\n                  \"Mapped sequences may not be captured implicitly by reference.\");\n\n    static_assert(std::is_same_v<RightSeq, std::decay_t<RightSeq>>,\n                  \"Mapped sequences may not be captured implicitly by reference.\");\n\n    static_assert(std::is_same_v<MapFn, std::decay_t<MapFn>>,\n                  \"Mapping functions may not be captured implicitly by reference.\");\n\n    return MapPairwise<LeftSeq, RightSeq, MapFn>{BATT_FORWARD(left), BATT_FORWARD(binder.right),\n                                                 BATT_FORWARD(binder.map_fn)};\n}\n\n}  // namespace seq\n}  // namespace batt\n\n#endif  // BATTERIES_SEQ_MAP_PAIRWISE_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::MapPairwise",
      "kind": "class",
      "language": "cpp",
      "name": "batt::seq::MapPairwise",
      "refid": "classbatt_1_1seq_1_1MapPairwise",
      "title": "batt::seq::MapPairwise",
      "url": "/_autogen/Classes/classbatt_1_1seq_1_1MapPairwise/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::MapPairwiseBinder",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::seq::MapPairwiseBinder",
      "refid": "structbatt_1_1seq_1_1MapPairwiseBinder",
      "title": "batt::seq::MapPairwiseBinder",
      "url": "/_autogen/Classes/structbatt_1_1seq_1_1MapPairwiseBinder/",
      "visibility": "public"
    }
  ],
  "refid": "map__pairwise_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/seq/map_pairwise.hpp",
  "url": "/_autogen/Files/map__pairwise_8hpp/#file-map-pairwise.hpp",
  "visibility": "public"
}