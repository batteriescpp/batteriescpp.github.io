{
  "abstract": false,
  "anchor": "#file-continuation.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-continuation-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_CONTINUATION_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/continuation.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/async/continuation.hpp",
        "line": 5
      },
      "name": "BATTERIES_ASYNC_CONTINUATION_HPP",
      "override": false,
      "refid": "continuation_8hpp_1a47c3c4f2d301cfb29d262df471c4cfdf",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_CONTINUATION_HPP",
      "url": "/_autogen/Files/continuation_8hpp/#define-batteries-async-continuation-hpp",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-boost-use-valgrind",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BOOST_USE_VALGRIND",
      "hasDetails": false,
      "initializer": "1",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/continuation.hpp",
        "bodyStart": 16,
        "column": 9,
        "file": "batteries/async/continuation.hpp",
        "line": 16
      },
      "name": "BOOST_USE_VALGRIND",
      "override": false,
      "refid": "continuation_8hpp_1ade81b9a4aeaaedad8c1a56aac3e7da37",
      "static": false,
      "strong": false,
      "title": "BOOST_USE_VALGRIND",
      "url": "/_autogen/Files/continuation_8hpp/#define-boost-use-valgrind",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/continuation.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/continuation.hpp",
    "line": 0
  },
  "name": "batteries/async/continuation.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_CONTINUATION_HPP\n#define BATTERIES_ASYNC_CONTINUATION_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/math.hpp>\n#include <batteries/static_assert.hpp>\n#include <batteries/static_dispatch.hpp>\n#include <batteries/strong_typedef.hpp>\n#include <batteries/type_traits.hpp>\n\n#ifndef NDEBUG\n#define BOOST_USE_VALGRIND 1\n#endif\n\n#include <boost/context/continuation.hpp>\n#include <boost/context/fixedsize_stack.hpp>\n#include <boost/context/pooled_fixedsize_stack.hpp>\n#include <boost/context/protected_fixedsize_stack.hpp>\n#include <boost/smart_ptr/intrusive_ref_counter.hpp>\n\n#include <array>\n\nnamespace batt {\n\nusing Continuation = boost::context::continuation;\n\nclass AbstractStackAllocator : public boost::intrusive_ref_counter<AbstractStackAllocator>\n{\n   public:\n    AbstractStackAllocator(const AbstractStackAllocator&) = delete;\n    AbstractStackAllocator& operator=(const AbstractStackAllocator&) = delete;\n\n    virtual ~AbstractStackAllocator() = default;\n\n    virtual boost::context::stack_context allocate() = 0;\n\n    virtual void deallocate(boost::context::stack_context&) = 0;\n\n   protected:\n    AbstractStackAllocator() = default;\n};\n\ntemplate <typename T>\nclass StackAllocatorImpl : public AbstractStackAllocator\n{\n   public:\n    template <typename... Args, typename = EnableIfNoShadow<StackAllocatorImpl, Args&&...>>\n    explicit StackAllocatorImpl(Args&&... args) : obj_(BATT_FORWARD(args)...)\n    {\n    }\n\n    boost::context::stack_context allocate() override\n    {\n        return this->obj_.allocate();\n    }\n\n    void deallocate(boost::context::stack_context& ctx) override\n    {\n        return this->obj_.deallocate(ctx);\n    }\n\n   private:\n    T obj_;\n};\n\nclass StackAllocator\n{\n   public:\n    StackAllocator() noexcept : impl_{nullptr}\n    {\n    }\n\n    StackAllocator(const StackAllocator&) = default;\n    StackAllocator& operator=(const StackAllocator&) = default;\n\n    template <typename T, typename = EnableIfNoShadow<StackAllocator, T&&>>\n    /*implicit*/ StackAllocator(T&& obj) : impl_{new StackAllocatorImpl<std::decay_t<T>>(BATT_FORWARD(obj))}\n    {\n    }\n\n    template <typename T, typename = EnableIfNoShadow<StackAllocator, T&&>>\n    StackAllocator& operator=(T&& obj)\n    {\n        this->impl_.reset(new StackAllocatorImpl<std::decay_t<T>>(BATT_FORWARD(obj)));\n        return *this;\n    }\n\n    boost::context::stack_context allocate() const\n    {\n        return this->impl_->allocate();\n    }\n\n    void deallocate(boost::context::stack_context& ctx) const\n    {\n        return this->impl_->deallocate(ctx);\n    }\n\n   private:\n    boost::intrusive_ptr<AbstractStackAllocator> impl_;\n};\n\n#ifdef BOOST_USE_VALGRIND\nBATT_STATIC_ASSERT_EQ(sizeof(void*) * 3, sizeof(boost::context::stack_context));\n#else\nBATT_STATIC_ASSERT_EQ(sizeof(void*) * 2, sizeof(boost::context::stack_context));\n#endif\n\nenum struct StackType {\n    kFixedSize = 0,\n    kProtectedFixedSize = 1,\n    kPooledFixedSize = 2,\n    kMaxValue,\n};\n\nBATT_STRONG_TYPEDEF(usize, StackSize);\n\nconstexpr usize kMinStackSizeLog2 = 10u;\nconstexpr usize kMaxStackSizeLog2 = 32u;\n\ntemplate <typename T>\ninline const StackAllocator& get_stack_allocator_with_type(StackSize stack_size)\n{\n    static const std::array<StackAllocator, kMaxStackSizeLog2> instance = [] {\n        std::array<StackAllocator, kMaxStackSizeLog2> a;\n        usize z = 1;\n        for (usize i = 0; i < a.size(); ++i) {\n            if (i >= kMinStackSizeLog2) {\n                BATT_CHECK_EQ(z, usize{1} << i);\n                a[i] = T{usize{1} << i};\n            }\n            z *= 2;\n        }\n        return a;\n    }();\n\n    const usize n = std::max<usize>(kMinStackSizeLog2, log2_ceil(stack_size));\n    BATT_CHECK_GE(n, kMinStackSizeLog2);\n    BATT_CHECK_LT(n, instance.size());\n    BATT_CHECK_GE(usize{1} << n, stack_size);\n    return instance[n];\n}\n\ninline const StackAllocator& get_stack_allocator(StackSize stack_size, StackType stack_type)\n{\n    switch (stack_type) {\n    case StackType::kFixedSize:\n        return get_stack_allocator_with_type<boost::context::fixedsize_stack>(stack_size);\n\n    case StackType::kProtectedFixedSize:\n        return get_stack_allocator_with_type<boost::context::protected_fixedsize_stack>(stack_size);\n\n    case StackType::kPooledFixedSize:\n        BATT_PANIC() << \"This stack allocator type is not thread-safe; do not use yet!\";\n        return get_stack_allocator_with_type<boost::context::pooled_fixedsize_stack>(stack_size);\n\n    case StackType::kMaxValue:  // fall-through\n    default:\n        break;\n    }\n    BATT_PANIC() << \"Bad stack type: \" << static_cast<int>(stack_type);\n    BATT_UNREACHABLE();\n}\n\ntemplate <typename Fn>\ninline Continuation callcc(StackSize stack_size, StackType stack_type, Fn&& fn)\n{\n    return boost::context::callcc(std::allocator_arg, get_stack_allocator(stack_size, stack_type),\n                                  BATT_FORWARD(fn));\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_CONTINUATION_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "boost::intrusive_ref_counter< AbstractStackAllocator >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "derivedClasses": [
        {
          "external": false,
          "name": "batt::StackAllocatorImpl< T >",
          "refid": "classbatt_1_1StackAllocatorImpl",
          "url": "/_autogen/Classes/classbatt_1_1StackAllocatorImpl/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "fullname": "batt::AbstractStackAllocator",
      "kind": "class",
      "language": "cpp",
      "name": "batt::AbstractStackAllocator",
      "refid": "classbatt_1_1AbstractStackAllocator",
      "title": "batt::AbstractStackAllocator",
      "url": "/_autogen/Classes/classbatt_1_1AbstractStackAllocator/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::AbstractStackAllocator",
          "refid": "classbatt_1_1AbstractStackAllocator",
          "url": "/_autogen/Classes/classbatt_1_1AbstractStackAllocator/",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": true,
          "name": "boost::intrusive_ref_counter< AbstractStackAllocator >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::StackAllocatorImpl",
      "kind": "class",
      "language": "cpp",
      "name": "batt::StackAllocatorImpl",
      "refid": "classbatt_1_1StackAllocatorImpl",
      "title": "batt::StackAllocatorImpl",
      "url": "/_autogen/Classes/classbatt_1_1StackAllocatorImpl/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::StackAllocator",
      "kind": "class",
      "language": "cpp",
      "name": "batt::StackAllocator",
      "refid": "classbatt_1_1StackAllocator",
      "title": "batt::StackAllocator",
      "url": "/_autogen/Classes/classbatt_1_1StackAllocator/",
      "visibility": "public"
    }
  ],
  "refid": "continuation_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/continuation.hpp",
  "url": "/_autogen/Files/continuation_8hpp/#file-continuation.hpp",
  "visibility": "public"
}