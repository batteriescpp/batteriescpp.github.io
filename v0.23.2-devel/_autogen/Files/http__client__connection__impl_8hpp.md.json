{
  "abstract": false,
  "anchor": "#file-http-client-connection-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-http-http-client-connection-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_HTTP_HTTP_CLIENT_CONNECTION_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/http/http_client_connection_impl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/http/http_client_connection_impl.hpp",
        "line": 6
      },
      "name": "BATTERIES_HTTP_HTTP_CLIENT_CONNECTION_IMPL_HPP",
      "override": false,
      "refid": "http__client__connection__impl_8hpp_1a4081232166f66d35216dab0602525a96",
      "static": false,
      "strong": false,
      "title": "BATTERIES_HTTP_HTTP_CLIENT_CONNECTION_IMPL_HPP",
      "url": "/_autogen/Files/http__client__connection__impl_8hpp/#define-batteries-http-http-client-connection-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/http/http_client_connection_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/http/http_client_connection_impl.hpp",
    "line": 0
  },
  "name": "batteries/http/http_client_connection_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/http",
    "category": "dirs",
    "fullname": "batteries/http",
    "kind": "dir",
    "language": "",
    "name": "batteries/http",
    "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
    "title": "batteries/http",
    "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/http",
      "category": "dirs",
      "fullname": "batteries/http",
      "kind": "dir",
      "language": "",
      "name": "batteries/http",
      "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
      "title": "batteries/http",
      "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_HTTP_HTTP_CLIENT_CONNECTION_IMPL_HPP\n#define BATTERIES_HTTP_HTTP_CLIENT_CONNECTION_IMPL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/http/http_chunk_decoder.hpp>\n#include <batteries/http/http_client_connection.hpp>\n#include <batteries/http/http_client_host_context.hpp>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL /*explicit*/ HttpClientConnection::HttpClientConnection(\n    HttpClientHostContext& context) noexcept\n    : context_{context}\n    , socket_{this->context_.get_io_context()}\n{\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL boost::asio::io_context& HttpClientConnection::get_io_context()\n{\n    return this->context_.get_io_context();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void HttpClientConnection::start()\n{\n    this->task_.emplace(this->get_io_context().get_executor(), [this] {\n        auto executor = Task::current().get_executor();\n\n        Task process_requests_task{executor, [this] {\n                                       this->process_requests().IgnoreError();\n                                   }};\n\n        Task process_responses_task{executor, [this] {\n                                        this->process_responses().IgnoreError();\n                                    }};\n\n        process_requests_task.join();\n        process_responses_task.join();\n    });\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Status HttpClientConnection::open_connection()\n{\n    StatusOr<SmallVec<boost::asio::ip::tcp::endpoint>> hosts =\n        await_resolve(this->get_io_context(), this->context_.host_address());\n    BATT_REQUIRE_OK(hosts);\n\n    for (const boost::asio::ip::tcp::endpoint& endpoint : *hosts) {\n        ErrorCode ec = Task::await_connect(this->socket_, endpoint);\n        if (!ec) {\n            return OkStatus();\n        }\n    }\n\n    return StatusCode::kUnavailable;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Status HttpClientConnection::process_requests()\n{\n    Optional<Task> fill_input_buffer_task;\n\n    auto on_exit = finally([this, &fill_input_buffer_task] {\n        boost::system::error_code ec;\n        this->socket_.shutdown(boost::asio::socket_base::shutdown_send, ec);\n        this->response_queue_.close();\n\n        if (fill_input_buffer_task) {\n            fill_input_buffer_task->join();\n        }\n    });\n\n    bool connected = false;\n\n    for (;;) {\n        Pin<HttpRequest> request;\n        Pin<HttpResponse> response;\n\n        BATT_ASSIGN_OK_RESULT(std::tie(request, response), this->context_.await_next_request());\n\n        BATT_CHECK_NOT_NULLPTR(request);\n        BATT_CHECK_NOT_NULLPTR(response);\n        BATT_CHECK_EQ(request->state().get_value(), HttpRequest::kInitialized);\n\n        if (!connected) {\n            Status status = this->open_connection();\n            if (!status.ok()) {\n                request->update_status(status);\n                request->state().close();\n            }\n            BATT_REQUIRE_OK(status);\n            connected = true;\n\n            fill_input_buffer_task.emplace(Task::current().get_executor(), [this] {\n                this->fill_input_buffer().IgnoreError();\n            });\n        }\n\n        this->response_queue_.push(response);\n\n        Status status = request->serialize(this->socket_);\n        BATT_REQUIRE_OK(status);\n\n        request->state().set_value(HttpRequest::kConsumed);\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Status HttpClientConnection::fill_input_buffer()\n{\n    auto on_exit = finally([this] {\n        this->input_buffer_.close_for_write();\n    });\n\n    for (;;) {\n        // Allocate some space in the input buffer for incoming data.\n        //\n        StatusOr<SmallVec<MutableBuffer, 2>> buffer = this->input_buffer_.prepare_at_least(1);\n        BATT_REQUIRE_OK(buffer);\n\n        // Read data from the socket into the buffer.\n        //\n        auto n_read = Task::await<IOResult<usize>>([&](auto&& handler) {\n            this->socket_.async_read_some(*buffer, BATT_FORWARD(handler));\n        });\n        BATT_REQUIRE_OK(n_read);\n\n        // Assuming we were successful, commit the read data so it can be consumed by the parser task.\n        //\n        this->input_buffer_.commit(*n_read);\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Status HttpClientConnection::process_responses()\n{\n    auto on_exit = finally([this] {\n        this->input_buffer_.close_for_read();\n    });\n\n    for (;;) {\n        BATT_ASSIGN_OK_RESULT(Pin<HttpResponse> const response, this->response_queue_.await_next());\n        BATT_CHECK_NOT_NULLPTR(response);\n\n        pico_http::Response response_message;\n        StatusOr<i32> message_length = this->read_next_response(response_message);\n        BATT_REQUIRE_OK(message_length);\n\n        ResponseInfo response_info(response_message);\n        if (!response_info.is_valid()) {\n            response->update_status(StatusCode::kInvalidArgument);\n            response->state().close();\n            return StatusCode::kInvalidArgument;\n        }\n\n        response->state().set_value(HttpResponse::kInitialized);\n\n        // Pass control over to the consumer and wait for it to signal it is done reading the message headers.\n        //\n        Status message_consumed = response->await_set_message(response_message);\n        BATT_REQUIRE_OK(message_consumed);\n\n        // The consume is done with the message; consume it and move on to the body.\n        //\n        this->input_buffer_.consume(*message_length);\n\n        HttpData response_data{response_info.get_data(this->input_buffer_)};\n        response->await_set_data(response_data).IgnoreError();\n        //\n        // We must not touch `response` after `await_set_data` returns!\n\n        // If we are going to keep the connection alive, we must consume any extra data that wasn't read by\n        // the application.  Otherwise we just close it.\n        //\n        if (response_info.keep_alive) {\n            Status data_consumed = std::move(response_data) | seq::consume();\n            BATT_REQUIRE_OK(data_consumed);\n        } else {\n            boost::system::error_code ec;\n            this->socket_.close(ec);\n            return OkStatus();\n        }\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL StatusOr<i32> HttpClientConnection::read_next_response(pico_http::Response& response)\n{\n    i32 result = 0;\n    usize min_to_fetch = 1;\n    for (;;) {\n        StatusOr<SmallVec<ConstBuffer, 2>> fetched = this->input_buffer_.fetch_at_least(min_to_fetch);\n        BATT_REQUIRE_OK(fetched);\n\n        auto& buffers = *fetched;\n        const usize n_bytes_fetched = boost::asio::buffer_size(buffers);\n\n        BATT_CHECK(!buffers.empty());\n        result = response.parse(buffers.front());\n\n        if (result == pico_http::kParseIncomplete) {\n            min_to_fetch = std::max(min_to_fetch + 1, n_bytes_fetched);\n            continue;\n        }\n\n        if (result == pico_http::kParseFailed) {\n            return {StatusCode::kInternal};\n        }\n\n        BATT_CHECK_GT(result, 0);\n        return result;\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void HttpClientConnection::join()\n{\n    if (this->task_) {\n        this->task_->join();\n        this->task_ = None;\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nHttpClientConnection::ResponseInfo::ResponseInfo(const pico_http::Response& response)\n    : content_length{find_header(response.headers, \"Content-Length\").flat_map([](std::string_view s) {\n        return Optional{from_string<usize>(std::string(s))};\n    })}\n    , keep_alive{find_header(response.headers, \"Connection\")\n                     .map([](std::string_view s) {\n                         return s == \"keep-alive\";\n                     })\n                     .value_or(response.major_version == 1 && response.minor_version >= 1)}\n    , chunked_encoding{find_header(response.headers, \"Transfer-Encoding\")\n                           .map([](std::string_view s) {\n                               return s == \"chunked\";\n                           })\n                           .value_or(false)}\n\n{\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nHttpData HttpClientConnection::ResponseInfo::get_data(StreamBuffer& input_buffer)\n{\n    return HttpData{[&]() -> BufferSource {\n        if (this->content_length == None) {\n            if (this->chunked_encoding) {\n                return HttpChunkDecoder<StreamBuffer&>{input_buffer};\n            } else {\n                if (this->keep_alive) {\n                    return BufferSource{};\n                } else {\n                    return std::ref(input_buffer);\n                }\n            }\n        } else {\n            if (this->chunked_encoding) {\n                return HttpChunkDecoder<StreamBuffer&>{input_buffer} | seq::take_n(*this->content_length);\n            } else {\n                return input_buffer | seq::take_n(*this->content_length);\n            }\n        }\n    }()};\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_HTTP_HTTP_CLIENT_CONNECTION_IMPL_HPP",
  "refid": "http__client__connection__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/http/http_client_connection_impl.hpp",
  "url": "/_autogen/Files/http__client__connection__impl_8hpp/#file-http-client-connection-impl.hpp",
  "visibility": "public"
}