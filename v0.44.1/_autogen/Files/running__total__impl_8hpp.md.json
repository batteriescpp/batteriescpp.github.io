{
  "abstract": false,
  "anchor": "#file-running-total-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-algo-running-total-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ALGO_RUNNING_TOTAL_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/algo/running_total_impl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/algo/running_total_impl.hpp",
        "line": 6
      },
      "name": "BATTERIES_ALGO_RUNNING_TOTAL_IMPL_HPP",
      "override": false,
      "refid": "running__total__impl_8hpp_1a3096a00b695d80cff90a9a356a71bcb6",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ALGO_RUNNING_TOTAL_IMPL_HPP",
      "url": "/_autogen/Files/running__total__impl_8hpp/#define-batteries-algo-running-total-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/algo/running_total_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/algo/running_total_impl.hpp",
    "line": 0
  },
  "name": "batteries/algo/running_total_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/algo",
    "category": "dirs",
    "fullname": "batteries/algo",
    "kind": "dir",
    "language": "",
    "name": "batteries/algo",
    "refid": "dir_23237b2d5d682108d256c42b41036300",
    "title": "batteries/algo",
    "url": "/_autogen/Files/dir_23237b2d5d682108d256c42b41036300/#dir-batteries/algo",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/algo",
      "category": "dirs",
      "fullname": "batteries/algo",
      "kind": "dir",
      "language": "",
      "name": "batteries/algo",
      "refid": "dir_23237b2d5d682108d256c42b41036300",
      "title": "batteries/algo",
      "url": "/_autogen/Files/dir_23237b2d5d682108d256c42b41036300/#dir-batteries/algo",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ALGO_RUNNING_TOTAL_IMPL_HPP\n#define BATTERIES_ALGO_RUNNING_TOTAL_IMPL_HPP\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL /*explicit*/ RunningTotal::RunningTotal(PartsCount count, PartSize size) : values_{nullptr}\n{\n    this->reset(count, size);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL auto RunningTotal::begin() const -> iterator\n{\n    return iterator{this, 0};\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL auto RunningTotal::end() const -> iterator\n{\n    return iterator{this, this->size()};\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL auto RunningTotal::slice(usize begin_index, usize end_index) const -> slice_type\n{\n    BATT_CHECK_LE(begin_index, end_index);\n    return slice_type{\n        std::next(this->begin(), begin_index),  //\n        std::next(this->begin(), end_index)     //\n    };\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL auto RunningTotal::slice(Interval<usize> interval) const -> slice_type\n{\n    return this->slice(interval.lower_bound, interval.upper_bound);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void RunningTotal::reset(PartsCount count, PartSize size)\n{\n    BATT_CHECK_GT(size, 0);\n\n    try {\n        std::swap(this->parts_count_, count);\n        std::swap(this->part_size_, size);\n        this->values_.reset(new usize[this->raw_size()]);\n\n        this->mutable_summary().front() = 0;\n        for (usize i = 0; i < this->parts_count_; ++i) {\n            this->mutable_part(i).front() = 0;\n        }\n\n        this->size_ = this->parts_count_ * this->part_size_ + 1;\n    } catch (...) {\n        std::swap(this->parts_count_, count);\n        std::swap(this->part_size_, size);\n        throw;\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void RunningTotal::set_size(usize new_size)\n{\n    BATT_CHECK_LE(new_size, this->parts_count_ * this->part_size_ + 1);\n    this->size_ = new_size;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Slice<const usize> RunningTotal::const_part(usize i) const\n{\n    BATT_ASSERT_LT(i, this->parts_count_) << BATT_INSPECT(this->size()) << BATT_INSPECT(this->raw_size());\n\n    return this->const_part_impl(i);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Slice<usize> RunningTotal::mutable_part(usize i)\n{\n    BATT_ASSERT_LT(i, this->parts_count_) << BATT_INSPECT(this->size()) << BATT_INSPECT(this->raw_size());\n\n    return this->raw_slice(this->part_segment_offset(i), this->part_segment_size());\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Slice<const usize> RunningTotal::const_summary() const\n{\n    return this->raw_slice(this->summary_offset(), this->summary_size());\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Slice<usize> RunningTotal::mutable_summary()\n{\n    return this->raw_slice(this->summary_offset(), this->summary_size());\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize RunningTotal::operator[](isize i) const\n{\n    BATT_ASSERT_LT(static_cast<usize>(i), this->size());\n    const isize part_index = i / this->part_size_;\n    const isize part_offset = i % this->part_size_;\n    return this->const_summary()[part_index] + this->const_part_impl(part_index)[part_offset];\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Slice<const usize> RunningTotal::raw_values() const\n{\n    return as_slice(this->values_.get(), this->raw_size());\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL std::function<void(std::ostream&)> RunningTotal::dump() const\n{\n    return [this](std::ostream& out) {\n        out << std::endl\n            << \"RunningTotal{\" << std::endl\n            << \"  .parts_count=\" << this->parts_count_ << \",\" << std::endl\n            << \"  .part_size=\" << this->part_size_ << \",\" << std::endl\n            << \"  .raw_size=\" << this->raw_size() << \",\" << std::endl\n            << \"  .size=\" << this->size() << \",\" << std::endl\n            << \"  .values=\" << dump_range(this->raw_values()) << std::endl\n            << \",}   ==   \" << dump_range(*this);\n    };\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void RunningTotal::update_summary()\n{\n    usize total = 0;\n    usize* next_summary = this->values_.get() + this->summary_offset();\n    BATT_CHECK_EQ(*next_summary, 0u);\n    ++next_summary;\n\n    usize step = this->part_segment_size();\n    usize* next_part_total = this->values_.get() + part_size_;\n    usize* last_part_total = next_part_total + (step * this->parts_count());\n    for (; next_part_total != last_part_total; next_part_total += step, ++next_summary) {\n        total += *next_part_total;\n        *next_summary = total;\n    }\n\n    BATT_CHECK_EQ(next_summary, this->values_.get() + this->raw_size()) << BATT_INSPECT(this->raw_size());\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Slice<const usize> RunningTotal::const_part_impl(usize i) const\n{\n    const usize offset = this->part_segment_offset(i);\n    const usize len = this->part_segment_size();\n    BATT_ASSERT_LT(offset, this->raw_size()) << BATT_INSPECT(offset) << BATT_INSPECT(len);\n    return this->raw_slice(offset, len);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Slice<const usize> RunningTotal::raw_slice(usize offset, usize size) const\n{\n    return as_slice(this->values_.get() + offset, size);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Slice<usize> RunningTotal::raw_slice(usize offset, usize size)\n{\n    return as_slice(this->values_.get() + offset, size);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize RunningTotal::raw_size() const\n{\n    return this->summary_offset() + this->summary_size();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize RunningTotal::part_segment_offset(usize part_i) const\n{\n    return part_i * this->part_segment_size();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize RunningTotal::part_segment_size() const\n{\n    return this->part_size_ + /*leading zero*/ 1;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize RunningTotal::summary_offset() const\n{\n    return this->part_segment_size() * this->parts_count();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize RunningTotal::summary_size() const\n{\n    return this->parts_count() + /*leading zero*/ 1;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize RunningTotal::offset_of_part(usize part_i) const\n{\n    return part_i * this->part_segment_size();\n}\n\n}  //namespace batt\n\n#endif  // BATTERIES_ALGO_RUNNING_TOTAL_IMPL_HPP",
  "refid": "running__total__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/algo/running_total_impl.hpp",
  "url": "/_autogen/Files/running__total__impl_8hpp/#file-running-total-impl.hpp",
  "visibility": "public"
}