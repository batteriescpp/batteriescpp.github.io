{
  "abstract": false,
  "anchor": "#file-http-client-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-http-client-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_HTTP_CLIENT_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/http/http_client_impl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/http/http_client_impl.hpp",
        "line": 6
      },
      "name": "BATTERIES_HTTP_CLIENT_IMPL_HPP",
      "override": false,
      "refid": "http__client__impl_8hpp_1a2522e345e0227e7f0a6d1a3680e21d2a",
      "static": false,
      "strong": false,
      "title": "BATTERIES_HTTP_CLIENT_IMPL_HPP",
      "url": "/_autogen/Files/http__client__impl_8hpp/#define-batteries-http-client-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/http/http_client_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/http/http_client_impl.hpp",
    "line": 0
  },
  "name": "batteries/http/http_client_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/http",
    "category": "dirs",
    "fullname": "batteries/http",
    "kind": "dir",
    "language": "",
    "name": "batteries/http",
    "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
    "title": "batteries/http",
    "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/http",
      "category": "dirs",
      "fullname": "batteries/http",
      "kind": "dir",
      "language": "",
      "name": "batteries/http",
      "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
      "title": "batteries/http",
      "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_HTTP_CLIENT_IMPL_HPP\n#define BATTERIES_HTTP_CLIENT_IMPL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/http/http_client_host_context.hpp>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL /*explicit*/ HttpClient::HttpClient(boost::asio::io_context& io) noexcept\n    : io_{io}\n    , default_max_connections_per_host_{HttpClientHostContext::kDefaultMaxConnections}\n    , default_connection_timeout_ms_{HttpClientHostContext::kDefaultIdleConnectionTimeoutMs}\n    , host_contexts_{}\n{\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Status HttpClient::submit_request(const HostAddress& host_address,\n                                                   Pin<HttpRequest>&& request, Pin<HttpResponse>&& response)\n{\n    BATT_CHECK_NOT_NULLPTR(request);\n    BATT_CHECK_NOT_NULLPTR(response);\n\n    SharedPtr<HttpClientHostContext> host_context = this->find_host_context(host_address);\n    return host_context->submit_request(std::move(request), std::move(response));\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize HttpClient::get_default_max_connections_per_host() const noexcept\n{\n    return this->default_max_connections_per_host_.load();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void HttpClient::set_default_max_connections_per_host(usize max_connections) noexcept\n{\n    this->default_max_connections_per_host_.store(max_connections);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void HttpClient::set_max_connections_per_host(const HostAddress& host_address,\n                                                               usize max_connections) noexcept\n{\n    SharedPtr<HttpClientHostContext> host_context = this->find_host_context(host_address);\n    host_context->set_max_connections(max_connections);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL i32 HttpClient::get_default_connection_timeout_ms() const noexcept\n{\n    return this->default_connection_timeout_ms_.load();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void HttpClient::set_default_connection_timeout_ms(i32 timeout_ms) noexcept\n{\n    this->default_connection_timeout_ms_.store(timeout_ms);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize HttpClient::count_active_connections_for_host(const HostAddress& host_address) noexcept\n{\n    SharedPtr<HttpClientHostContext> host_context =\n        this->find_host_context(host_address, CreateIfNotFound{false});\n\n    if (host_context == nullptr) {\n        return 0;\n    }\n\n    return host_context->count_active_connections();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize HttpClient::count_active_connections() const noexcept\n{\n    usize total = 0;\n    auto locked_contexts = this->host_contexts_.lock();\n\n    for (auto& [host_addr, p_context] : *locked_contexts) {\n        BATT_CHECK_NOT_NULLPTR(p_context) << BATT_INSPECT(host_addr);\n        total += p_context->count_active_connections();\n    }\n\n    return total;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL SharedPtr<HttpClientHostContext> HttpClient::find_host_context(\n    const HostAddress& host_address, CreateIfNotFound create)\n{\n    auto locked_contexts = this->host_contexts_.lock();\n\n    auto iter = locked_contexts->find(host_address);\n    if (iter == locked_contexts->end()) {\n        if (!create) {\n            return nullptr;\n        }\n        iter = locked_contexts\n                   ->emplace(host_address, make_shared<HttpClientHostContext>(/*client=*/*this, host_address))\n                   .first;\n    }\n    return iter->second;\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_HTTP_CLIENT_IMPL_HPP",
  "refid": "http__client__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/http/http_client_impl.hpp",
  "url": "/_autogen/Files/http__client__impl_8hpp/#file-http-client-impl.hpp",
  "visibility": "public"
}