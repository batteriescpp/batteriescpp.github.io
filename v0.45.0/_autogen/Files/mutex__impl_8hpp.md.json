{
  "abstract": false,
  "anchor": "#file-mutex-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-mutex-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_MUTEX_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/mutex_impl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/mutex_impl.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_MUTEX_IMPL_HPP",
      "override": false,
      "refid": "mutex__impl_8hpp_1a61322f62c1525b9b1145132a039c0f1b",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_MUTEX_IMPL_HPP",
      "url": "/_autogen/Files/mutex__impl_8hpp/#define-batteries-async-mutex-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/mutex_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/mutex_impl.hpp",
    "line": 0
  },
  "name": "batteries/async/mutex_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_MUTEX_IMPL_HPP\n#define BATTERIES_ASYNC_MUTEX_IMPL_HPP\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nstruct LockBase::PerThreadState {\n    using storage_type = std::aligned_storage_t<sizeof(LockBase), alignof(LockBase)>;\n\n    usize n_free_ = 0;\n    std::array<storage_type, kMaxLockDepth> storage_;\n    std::array<void*, kMaxLockDepth> free_stack_;\n\n    //----- --- -- -  -  -   -\n\n    PerThreadState()\n    {\n        for (usize i = 0; i < storage_.size(); ++i) {\n            this->free_stack_[i] = &this->storage_[i];\n        }\n        this->n_free_ = this->storage_.size();\n    }\n\n    PerThreadState(const PerThreadState&) = delete;\n    PerThreadState& operator=(const PerThreadState&) = delete;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL /*static*/ LockBase::PerThreadState& LockBase::per_thread()\n{\n    thread_local PerThreadState state_;\n    return state_;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL /*static*/ LockBase* LockBase::acquire(const MutexBase& mutex)\n{\n    PerThreadState& state = LockBase::per_thread();\n    BATT_CHECK_GT(state.n_free_, 0);\n\n    --state.n_free_;\n\n    return new (state.free_stack_[state.n_free_]) LockBase{mutex};\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL /*static*/ void LockBase::release(LockBase* lock)\n{\n    PerThreadState& state = LockBase::per_thread();\n\n    BATT_CHECK_LT(state.n_free_, kMaxLockDepth)\n        << \"Lock released on a different thread from the one that acquired it!\";\n\n    BATT_CHECK_GE((void*)lock, (void*)(&state.storage_[0]))\n        << \"Lock released on a different thread from the one that acquired it!\";\n\n    BATT_CHECK_LT((void*)lock, (void*)(&state.storage_[kMaxLockDepth]))\n        << \"Lock released on a different thread from the one that acquired it!\";\n\n    state.free_stack_[state.n_free_] = lock;\n    ++state.n_free_;\n\n    lock->~LockBase();\n}\n\n}  //namespace batt\n\n#endif  // BATTERIES_ASYNC_MUTEX_IMPL_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::LockBase::PerThreadState",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::LockBase::PerThreadState",
      "refid": "structbatt_1_1LockBase_1_1PerThreadState",
      "title": "batt::LockBase::PerThreadState",
      "url": "/_autogen/Classes/structbatt_1_1LockBase_1_1PerThreadState/",
      "visibility": "public"
    }
  ],
  "refid": "mutex__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/mutex_impl.hpp",
  "url": "/_autogen/Files/mutex__impl_8hpp/#file-mutex-impl.hpp",
  "visibility": "public"
}