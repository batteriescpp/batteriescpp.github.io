{
  "abstract": false,
  "anchor": "#file-parallel-running-total.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-algo-parallel-running-total-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ALGO_PARALLEL_RUNNING_TOTAL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/algo/parallel_running_total.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/algo/parallel_running_total.hpp",
        "line": 6
      },
      "name": "BATTERIES_ALGO_PARALLEL_RUNNING_TOTAL_HPP",
      "override": false,
      "refid": "parallel__running__total_8hpp_1a26e18cd07f46e9f8e4906d303b84e0e4",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ALGO_PARALLEL_RUNNING_TOTAL_HPP",
      "url": "/_autogen/Files/parallel__running__total_8hpp/#define-batteries-algo-parallel-running-total-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/algo/parallel_running_total.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/algo/running_total.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/algo/parallel_running_total.hpp",
    "line": 0
  },
  "name": "batteries/algo/parallel_running_total.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/algo",
    "category": "dirs",
    "fullname": "batteries/algo",
    "kind": "dir",
    "language": "",
    "name": "batteries/algo",
    "refid": "dir_23237b2d5d682108d256c42b41036300",
    "title": "batteries/algo",
    "url": "/_autogen/Files/dir_23237b2d5d682108d256c42b41036300/#dir-batteries/algo",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/algo",
      "category": "dirs",
      "fullname": "batteries/algo",
      "kind": "dir",
      "language": "",
      "name": "batteries/algo",
      "refid": "dir_23237b2d5d682108d256c42b41036300",
      "title": "batteries/algo",
      "url": "/_autogen/Files/dir_23237b2d5d682108d256c42b41036300/#dir-batteries/algo",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ALGO_PARALLEL_RUNNING_TOTAL_HPP\n#define BATTERIES_ALGO_PARALLEL_RUNNING_TOTAL_HPP\n\n#include <batteries/algo/running_total.hpp>\n\n#include <batteries/async/slice_work.hpp>\n#include <batteries/async/work_context.hpp>\n#include <batteries/async/worker_pool.hpp>\n\n#include <batteries/assert.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/utility.hpp>\n\n#include <iterator>\n#include <type_traits>\n\nnamespace batt {\n\ntemplate <\n    typename Iter, typename Fn,\n    typename ValueT = std::decay_t<std::invoke_result_t<Fn, typename std::iterator_traits<Iter>::reference>>>\nBasicRunningTotal<ValueT> parallel_running_total(WorkerPool& worker_pool, Iter first, Iter last, const Fn& fn,\n                                                 const WorkSliceParams& params);\n\ntemplate <typename Iter, typename ValueT = typename std::iterator_traits<Iter>::value_type>\nBasicRunningTotal<ValueT> parallel_running_total(WorkerPool& worker_pool, Iter first, Iter last,\n                                                 const WorkSliceParams& params);\n\n//#=##=##=#==#=#==#===#+==#+==========+==+=+=+=+=+=++=+++=+++++=-++++=-+++++++++++\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename Iter, typename Fn, typename ValueT>\nBasicRunningTotal<ValueT> parallel_running_total(WorkerPool& worker_pool, Iter first, Iter last, const Fn& fn,\n                                                 const WorkSliceParams& params)\n{\n    static const ValueT zero_value = make_default<ValueT>();\n\n    const WorkSlicePlan plan{params, first, last};\n\n    if (plan.input_size == 0) {\n        return BasicRunningTotal<ValueT>{};\n    }\n\n    BasicRunningTotal<ValueT> running_total{PartsCount{plan.n_tasks}, PartSize{plan.task_size}};\n    running_total.set_size(plan.input_size + 1u);\n    {\n        ScopedWorkContext context{worker_pool};\n\n        BATT_CHECK_OK(slice_work(\n            context, plan,\n            [&running_total, &first, &fn, &plan](TaskIndex task_index, TaskOffset task_offset,\n                                                 TaskSize task_size) {\n                return [&running_total, &fn, task_index, src_begin = std::next(first, task_offset), task_size,\n                        &plan] {\n                    auto src_end = std::next(src_begin, task_size);\n\n                    auto dst = running_total.mutable_part(task_index);\n                    auto dst_iter = dst.begin();\n                    ValueT part_total = zero_value;\n\n                    if (task_index + 1 < plan.n_tasks) {\n                        BATT_CHECK_EQ(dst.size(), static_cast<usize>(std::distance(src_begin, src_end)) + 1u)\n                            << BATT_INSPECT(task_index) << BATT_INSPECT(plan);\n                    }\n                    BATT_CHECK_EQ(*dst_iter, zero_value);\n                    ++dst_iter;\n\n                    std::for_each(src_begin, src_end, [&](const auto& item) {\n                        part_total += fn(item);\n                        *dst_iter = part_total;\n                        ++dst_iter;\n                    });\n\n                    // Fill to the end with the last value.\n                    //\n                    std::fill(dst_iter, dst.end(), part_total);\n                };\n            }))\n            << \"worker_pool must not be closed!\";\n    }\n\n    // Finally, calculate the running total of part totals.\n    //\n    running_total.update_summary();\n\n    return running_total;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename Iter, typename ValueT>\nBasicRunningTotal<ValueT> parallel_running_total(WorkerPool& worker_pool, Iter first, Iter last,\n                                                 const WorkSliceParams& params)\n{\n    return parallel_running_total(\n        worker_pool, first, last, /*fn=*/\n        [](auto&& value) -> decltype(auto) {\n            return BATT_FORWARD(value);\n        },\n        params);\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ALGO_PARALLEL_RUNNING_TOTAL_HPP",
  "refid": "parallel__running__total_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/algo/parallel_running_total.hpp",
  "url": "/_autogen/Files/parallel__running__total_8hpp/#file-parallel-running-total.hpp",
  "visibility": "public"
}