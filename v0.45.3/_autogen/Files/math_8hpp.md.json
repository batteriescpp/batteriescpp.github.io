{
  "abstract": false,
  "anchor": "#file-math.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-math-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_MATH_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/math.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/math.hpp",
        "line": 5
      },
      "name": "BATTERIES_MATH_HPP",
      "override": false,
      "refid": "math_8hpp_1afdf6c67249ec98e44811c35e2c5f4d36",
      "static": false,
      "strong": false,
      "title": "BATTERIES_MATH_HPP",
      "url": "/_autogen/Files/math_8hpp/#define-batteries-math-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/math.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/math.hpp",
    "line": 0
  },
  "name": "batteries/math.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_MATH_HPP\n#define BATTERIES_MATH_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/int_types.hpp>\n\n#include <type_traits>\n\n\n#ifdef _MSC_VER\n#include <intrin.h>\n#define __builtin_clzll _lzcnt_u64\n#endif\n\nnamespace batt {\n\ninline constexpr i32 log2_ceil(u64 i)\n{\n    return (i <= 1) ? 0 : (64 - (i32)__builtin_clzll(i - 1));\n}\ninline constexpr i32 log2_floor(u64 i)\n{\n    return (i == 0) ? 0 : (63 - (i32)__builtin_clzll(i));\n}\n\n// lsb_mask - Least Significant Bits Mask\n//\n// Returns a value of type IntT with `bits` ones as the least significant bits, and zeros for all other bits.\n//\ntemplate <typename IntT>\ninline constexpr IntT lsb_mask(i32 bits)\n{\n    return ((IntT{1} << bits) - 1);\n}\n\n// round_down_bits - round an integer value down to the nearest multiple of 2^bits.  For example,\n// round_down_bits(8, n) will round n down to the nearest multiple of 256; if n is already a multiple of 256,\n// it will return n.\n//\ntemplate <typename IntT>\ninline constexpr IntT round_down_bits(i32 bits, IntT n)\n{\n    return n & ~lsb_mask<IntT>(bits);\n}\n\n// round_up_bits - round an integer value up to the nearest multiple of 2^bits.  For example,\n// round_up_bits(8, n) will round n up to the nearest multiple of 256; if n is already a multiple of 256, it\n// will return n.\n//\ntemplate <typename IntT>\ninline constexpr IntT round_up_bits(i32 bits, IntT n)\n{\n    return round_down_bits(bits, n + lsb_mask<IntT>(bits));\n}\n\ntemplate <typename IntT>\ninline constexpr IntT round_down_to(IntT unit, IntT n)\n{\n    return n - (n % unit);\n}\n\ntemplate <typename IntT>\ninline constexpr IntT round_up_to(IntT unit, IntT n)\n{\n    return round_down_to(unit, n + (unit - 1));\n}\n\n// Compile-time integer exponentiation.\n//\ntemplate <typename IntT>\ninline constexpr IntT ipow(IntT base, IntT exponent, IntT accumulator = static_cast<IntT>(1))\n{\n    static_assert(std::is_integral_v<IntT>, \"batt::ipow may only be used with integral types.\");\n    return (exponent > 0) ? ipow(base, exponent - 1, accumulator * base) : accumulator;\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_MATH_HPP",
  "refid": "math_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/math.hpp",
  "url": "/_autogen/Files/math_8hpp/#file-math.hpp",
  "visibility": "public"
}