{
  "abstract": false,
  "anchor": "#file-rate-limiter.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-rate-limiter-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_RATE_LIMITER_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/rate_limiter.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/rate_limiter.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_RATE_LIMITER_HPP",
      "override": false,
      "refid": "rate__limiter_8hpp_1a3f1370a238f20da26c43eb9424e63e88",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_RATE_LIMITER_HPP",
      "url": "/_autogen/Files/rate__limiter_8hpp/#define-batteries-async-rate-limiter-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/rate_limiter.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/rate_limiter.hpp",
    "line": 0
  },
  "name": "batteries/async/rate_limiter.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_RATE_LIMITER_HPP\n#define BATTERIES_ASYNC_RATE_LIMITER_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/assert.hpp>\n#include <batteries/int_types.hpp>\n\n#include <algorithm>\n#include <chrono>\n\nnamespace batt {\n\ntemplate <typename Clock>\nclass BasicRateLimiter\n{\n   public:\n    // `rate` - the limit rate in operations per second\n    // `burst` - the number of \"unspent\" operations we allow to accumulate for immediate consumption;\n    // 1 means there is no burst capability, >1 means that a client can temporarily perform up to\n    // `burst` operations immediately, assuming there is enough time in the past to cover those ops.\n    //\n    explicit BasicRateLimiter(double rate, i64 burst = 1) noexcept : rate_{rate}, burst_{burst}\n    {\n    }\n\n    // Performs a non-blocking check to see whether enough time has elapsed for us to consume one\n    // count.  If so, consume the count and return true, else return false.\n    //\n    bool poll()\n    {\n        const i64 current_upper_bound = this->get_current_upper_bound();\n\n        if (current_upper_bound - this->count_ > this->burst_) {\n            this->count_ = current_upper_bound - this->burst_;\n        }\n\n        if (this->count_ == current_upper_bound) {\n            return false;\n        }\n        this->count_ += 1;\n\n        BATT_CHECK_LE(this->count_, current_upper_bound);\n\n        return true;\n    }\n\n    // Returns the amount of accumulated count available for consumption.\n    //\n    i64 available() const\n    {\n        return std::clamp<i64>(this->get_current_upper_bound() - this->count_, 0, this->burst_);\n    }\n\n    // How many seconds until the next allowed operation.  May return a negative value if `poll()` will return\n    // `true`.\n    //\n    double time_remaining_sec() const\n    {\n        return static_cast<double>(this->count_ + 1) / this->rate_ - this->elapsed_sec();\n    }\n\n    // The total elapsed time since this object was created, in microseconds.\n    //\n    double elapsed_usec() const\n    {\n        return static_cast<double>(std::max<i64>(\n            0, std::chrono::duration_cast<std::chrono::microseconds>(Clock::now() - this->start_).count()));\n    }\n\n    // The total elapsed time since this object was created, in seconds.\n    //\n    double elapsed_sec() const\n    {\n        return this->elapsed_usec() / double{1000.0 * 1000.0};\n    }\n\n    // The minimum allowed amortized time between operations.\n    //\n    double period_sec() const\n    {\n        return double{1.0} / this->rate_;\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n   private:\n    i64 get_current_upper_bound() const\n    {\n        return static_cast<i64>(this->elapsed_sec() * this->rate_);\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    // The creation time of this object.\n    //\n    typename Clock::time_point start_ = Clock::now();\n\n    // The number of operations performed (i.e., the number of times `poll()` returned 1).\n    //\n    i64 count_ = 0;\n\n    // The number of allowed _amortized_ operations per second.\n    //\n    double rate_;\n\n    // The maximum amortization factor -- how many operations can be performed immediately if we wait\n    // for `burst_ * rate_` seconds.\n    //\n    i64 burst_;\n};\n\nusing RateLimiter = BasicRateLimiter<std::chrono::steady_clock>;\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_RATE_LIMITER_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::BasicRateLimiter",
      "kind": "class",
      "language": "cpp",
      "name": "batt::BasicRateLimiter",
      "refid": "classbatt_1_1BasicRateLimiter",
      "title": "batt::BasicRateLimiter",
      "url": "/_autogen/Classes/classbatt_1_1BasicRateLimiter/",
      "visibility": "public"
    }
  ],
  "refid": "rate__limiter_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/rate_limiter.hpp",
  "url": "/_autogen/Files/rate__limiter_8hpp/#file-rate-limiter.hpp",
  "visibility": "public"
}