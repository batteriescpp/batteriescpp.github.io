{
  "abstract": false,
  "anchor": "#file-stochastic-model-checker.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-state-machine-model-stochastic-model-checker-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_STATE_MACHINE_MODEL_STOCHASTIC_MODEL_CHECKER_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/state_machine_model/stochastic_model_checker.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/state_machine_model/stochastic_model_checker.hpp",
        "line": 6
      },
      "name": "BATTERIES_STATE_MACHINE_MODEL_STOCHASTIC_MODEL_CHECKER_HPP",
      "override": false,
      "refid": "stochastic__model__checker_8hpp_1a84f8c387bb39ebcc1a6eaf67034b4ee5",
      "static": false,
      "strong": false,
      "title": "BATTERIES_STATE_MACHINE_MODEL_STOCHASTIC_MODEL_CHECKER_HPP",
      "url": "/_autogen/Files/stochastic__model__checker_8hpp/#define-batteries-state-machine-model-stochastic-model-checker-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/state_machine_model/stochastic_model_checker.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/state_machine_model/stochastic_model_checker.hpp",
    "line": 0
  },
  "name": "batteries/state_machine_model/stochastic_model_checker.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/state-machine-model",
    "category": "dirs",
    "fullname": "batteries/state_machine_model",
    "kind": "dir",
    "language": "",
    "name": "batteries/state_machine_model",
    "refid": "dir_a632bc4ac9c412aedbec832ef7391aeb",
    "title": "batteries/state_machine_model",
    "url": "/_autogen/Files/dir_a632bc4ac9c412aedbec832ef7391aeb/#dir-batteries/state-machine-model",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/state-machine-model",
      "category": "dirs",
      "fullname": "batteries/state_machine_model",
      "kind": "dir",
      "language": "",
      "name": "batteries/state_machine_model",
      "refid": "dir_a632bc4ac9c412aedbec832ef7391aeb",
      "title": "batteries/state_machine_model",
      "url": "/_autogen/Files/dir_a632bc4ac9c412aedbec832ef7391aeb/#dir-batteries/state-machine-model",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_STATE_MACHINE_MODEL_STOCHASTIC_MODEL_CHECKER_HPP\n#define BATTERIES_STATE_MACHINE_MODEL_STOCHASTIC_MODEL_CHECKER_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/state_machine_model/parallel_model_check_state.hpp>\n#include <batteries/state_machine_model/verbose.hpp>\n\n#include <chrono>\n#include <random>\n\nnamespace batt {\n\ntemplate <typename ModelT>\nclass StochasticModelChecker\n{\n   public:\n    using Branch = typename ModelT::Branch;\n    using BranchDelta = typename Branch::delta_type;\n    using VisitResult = typename ModelT::VisitResult;\n\n    explicit StochasticModelChecker(typename ModelT::Base& model,\n                                    detail::ParallelModelCheckState<Branch>& mesh, usize shard_i) noexcept\n        : model_{model}\n        , n_shards_{mesh.shard_count}\n        , shard_i_{shard_i}\n        , starting_seed_{model.advanced_options().starting_seed.value_or(shard_i)}\n    {\n        this->model_.set_entropy(StateMachineEntropySource{[this](usize min_value, usize max_value) -> usize {\n            if (min_value == max_value) {\n                return min_value;\n            }\n            BATT_CHECK_LT(min_value, max_value);\n\n            std::uniform_int_distribution<usize> pick_random_value{min_value, max_value};\n            const usize value = pick_random_value(this->rng_);\n            const usize radix = max_value - min_value + 1;\n            this->branch_delta_.push(radix, value - min_value);\n\n            return value;\n        }});\n    }\n\n    ~StochasticModelChecker() noexcept\n    {\n    }\n\n    StateMachineResult run()\n    {\n        auto start_time = std::chrono::steady_clock::now();\n\n        const i64 min_running_time_ms = this->model_.advanced_options().min_running_time_ms;\n\n        auto running_time_sufficient = [&] {\n            const auto elapsed_ms = std::chrono::duration_cast<std::chrono::milliseconds>(\n                                        std::chrono::steady_clock::now() - start_time)\n                                        .count();\n            BATT_STATE_MACHINE_VERBOSE() << BATT_INSPECT(elapsed_ms);\n            return elapsed_ms >= min_running_time_ms;\n        };\n\n        usize seed = this->starting_seed_;\n        this->rng_.seed(seed);\n\n        StateMachineResult result;\n        result.start_time = start_time;\n        result.ok = true;\n\n        const auto initial_state = this->model_.normalize(this->model_.initialize());\n        auto current_state = initial_state;\n\n        this->model_.visit(initial_state, /*src_branch=*/Branch{\n                               .snapshot = initial_state,\n                               .delta = BranchDelta{},\n                           });\n        result.state_count += 1;\n\n        // We keep exploring random states until we reach the minimum time limit.\n        //\n        while (!running_time_sufficient()) {\n            // Tell the model we are entering the current state.\n            //\n            this->model_.enter_state(current_state);\n            this->branch_delta_ = BranchDelta{};\n            BATT_CHECK(this->branch_delta_.empty());\n\n            // Step the model.\n            //\n            this->model_.step();\n\n            // Make sure invariants are OK.\n            //\n            if (!this->model_.check_invariants()) {\n                result.seed = seed;\n                result.ok = false;\n                break;\n            }\n\n            // Retrieve the next state.\n            //\n            const auto next_state = this->model_.normalize(this->model_.leave_state());\n\n            // If this state is novel, record that fact.\n            //\n            if (this->model_.visit(next_state, /*src_branch=*/Branch{\n                                       .snapshot = current_state,\n                                       .delta = this->branch_delta_,\n                                   }) == VisitResult::kFirstTime) {\n                BATT_STATE_MACHINE_VERBOSE()\n                    << BATT_INSPECT(this->n_shards_) << BATT_INSPECT(min_running_time_ms)\n                    << BATT_INSPECT(seed) << BATT_INSPECT(make_printable(next_state));\n                result.state_count += 1;\n            }\n\n            // If the current state is terminal (i.e., the branch delta is empty), then go back to the initial\n            // state and continue with a new seed value.\n            //\n            const bool terminal_state_reached =\n                (this->branch_delta_ == BranchDelta{}) || (current_state == next_state);\n\n            BATT_CHECK_EQ(this->branch_delta_ == BranchDelta{}, this->branch_delta_.empty());\n            BATT_CHECK_IMPLIES(this->branch_delta_.empty(), current_state == next_state)\n                << BATT_INSPECT(make_printable(next_state)) << BATT_INSPECT(make_printable(current_state));\n\n            if (terminal_state_reached) {\n                current_state = initial_state;\n                seed += this->n_shards_;\n                this->rng_.seed(seed);\n            } else {\n                current_state = next_state;\n                result.branch_push_count += 1;\n                result.branch_pop_count += 1;\n                result.self_branch_count += 1;\n            }\n        }\n\n        result.update_elapsed_time();\n\n        return result;\n    }\n\n   private:\n    typename ModelT::Base& model_;\n\n    usize n_shards_;\n    usize shard_i_;\n    usize starting_seed_;\n    BranchDelta branch_delta_;\n\n    std::default_random_engine rng_{(u32)this->shard_i_};\n};\n\n}  // namespace batt\n\n#endif  // BATTERIES_STATE_MACHINE_MODEL_STOCHASTIC_MODEL_CHECKER_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::StochasticModelChecker",
      "kind": "class",
      "language": "cpp",
      "name": "batt::StochasticModelChecker",
      "refid": "classbatt_1_1StochasticModelChecker",
      "title": "batt::StochasticModelChecker",
      "url": "/_autogen/Classes/classbatt_1_1StochasticModelChecker/",
      "visibility": "public"
    }
  ],
  "refid": "stochastic__model__checker_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/state_machine_model/stochastic_model_checker.hpp",
  "url": "/_autogen/Files/stochastic__model__checker_8hpp/#file-stochastic-model-checker.hpp",
  "visibility": "public"
}