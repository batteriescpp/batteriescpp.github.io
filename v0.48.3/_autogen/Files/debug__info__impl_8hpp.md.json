{
  "abstract": false,
  "anchor": "#file-debug-info-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-debug-info-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_DEBUG_INFO_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/debug_info_impl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/debug_info_impl.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_DEBUG_INFO_IMPL_HPP",
      "override": false,
      "refid": "debug__info__impl_8hpp_1a442368ffa6acb6b53248d89c3fc198a7",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_DEBUG_INFO_IMPL_HPP",
      "url": "/_autogen/Files/debug__info__impl_8hpp/#define-batteries-async-debug-info-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/debug_info_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/debug_info_impl.hpp",
    "line": 0
  },
  "name": "batteries/async/debug_info_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_DEBUG_INFO_IMPL_HPP\n#define BATTERIES_ASYNC_DEBUG_INFO_IMPL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/task.hpp>\n#include <batteries/segv.hpp>\n\n#include <array>\n#include <cstring>\n\nnamespace batt {\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Slice<DebugInfoFrame*> DebugInfoFrame::all_threads()\n{\n    static auto p_ = [] {\n        std::array<DebugInfoFrame*, kMaxDebugInfoThreads> p;\n        p.fill(nullptr);\n        return p;\n    }();\n    return as_slice(p_);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL DebugInfoFrame*& DebugInfoFrame::top()\n{\n    thread_local DebugInfoFrame* ptr = nullptr;\n\n    if (Task::current_ptr()) {\n        return Task::current().debug_info;\n    }\n\n    const auto i = this_thread_id();\n    if ((usize)i < all_threads().size()) {\n        return all_threads()[i];\n    }\n    return ptr;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL DebugInfoFrame::~DebugInfoFrame() noexcept\n{\n    top() = this->prev_;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void print_debug_info(DebugInfoFrame* p, std::ostream& out)\n{\n    usize depth = 0;\n    while (p) {\n        out << \" \" << depth << \".\";\n        p->print_info_(out, p);\n        p = p->prev_;\n        depth += 1;\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void print_all_threads_debug_info(std::ostream& out)\n{\n    const auto& a = DebugInfoFrame::all_threads();\n    for (std::size_t i = 0; i < a.size(); ++i) {\n        if (a[i]) {\n            out << \"DEBUG (thread:\" << i << \")\" << std::endl;\n            print_debug_info(a[i], out);\n        }\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL const char* shortened_source_file(const char* raw)\n{\n    static const std::string kIncludeDir = \"/include/\";\n    static const std::string kSrcDir = \"/src/\";\n    static const std::string kSourceDir = \"/source/\";\n\n    if (!raw) {\n        return \"\";\n    }\n\n    for (;;) {\n        bool found = false;\n        for (const std::string& pattern : {kIncludeDir, kSrcDir, kSourceDir}) {\n            const char* pos = std::strstr(raw, pattern.c_str());\n            if (pos) {\n                raw = pos + pattern.length();\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            break;\n        }\n    }\n\n    return raw;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void this_task_debug_info(std::ostream& out)\n{\n    print_debug_info(DebugInfoFrame::top(), out);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL const bool kTaskDebugInfoSegvCallbackInstalled = [] {\n    extra_segv_debug_info_callback() = &this_task_debug_info;\n    return true;\n}();\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_DEBUG_INFO_IMPL_HPP",
  "refid": "debug__info__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/debug_info_impl.hpp",
  "url": "/_autogen/Files/debug__info__impl_8hpp/#file-debug-info-impl.hpp",
  "visibility": "public"
}