{
  "abstract": false,
  "anchor": "",
  "baseClasses": [
    {
      "external": false,
      "friends": [
        {
          "abstract": false,
          "anchor": "#friend-lockbase",
          "argsString": "",
          "category": "friends",
          "const": false,
          "default": false,
          "definition": "friend class LockBase",
          "deleted": false,
          "explicit": false,
          "fullname": "batt::MutexBase::LockBase",
          "hasDetails": false,
          "inline": false,
          "kind": "friend",
          "language": "cpp",
          "location": {
            "bodyFile": "batteries/async/mutex.hpp",
            "bodyStart": 28,
            "column": 5,
            "file": "batteries/async/mutex.hpp",
            "line": 28
          },
          "name": "LockBase",
          "override": false,
          "params": [
            {
              "name": "",
              "type": "[LockBase](/_autogen/Classes/classbatt_1_1LockBase/)",
              "typePlain": "LockBase"
            }
          ],
          "pureVirtual": false,
          "refid": "classbatt_1_1MutexBase_1a5196e9d40fdada1554501f6109d5710e",
          "static": false,
          "strong": false,
          "title": "LockBase",
          "type": "class",
          "typePlain": "class",
          "url": "/_autogen/Classes/classbatt_1_1MutexBase/#friend-lockbase",
          "virtual": false,
          "visibility": "public"
        }
      ],
      "name": "batt::MutexBase",
      "protectedAttributes": [
        {
          "abstract": false,
          "anchor": "#variable-queue-back-",
          "brief": "The most-recent end of the queue of locks; once a locker has acquired the mutex, it stays in this queue until it passes the lock to the next in line. ",
          "category": "attributes",
          "const": false,
          "definition": "std::atomic<void*> batt::MutexBase::queue_back_",
          "explicit": false,
          "fullname": "batt::MutexBase::queue_back_",
          "hasDetails": false,
          "initializer": "{nullptr}",
          "inline": false,
          "kind": "variable",
          "language": "cpp",
          "location": {
            "bodyFile": "batteries/async/mutex.hpp",
            "bodyStart": 36,
            "column": 25,
            "file": "batteries/async/mutex.hpp",
            "line": 36
          },
          "name": "queue_back_",
          "override": false,
          "refid": "classbatt_1_1MutexBase_1a59ba71ad5422bb2015ed6bde28ce8606",
          "static": false,
          "strong": false,
          "summary": "The most-recent end of the queue of locks; once a locker has acquired the mutex, it stays in this queue until it passes the lock to the next in line. ",
          "title": "queue_back_",
          "type": "std::atomic< void * >",
          "typePlain": "std::atomic< void * >",
          "url": "/_autogen/Classes/classbatt_1_1MutexBase/#variable-queue-back-",
          "visibility": "protected"
        }
      ],
      "refid": "classbatt_1_1MutexBase",
      "url": "/_autogen/Classes/classbatt_1_1MutexBase/",
      "virtual": "non-virtual",
      "visibility": "public"
    }
  ],
  "brief": "Provides mutually-exclusive access to an instance of type `T`. ",
  "category": "classes",
  "const": false,
  "definition": "",
  "details": "This class has two advantages over `std::mutex`:\n\n1. It will yield the current [batt::Task](/_autogen/Classes/classbatt_1_1Task/) (if there is one) when blocking to acquire a lock, allowing the current thread to be used by other tasks\n2. By embedding the protected type `T` within the object, there is a much lower chance that state which should be accessed via a mutex will accidentally be accessed directly\nThis mutex implementation is mostly fair because it uses a modified version of [Lamport's Bakery Algorithm]([https://en.wikipedia.org/wiki/Lamport's_bakery_algorithm](https://en.wikipedia.org/wiki/Lamport's_bakery_algorithm)). It is non-recursive, so threads/tasks that attempt to acquire a lock that they already have will deadlock. Also, an attempt to acquire a lock on a [batt::Mutex](/_autogen/Classes/classbatt_1_1Mutex/) can't be cancelled, so it is not possible to set a timeout on lock acquisition. ",
  "explicit": false,
  "friends": [
    {
      "abstract": false,
      "anchor": "#friend-scopedlock",
      "argsString": "",
      "category": "friends",
      "const": false,
      "default": false,
      "definition": "friend class ScopedLock",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::ScopedLock",
      "hasDetails": true,
      "inline": false,
      "kind": "friend",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 327,
        "column": 5,
        "file": "batteries/async/mutex.hpp",
        "line": 327
      },
      "name": "ScopedLock",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "[ScopedLock](/_autogen/Classes/classbatt_1_1ScopedLock/)",
          "typePlain": "ScopedLock"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1a34dbeddc51e1b637372dc70414a7b4ef",
      "static": false,
      "strong": false,
      "templateParams": [
        {
          "name": "",
          "type": "typename",
          "typePlain": "typename"
        }
      ],
      "title": "ScopedLock",
      "type": "class",
      "typePlain": "class",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#friend-scopedlock",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "fullname": "batt::Mutex",
  "hasAdditionalMembers": true,
  "hasDetails": true,
  "includes": "<batteries/async/mutex.hpp>",
  "inline": false,
  "kind": "class",
  "language": "cpp",
  "location": {
    "bodyEnd": 560,
    "bodyFile": "batteries/async/mutex.hpp",
    "bodyStart": 324,
    "column": 1,
    "file": "batteries/async/mutex.hpp",
    "line": 323
  },
  "name": "batt::Mutex",
  "override": false,
  "parent": {
    "anchor": "",
    "category": "namespaces",
    "fullname": "batt",
    "kind": "namespace",
    "language": "cpp",
    "name": "batt",
    "refid": "namespacebatt",
    "title": "batt",
    "url": "/_autogen/Namespaces/namespacebatt/",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "privateAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-value-",
      "category": "attributes",
      "const": false,
      "definition": "T batt::Mutex< T >::value_",
      "explicit": false,
      "fullname": "batt::Mutex::value_",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 559,
        "column": 7,
        "file": "batteries/async/mutex.hpp",
        "line": 559
      },
      "name": "value_",
      "override": false,
      "refid": "classbatt_1_1Mutex_1aa9b1ec97a9e1425e34c40aaa3a28fd38",
      "static": false,
      "strong": false,
      "title": "value_",
      "type": "T",
      "typePlain": "T",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#variable-value-",
      "visibility": "private"
    }
  ],
  "publicClasses": [
    {
      "anchor": "",
      "brief": "Represents a lock aquisition. ",
      "category": "classes",
      "fullname": "batt::Mutex::LockImpl",
      "kind": "class",
      "language": "cpp",
      "name": "batt::Mutex::LockImpl",
      "refid": "classbatt_1_1Mutex_1_1LockImpl",
      "summary": "Represents a lock aquisition. ",
      "title": "batt::Mutex::LockImpl",
      "url": "/_autogen/Classes/classbatt_1_1Mutex_1_1LockImpl/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "Returned by [Mutex::thread_safe_base](/_autogen/Classes/classbatt_1_1Mutex/#function-thread-safe-base) when no-lock access isn't enabled; the name of this type is designed to produce a compilation error that makes it obvious what the problem is. ",
      "category": "classes",
      "fullname": "batt::Mutex::ThreadSafeBaseIsNotSupportedByType",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::Mutex::ThreadSafeBaseIsNotSupportedByType",
      "refid": "structbatt_1_1Mutex_1_1ThreadSafeBaseIsNotSupportedByType",
      "summary": "Returned by Mutex::thread_safe_base when no-lock access isn't enabled; the name of this type is designed to produce a compilation error that makes it obvious what the problem is. ",
      "title": "batt::Mutex::ThreadSafeBaseIsNotSupportedByType",
      "url": "/_autogen/Classes/structbatt_1_1Mutex_1_1ThreadSafeBaseIsNotSupportedByType/",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-thread-safe-base",
      "argsString": "(Self *ptr)",
      "brief": "(INTERNAL USE ONLY) Return a pointer to the thread-safe base class of the protected object. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "static Base* batt::Mutex< T >::thread_safe_base",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::thread_safe_base",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 461,
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 458,
        "column": 17,
        "file": "batteries/async/mutex.hpp",
        "line": 458
      },
      "name": "thread_safe_base",
      "override": false,
      "params": [
        {
          "name": "ptr",
          "type": "Self *",
          "typePlain": "Self *"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1acdeb360da3119fed6edf8588f4640c11",
      "static": true,
      "strong": false,
      "summary": "(INTERNAL USE ONLY) Return a pointer to the thread-safe base class of the protected object. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename Self",
          "typePlain": "typename Self"
        },
        {
          "defval": "typename Self::ThreadSafeBase",
          "defvalPlain": "typename Self::ThreadSafeBase",
          "name": "",
          "type": "typename Base",
          "typePlain": "typename Base"
        }
      ],
      "title": "thread_safe_base",
      "type": "Base *",
      "typePlain": "Base *",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-thread-safe-base",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-thread-safe-base",
      "argsString": "(const Self *ptr)",
      "brief": "(INTERNAL USE ONLY) Return a const pointer to the thread-safe base class of the protected object. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "static const Base* batt::Mutex< T >::thread_safe_base",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::thread_safe_base",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 470,
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 467,
        "column": 23,
        "file": "batteries/async/mutex.hpp",
        "line": 467
      },
      "name": "thread_safe_base",
      "override": false,
      "params": [
        {
          "name": "ptr",
          "type": "const Self *",
          "typePlain": "const Self *"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1a4582e13865213537a18d4721faa13b38",
      "static": true,
      "strong": false,
      "summary": "(INTERNAL USE ONLY) Return a const pointer to the thread-safe base class of the protected object. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename Self",
          "typePlain": "typename Self"
        },
        {
          "defval": "typename Self::ThreadSafeBase",
          "defvalPlain": "typename Self::ThreadSafeBase",
          "name": "",
          "type": "typename Base",
          "typePlain": "typename Base"
        }
      ],
      "title": "thread_safe_base",
      "type": "const Base *",
      "typePlain": "const Base *",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-thread-safe-base",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-thread-safe-base",
      "argsString": "(const std::unique_ptr< Self > *ptr)",
      "brief": "(INTERNAL USE ONLY) Return a pointer to the thread-safe base class of the protected object (std::unique_ptr variant). ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "static Base* batt::Mutex< T >::thread_safe_base",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::thread_safe_base",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 479,
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 476,
        "column": 17,
        "file": "batteries/async/mutex.hpp",
        "line": 476
      },
      "name": "thread_safe_base",
      "override": false,
      "params": [
        {
          "name": "ptr",
          "type": "const std::unique_ptr< Self > *",
          "typePlain": "const std::unique_ptr< Self > *"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1ab304443b24dfc6b0064299ae53287f7c",
      "static": true,
      "strong": false,
      "summary": "(INTERNAL USE ONLY) Return a pointer to the thread-safe base class of the protected object (std::unique_ptr variant). ",
      "templateParams": [
        {
          "name": "",
          "type": "typename Self",
          "typePlain": "typename Self"
        },
        {
          "defval": "typename Self::ThreadSafeBase",
          "defvalPlain": "typename Self::ThreadSafeBase",
          "name": "",
          "type": "typename Base",
          "typePlain": "typename Base"
        },
        {
          "defval": "void",
          "defvalPlain": "void",
          "name": "",
          "type": "typename",
          "typePlain": "typename"
        }
      ],
      "title": "thread_safe_base",
      "type": "Base *",
      "typePlain": "Base *",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-thread-safe-base",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-thread-safe-base",
      "argsString": "(...)",
      "brief": "(INTERNAL USE ONLY) Overload that is selected in the \"not supported\" case - designed to produce an error message that elucidates the root cause of the problem. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "static ThreadSafeBaseIsNotSupportedByType<T>* batt::Mutex< T >::thread_safe_base",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::thread_safe_base",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 487,
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 484,
        "column": 47,
        "file": "batteries/async/mutex.hpp",
        "line": 484
      },
      "name": "thread_safe_base",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "...",
          "typePlain": "..."
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1ab4398ffba940adaf7fb60e6bc8219726",
      "static": true,
      "strong": false,
      "summary": "(INTERNAL USE ONLY) Overload that is selected in the \"not supported\" case - designed to produce an error message that elucidates the root cause of the problem. ",
      "title": "thread_safe_base",
      "type": "[ThreadSafeBaseIsNotSupportedByType](/_autogen/Classes/structbatt_1_1Mutex_1_1ThreadSafeBaseIsNotSupportedByType/)< T > *",
      "typePlain": "ThreadSafeBaseIsNotSupportedByType< T > *",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-thread-safe-base",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex",
      "argsString": "(const Mutex &)=delete",
      "brief": "[Mutex](/_autogen/Classes/classbatt_1_1Mutex/) is not copy-constructible. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "batt::Mutex< T >::Mutex",
      "deleted": true,
      "explicit": false,
      "fullname": "batt::Mutex::Mutex",
      "hasDetails": false,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "batteries/async/mutex.hpp",
        "line": 491
      },
      "name": "Mutex",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "const [Mutex](/_autogen/Classes/classbatt_1_1Mutex/) &",
          "typePlain": "const Mutex &"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1ad53ca7240726d03610f8f01518c0a6aa",
      "static": false,
      "strong": false,
      "summary": "Mutex is not copy-constructible. ",
      "title": "Mutex",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-mutex",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator=",
      "argsString": "(const Mutex &)=delete",
      "brief": "[Mutex](/_autogen/Classes/classbatt_1_1Mutex/) is not copy-assignable. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "Mutex& batt::Mutex< T >::operator=",
      "deleted": true,
      "explicit": false,
      "fullname": "batt::Mutex::operator=",
      "hasDetails": false,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 11,
        "file": "batteries/async/mutex.hpp",
        "line": 495
      },
      "name": "operator=",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "const [Mutex](/_autogen/Classes/classbatt_1_1Mutex/) &",
          "typePlain": "const Mutex &"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1a87101e793f35a8accd0e5c19b60aabc4",
      "static": false,
      "strong": false,
      "summary": "Mutex is not copy-assignable. ",
      "title": "operator=",
      "type": "[Mutex](/_autogen/Classes/classbatt_1_1Mutex/) &",
      "typePlain": "Mutex &",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-operator=",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex",
      "argsString": "()=default",
      "brief": "Default-initializes the protected object. ",
      "category": "functions",
      "const": false,
      "default": true,
      "definition": "batt::Mutex< T >::Mutex",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::Mutex",
      "hasDetails": false,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 5,
        "file": "batteries/async/mutex.hpp",
        "line": 499
      },
      "name": "Mutex",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1aee7a065cf0e333c0ace350e017bd3f06",
      "static": false,
      "strong": false,
      "summary": "Default-initializes the protected object. ",
      "title": "Mutex",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-mutex",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-mutex",
      "argsString": "(Args &&... args) noexcept",
      "brief": "Initializes the protected object by forwarding the args to T's constructor. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "batt::Mutex< T >::Mutex",
      "deleted": false,
      "explicit": true,
      "fullname": "batt::Mutex::Mutex",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 506,
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 504,
        "column": 14,
        "file": "batteries/async/mutex.hpp",
        "line": 504
      },
      "name": "Mutex",
      "override": false,
      "params": [
        {
          "name": "args",
          "type": "Args &&...",
          "typePlain": "Args &&..."
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1a95c7851b4fc7230690c36419cc079c2f",
      "static": false,
      "strong": false,
      "summary": "Initializes the protected object by forwarding the args to T's constructor. ",
      "templateParams": [
        {
          "name": "Args",
          "type": "typename...",
          "typePlain": "typename..."
        },
        {
          "defval": "EnableIfNoShadow<[Mutex](/_autogen/Classes/classbatt_1_1Mutex/), Args...>",
          "defvalPlain": "EnableIfNoShadow<Mutex, Args...>",
          "name": "",
          "type": "typename",
          "typePlain": "typename"
        }
      ],
      "title": "Mutex",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-mutex",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lock",
      "argsString": "()",
      "brief": "Acquires a lock on the protected object. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "Lock batt::Mutex< T >::lock",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::lock",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 515,
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 512,
        "column": 10,
        "file": "batteries/async/mutex.hpp",
        "line": 512
      },
      "name": "lock",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1acbec7da4c633718510e65e8cf2728b0a",
      "static": false,
      "strong": false,
      "summary": "Acquires a lock on the protected object. ",
      "title": "lock",
      "type": "[Lock](/_autogen/Classes/classbatt_1_1Mutex/#using-lock)",
      "typePlain": "Lock",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-lock",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-lock",
      "argsString": "() const",
      "brief": "Acquires a lock on a const reference to the protected object, for read-only access. ",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "ConstLock batt::Mutex< T >::lock",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::lock",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 522,
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 519,
        "column": 15,
        "file": "batteries/async/mutex.hpp",
        "line": 519
      },
      "name": "lock",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1a82da7f37730b497b1c953c5aab939e5a",
      "static": false,
      "strong": false,
      "summary": "Acquires a lock on a const reference to the protected object, for read-only access. ",
      "title": "lock",
      "type": "[ConstLock](/_autogen/Classes/classbatt_1_1Mutex/#using-constlock)",
      "typePlain": "ConstLock",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-lock",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-with-lock",
      "argsString": "(Action &&action)",
      "brief": "Performs the specified action by passing a reference to the protected object to the specified action. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "decltype(auto) batt::Mutex< T >::with_lock",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::with_lock",
      "hasDetails": true,
      "inline": false,
      "kind": "function",
      "language": "cpp",
      "location": {
        "column": 14,
        "file": "batteries/async/mutex.hpp",
        "line": 532
      },
      "name": "with_lock",
      "override": false,
      "params": [
        {
          "name": "action",
          "type": "Action &&",
          "typePlain": "Action &&"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1ad59cf201fb4a060a4939670f626f5820",
      "returns": [
        "The value returned by `action`. "
      ],
      "static": false,
      "strong": false,
      "summary": "Performs the specified action by passing a reference to the protected object to the specified action. ",
      "templateParams": [
        {
          "name": "",
          "type": "typename Action",
          "typePlain": "typename Action"
        }
      ],
      "title": "with_lock",
      "type": "decltype(auto)",
      "typePlain": "decltype(auto)",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-with-lock",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-operator->",
      "argsString": "()",
      "brief": "Accesses the protected object's thread-safe base class members. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "auto batt::Mutex< T >::operator->",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::operator->",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 539,
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 536,
        "column": 10,
        "file": "batteries/async/mutex.hpp",
        "line": 536
      },
      "name": "operator->",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1a662394b7ddce261fd89b931ee53e83fb",
      "static": false,
      "strong": false,
      "summary": "Accesses the protected object's thread-safe base class members. ",
      "title": "operator->",
      "type": "auto",
      "typePlain": "auto",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-operator->",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-no-lock",
      "argsString": "()",
      "brief": "Accesses the protected object's thread-safe base class by reference. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "decltype(auto) batt::Mutex< T >::no_lock",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::no_lock",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 546,
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 543,
        "column": 14,
        "file": "batteries/async/mutex.hpp",
        "line": 543
      },
      "name": "no_lock",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1ac9798e77a2f072c85fbed511d772e2fd",
      "static": false,
      "strong": false,
      "summary": "Accesses the protected object's thread-safe base class by reference. ",
      "title": "no_lock",
      "type": "decltype(auto)",
      "typePlain": "decltype(auto)",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-no-lock",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-no-lock",
      "argsString": "() const",
      "brief": "Accesses the protected object's thread-safe base class by pointer. ",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "decltype(auto) batt::Mutex< T >::no_lock",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::Mutex::no_lock",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 553,
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 550,
        "column": 14,
        "file": "batteries/async/mutex.hpp",
        "line": 550
      },
      "name": "no_lock",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1Mutex_1af963df279c6372a8e3630321105af668",
      "static": false,
      "strong": false,
      "summary": "Accesses the protected object's thread-safe base class by pointer. ",
      "title": "no_lock",
      "type": "decltype(auto)",
      "typePlain": "decltype(auto)",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#function-no-lock",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#using-lock",
      "brief": "Lock guard for mutable access. ",
      "category": "types",
      "const": false,
      "definition": "using batt::Mutex< T >::Lock =  LockImpl<T, Mutex>",
      "explicit": false,
      "fullname": "batt::Mutex::Lock",
      "hasDetails": false,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 438,
        "column": 5,
        "file": "batteries/async/mutex.hpp",
        "line": 438
      },
      "name": "Lock",
      "override": false,
      "refid": "classbatt_1_1Mutex_1a3a80ebdcb222dee3227f7383d6032618",
      "static": false,
      "strong": false,
      "summary": "Lock guard for mutable access. ",
      "title": "Lock",
      "type": "[LockImpl](/_autogen/Classes/classbatt_1_1Mutex_1_1LockImpl/)< T, [Mutex](/_autogen/Classes/classbatt_1_1Mutex/) >",
      "typePlain": "LockImpl< T, Mutex >",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#using-lock",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#using-constlock",
      "brief": "Lock guard for const access. ",
      "category": "types",
      "const": false,
      "definition": "using batt::Mutex< T >::ConstLock =  LockImpl<const T, const Mutex>",
      "explicit": false,
      "fullname": "batt::Mutex::ConstLock",
      "hasDetails": false,
      "inline": false,
      "kind": "using",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/mutex.hpp",
        "bodyStart": 442,
        "column": 5,
        "file": "batteries/async/mutex.hpp",
        "line": 442
      },
      "name": "ConstLock",
      "override": false,
      "refid": "classbatt_1_1Mutex_1a504490bfab4b3636cbc9c3abdcd433c1",
      "static": false,
      "strong": false,
      "summary": "Lock guard for const access. ",
      "title": "ConstLock",
      "type": "[LockImpl](/_autogen/Classes/classbatt_1_1Mutex_1_1LockImpl/)< const T, const [Mutex](/_autogen/Classes/classbatt_1_1Mutex/) >",
      "typePlain": "LockImpl< const T, const Mutex >",
      "url": "/_autogen/Classes/classbatt_1_1Mutex/#using-constlock",
      "visibility": "public"
    }
  ],
  "refid": "classbatt_1_1Mutex",
  "static": false,
  "strong": false,
  "summary": "Provides mutually-exclusive access to an instance of type T. ",
  "templateParams": [
    {
      "name": "",
      "type": "typename T",
      "typePlain": "typename T"
    }
  ],
  "title": "batt::Mutex",
  "url": "/_autogen/Classes/classbatt_1_1Mutex/",
  "visibility": "public"
}