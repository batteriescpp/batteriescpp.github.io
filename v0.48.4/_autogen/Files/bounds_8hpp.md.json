{
  "abstract": false,
  "anchor": "#file-bounds.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-bounds-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_BOUNDS_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/bounds.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/bounds.hpp",
        "line": 5
      },
      "name": "BATTERIES_BOUNDS_HPP",
      "override": false,
      "refid": "bounds_8hpp_1a1892805d8ccc6f6661410c7e7b7a3eb7",
      "static": false,
      "strong": false,
      "title": "BATTERIES_BOUNDS_HPP",
      "url": "/_autogen/Files/bounds_8hpp/#define-batteries-bounds-hpp",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-define-int-bounds",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_DEFINE_INT_BOUNDS",
      "hasDetails": false,
      "initializer": "    inline type least_upper_bound(type n)                                                                    \\\n    {                                                                                                        \\\n        return n + 1;                                                                                        \\\n    }                                                                                                        \\\n    inline type greatest_lower_bound(type n)                                                                 \\\n    {                                                                                                        \\\n        return n - 1;                                                                                        \\\n    }",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/bounds.hpp",
        "bodyStart": 18,
        "column": 9,
        "file": "batteries/bounds.hpp",
        "line": 18
      },
      "name": "BATT_DEFINE_INT_BOUNDS",
      "override": false,
      "params": [
        {
          "name": "type",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "bounds_8hpp_1a0a3d670001e28b63a7bf5622342fd7d3",
      "static": false,
      "strong": false,
      "title": "BATT_DEFINE_INT_BOUNDS",
      "url": "/_autogen/Files/bounds_8hpp/#define-batt-define-int-bounds",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/bounds.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/bounds.hpp",
    "line": 0
  },
  "name": "batteries/bounds.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_BOUNDS_HPP\n#define BATTERIES_BOUNDS_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/int_types.hpp>\n#include <batteries/operators.hpp>\n#include <batteries/utility.hpp>\n\nnamespace batt {\n\nenum struct InclusiveLowerBound : bool { kFalse = false, kTrue = true };\nenum struct InclusiveUpperBound : bool { kFalse = false, kTrue = true };\n\n#define BATT_DEFINE_INT_BOUNDS(type)                                                                         \\\n    inline type least_upper_bound(type n)                                                                    \\\n    {                                                                                                        \\\n        return n + 1;                                                                                        \\\n    }                                                                                                        \\\n    inline type greatest_lower_bound(type n)                                                                 \\\n    {                                                                                                        \\\n        return n - 1;                                                                                        \\\n    }\n\nBATT_DEFINE_INT_BOUNDS(i8)\nBATT_DEFINE_INT_BOUNDS(i16)\nBATT_DEFINE_INT_BOUNDS(i32)\nBATT_DEFINE_INT_BOUNDS(i64)\nBATT_DEFINE_INT_BOUNDS(u8)\nBATT_DEFINE_INT_BOUNDS(u16)\nBATT_DEFINE_INT_BOUNDS(u32)\nBATT_DEFINE_INT_BOUNDS(u64)\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\ntemplate <typename T>\nstruct LeastUpperBound {\n    T value;\n};\n\ntemplate <typename T>\nLeastUpperBound<std::decay_t<T>> least_upper_bound(T&& value)\n{\n    return {BATT_FORWARD(value)};\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\ntemplate <typename T, typename U>\ninline bool operator<(const T& left, const LeastUpperBound<U>& right)\n{\n    // left <= right\n    //\n    return !(right.value < left);\n}\n\ntemplate <typename T, typename U>\ninline bool operator<(const LeastUpperBound<T>& left, const U& right)\n{\n    return left.value < right;\n}\n\ntemplate <typename T, typename U>\ninline bool operator<(const LeastUpperBound<T>& left, const LeastUpperBound<U>& right)\n{\n    return left.value < right.value;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\ntemplate <typename T, typename U>\ninline bool operator==(const T&, const LeastUpperBound<U>&)\n{\n    return false;\n}\n\ntemplate <typename T, typename U>\ninline bool operator==(const LeastUpperBound<T>&, const U&)\n{\n    return false;\n}\n\ntemplate <typename T, typename U>\ninline bool operator==(const LeastUpperBound<T>& left, const LeastUpperBound<U>& right)\n{\n    return left.value == right.value;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\nBATT_TOTALLY_ORDERED((template <typename T, typename U> inline), T, LeastUpperBound<U>)\nBATT_TOTALLY_ORDERED((template <typename T, typename U> inline), LeastUpperBound<T>, U)\nBATT_TOTALLY_ORDERED((template <typename T, typename U> inline), LeastUpperBound<T>, LeastUpperBound<U>)\n\nBATT_EQUALITY_COMPARABLE((template <typename T, typename U> inline), T, LeastUpperBound<U>)\nBATT_EQUALITY_COMPARABLE((template <typename T, typename U> inline), LeastUpperBound<T>, U)\nBATT_EQUALITY_COMPARABLE((template <typename T, typename U> inline), LeastUpperBound<T>, LeastUpperBound<U>)\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\ntemplate <typename T>\nstruct GreatestLowerBound {\n    T value;\n};\n\ntemplate <typename T, typename U>\nGreatestLowerBound<std::decay_t<T>> greatest_lower_bound(T&& value)\n{\n    return {BATT_FORWARD(value)};\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\ntemplate <typename T, typename U>\ninline bool operator<(const T& left, const GreatestLowerBound<U>& right)\n{\n    return left < right.value;\n}\n\ntemplate <typename T, typename U>\ninline bool operator<(const GreatestLowerBound<T>& left, const U& right)\n{\n    // left <= right\n    //\n    return !(right.value < left);\n}\n\ntemplate <typename T, typename U>\ninline bool operator<(const GreatestLowerBound<T>& left, const GreatestLowerBound<U>& right)\n{\n    return left.value < right.value;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\ntemplate <typename T, typename U>\ninline bool operator==(const T&, const GreatestLowerBound<U>&)\n{\n    return false;\n}\n\ntemplate <typename T, typename U>\ninline bool operator==(const GreatestLowerBound<T>&, const U&)\n{\n    return false;\n}\n\ntemplate <typename T, typename U>\ninline bool operator==(const GreatestLowerBound<T>& left, const GreatestLowerBound<U>& right)\n{\n    return left.value == right.value;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\nBATT_TOTALLY_ORDERED((template <typename T, typename U> inline), T, GreatestLowerBound<U>)\nBATT_TOTALLY_ORDERED((template <typename T, typename U> inline), GreatestLowerBound<T>, U)\nBATT_TOTALLY_ORDERED((template <typename T, typename U> inline), GreatestLowerBound<T>, GreatestLowerBound<U>)\n\nBATT_EQUALITY_COMPARABLE((template <typename T, typename U> inline), T, GreatestLowerBound<U>)\nBATT_EQUALITY_COMPARABLE((template <typename T, typename U> inline), GreatestLowerBound<T>, U)\nBATT_EQUALITY_COMPARABLE((template <typename T, typename U> inline), GreatestLowerBound<T>,\n                         GreatestLowerBound<U>)\n\n}  // namespace batt\n\n#endif  // BATTERIES_BOUNDS_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::LeastUpperBound",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::LeastUpperBound",
      "refid": "structbatt_1_1LeastUpperBound",
      "title": "batt::LeastUpperBound",
      "url": "/_autogen/Classes/structbatt_1_1LeastUpperBound/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::GreatestLowerBound",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::GreatestLowerBound",
      "refid": "structbatt_1_1GreatestLowerBound",
      "title": "batt::GreatestLowerBound",
      "url": "/_autogen/Classes/structbatt_1_1GreatestLowerBound/",
      "visibility": "public"
    }
  ],
  "refid": "bounds_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/bounds.hpp",
  "url": "/_autogen/Files/bounds_8hpp/#file-bounds.hpp",
  "visibility": "public"
}