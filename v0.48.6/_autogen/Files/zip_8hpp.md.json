{
  "abstract": false,
  "anchor": "#file-zip.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-seq-zip-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_SEQ_ZIP_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/seq/zip.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/seq/zip.hpp",
        "line": 6
      },
      "name": "BATTERIES_SEQ_ZIP_HPP",
      "override": false,
      "refid": "zip_8hpp_1abdc44caa5dfaafa1afcf1d4a7b2eed7c",
      "static": false,
      "strong": false,
      "title": "BATTERIES_SEQ_ZIP_HPP",
      "url": "/_autogen/Files/zip_8hpp/#define-batteries-seq-zip-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/seq/zip.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/seq/zip.hpp",
    "line": 0
  },
  "name": "batteries/seq/zip.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::seq",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::seq",
      "refid": "namespacebatt_1_1seq",
      "title": "batt::seq",
      "url": "/_autogen/Namespaces/namespacebatt_1_1seq/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::seq::detail",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::seq::detail",
      "refid": "namespacebatt_1_1seq_1_1detail",
      "title": "batt::seq::detail",
      "url": "/_autogen/Namespaces/namespacebatt_1_1seq_1_1detail/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/seq",
    "category": "dirs",
    "fullname": "batteries/seq",
    "kind": "dir",
    "language": "",
    "name": "batteries/seq",
    "refid": "dir_0985703d1fb34e0edc7cc330d020d62d",
    "title": "batteries/seq",
    "url": "/_autogen/Files/dir_0985703d1fb34e0edc7cc330d020d62d/#dir-batteries/seq",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/seq",
      "category": "dirs",
      "fullname": "batteries/seq",
      "kind": "dir",
      "language": "",
      "name": "batteries/seq",
      "refid": "dir_0985703d1fb34e0edc7cc330d020d62d",
      "title": "batteries/seq",
      "url": "/_autogen/Files/dir_0985703d1fb34e0edc7cc330d020d62d/#dir-batteries/seq",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_SEQ_ZIP_HPP\n#define BATTERIES_SEQ_ZIP_HPP\n\n#include <batteries/config.hpp>\n//\n\n#include <batteries/seq/seq_item.hpp>\n\n#include <tuple>\n#include <type_traits>\n\nnamespace batt {\nnamespace seq {\n\ntemplate <typename... Seqs>\nclass Zip\n{\n   public:\n    using Item = std::tuple<SeqItem<Seqs>...>;\n\n    explicit Zip(Seqs&&... seqs) noexcept : seqs_{BATT_FORWARD(seqs)...}\n    {\n    }\n\n    Optional<Item> peek()\n    {\n        if (this->done_) {\n            return None;\n        }\n        Optional<Item> item = this->peek_impl(std::integral_constant<usize, 0>{});\n        if (!item) {\n            this->done_ = true;\n        }\n        return item;\n    }\n\n    Optional<Item> next()\n    {\n        if (this->done_) {\n            return None;\n        }\n        Optional<Item> item = this->next_impl(std::integral_constant<usize, 0>{});\n        if (!item) {\n            this->done_ = true;\n        }\n        return item;\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n   private:\n    template <usize kIndex, typename... PrevItems>\n    Optional<Item> peek_impl(std::integral_constant<usize, kIndex>, PrevItems&&... prev_items)\n    {\n        decltype(auto) next_item = std::get<kIndex>(this->seqs_).peek();\n        if (!next_item) {\n            return None;\n        }\n        return this->peek_impl(std::integral_constant<usize, kIndex + 1>{}, BATT_FORWARD(prev_items)...,\n                               *BATT_FORWARD(next_item));\n    }\n\n    template <typename... AllItems>\n    Optional<Item> peek_impl(std::integral_constant<usize, sizeof...(Seqs)>, AllItems&&... all_items)\n    {\n        return Item{BATT_FORWARD(all_items)...};\n    }\n\n    //----- --- -- -  -  -   -\n\n    template <usize kIndex, typename... PrevItems>\n    Optional<Item> next_impl(std::integral_constant<usize, kIndex>, PrevItems&&... prev_items)\n    {\n        decltype(auto) next_item = std::get<kIndex>(this->seqs_).next();\n        if (!next_item) {\n            return None;\n        }\n        return this->next_impl(std::integral_constant<usize, kIndex + 1>{}, BATT_FORWARD(prev_items)...,\n                               *BATT_FORWARD(next_item));\n    }\n\n    template <typename... AllItems>\n    Optional<Item> next_impl(std::integral_constant<usize, sizeof...(Seqs)>, AllItems&&... all_items)\n    {\n        return Item{BATT_FORWARD(all_items)...};\n    }\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    bool done_ = false;\n    std::tuple<Seqs...> seqs_;\n};\n\ntemplate <typename... OtherSeqs>\nstruct ZipBinder {\n    std::tuple<OtherSeqs...> other_seqs;\n};\n\ntemplate <typename... OtherSeqs>\nZipBinder<OtherSeqs&&...> zip(OtherSeqs&&... other_seqs)\n{\n    return {{BATT_FORWARD(other_seqs)...}};\n}\n\nnamespace detail {\n\ninline void zip_seqs_static_asserts()\n{\n}\n\ntemplate <typename First, typename... Rest>\ninline void zip_seqs_static_asserts(StaticType<First>, StaticType<Rest>... rest)\n{\n    static_assert(std::is_same_v<First, std::decay_t<First>>,\n                  \"Zipped sequences may not be captured implicitly by reference.\");\n\n    zip_seqs_static_asserts(rest...);\n}\n\n}  //namespace detail\n\ntemplate <typename Seq, typename... OtherSeqs>\n[[nodiscard]] Zip<Seq, OtherSeqs...> operator|(Seq&& seq, ZipBinder<OtherSeqs&&...>&& binder)\n{\n    detail::zip_seqs_static_asserts(StaticType<Seq>{}, StaticType<OtherSeqs>{}...);\n\n    return std::apply(\n        [&](auto&&... other_seqs) {\n            return Zip<Seq, OtherSeqs...>{BATT_FORWARD(seq), BATT_FORWARD(other_seqs)...};\n        },\n        std::move(binder.other_seqs));\n}\n\n}  //namespace seq\n}  // namespace batt\n\n#endif  // BATTERIES_SEQ_ZIP_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::Zip",
      "kind": "class",
      "language": "cpp",
      "name": "batt::seq::Zip",
      "refid": "classbatt_1_1seq_1_1Zip",
      "title": "batt::seq::Zip",
      "url": "/_autogen/Classes/classbatt_1_1seq_1_1Zip/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::ZipBinder",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::seq::ZipBinder",
      "refid": "structbatt_1_1seq_1_1ZipBinder",
      "title": "batt::seq::ZipBinder",
      "url": "/_autogen/Classes/structbatt_1_1seq_1_1ZipBinder/",
      "visibility": "public"
    }
  ],
  "refid": "zip_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/seq/zip.hpp",
  "url": "/_autogen/Files/zip_8hpp/#file-zip.hpp",
  "visibility": "public"
}