{
  "abstract": false,
  "anchor": "#file-http-chunk-encoder.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-http-http-chunk-encoder-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_HTTP_HTTP_CHUNK_ENCODER_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/http/http_chunk_encoder.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/http/http_chunk_encoder.hpp",
        "line": 6
      },
      "name": "BATTERIES_HTTP_HTTP_CHUNK_ENCODER_HPP",
      "override": false,
      "refid": "http__chunk__encoder_8hpp_1ab377a1e04e6bcb37622aed25a4af6081",
      "static": false,
      "strong": false,
      "title": "BATTERIES_HTTP_HTTP_CHUNK_ENCODER_HPP",
      "url": "/_autogen/Files/http__chunk__encoder_8hpp/#define-batteries-http-http-chunk-encoder-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/http/http_chunk_encoder.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/http/http_chunk_encoder.hpp",
    "line": 0
  },
  "name": "batteries/http/http_chunk_encoder.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/http",
    "category": "dirs",
    "fullname": "batteries/http",
    "kind": "dir",
    "language": "",
    "name": "batteries/http",
    "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
    "title": "batteries/http",
    "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/http",
      "category": "dirs",
      "fullname": "batteries/http",
      "kind": "dir",
      "language": "",
      "name": "batteries/http",
      "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
      "title": "batteries/http",
      "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_HTTP_HTTP_CHUNK_ENCODER_HPP\n#define BATTERIES_HTTP_HTTP_CHUNK_ENCODER_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/http/http_data.hpp>\n\n#include <batteries/async/io_result.hpp>\n#include <batteries/async/task.hpp>\n\n#include <batteries/buffer.hpp>\n#include <batteries/checked_cast.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/small_vec.hpp>\n#include <batteries/status.hpp>\n\n#include <array>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename Src, typename AsyncWriteStream>\ninline Status http_encode_chunked(Src&& src, AsyncWriteStream&& dst,\n                                  IncludeHttpTrailer include_trailer = IncludeHttpTrailer{false})\n{\n    static const std::array<char, 16> hex_digits = {'0', '1', '2', '3', '4', '5', '6', '7',\n                                                    '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};\n\n    static const ConstBuffer last_chunk{\"\\r\\n0\\r\\n\", 5};\n    static const ConstBuffer last_chunk_with_trailer{\"\\r\\n0\\r\\n\\r\\n\", 7};\n\n    const auto encode_hex = [](u64 n, char* dst) -> char* {\n        if (n == 0) {\n            *dst = '0';\n            return dst + 1;\n        }\n        i32 bit_offset = sizeof(u64) * 8 - 4;\n        while ((n & (u64{0b1111} << bit_offset)) == 0) {\n            bit_offset -= 4;\n        }\n        do {\n            *dst = hex_digits[(n >> bit_offset) & 0b1111];\n            ++dst;\n            bit_offset -= 4;\n        } while (bit_offset >= 0);\n        return dst;\n    };\n\n    std::array<char, sizeof(u64) * 2 + 4> header_storage;\n    bool first_chunk = true;\n    for (;;) {\n        auto fetched_chunks = src.fetch_at_least(1);\n\n        if (fetched_chunks.status() == StatusCode::kEndOfStream) {\n            IOResult<usize> result = Task::await_write(dst, [&] {\n                if (include_trailer) {\n                    return last_chunk_with_trailer;\n                } else {\n                    return last_chunk;\n                }\n            }());\n            BATT_REQUIRE_OK(result);\n            return OkStatus();\n        }\n        BATT_REQUIRE_OK(fetched_chunks);\n\n        usize n_consumed = 0;\n        auto on_scope_exit = finally([&] {\n            src.consume(n_consumed);\n        });\n\n        for (ConstBuffer chunk : *fetched_chunks) {\n            char* const header_begin = header_storage.data();\n            char* header_end = header_begin;\n\n            if (!first_chunk) {\n                header_end[0] = '\\r';\n                header_end[1] = '\\n';\n                header_end += 2;\n            }\n            first_chunk = false;\n\n            header_end = encode_hex(chunk.size(), header_end);\n            header_end[0] = '\\r';\n            header_end[1] = '\\n';\n            header_end += 2;\n\n            SmallVec<ConstBuffer, 2> data;\n            data.emplace_back(ConstBuffer{header_begin, BATT_CHECKED_CAST(usize, header_end - header_begin)});\n            if (chunk.size() > 0) {\n                data.emplace_back(chunk);\n            }\n\n            IOResult<usize> result = Task::await_write(dst, data);\n            BATT_REQUIRE_OK(result);\n\n            BATT_CHECK_GT(chunk.size(), 0);\n            n_consumed += chunk.size();\n        }\n    }\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_HTTP_HTTP_CHUNK_ENCODER_HPP",
  "refid": "http__chunk__encoder_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/http/http_chunk_encoder.hpp",
  "url": "/_autogen/Files/http__chunk__encoder_8hpp/#file-http-chunk-encoder.hpp",
  "visibility": "public"
}