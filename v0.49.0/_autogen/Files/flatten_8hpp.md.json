{
  "abstract": false,
  "anchor": "#file-flatten.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-seq-flatten-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_SEQ_FLATTEN_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/seq/flatten.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/seq/flatten.hpp",
        "line": 5
      },
      "name": "BATTERIES_SEQ_FLATTEN_HPP",
      "override": false,
      "refid": "flatten_8hpp_1ab657de2bb3ec75d07f64e1fc18541290",
      "static": false,
      "strong": false,
      "title": "BATTERIES_SEQ_FLATTEN_HPP",
      "url": "/_autogen/Files/flatten_8hpp/#define-batteries-seq-flatten-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/seq/flatten.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/seq/flatten.hpp",
    "line": 0
  },
  "name": "batteries/seq/flatten.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::seq",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::seq",
      "refid": "namespacebatt_1_1seq",
      "title": "batt::seq",
      "url": "/_autogen/Namespaces/namespacebatt_1_1seq/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/seq",
    "category": "dirs",
    "fullname": "batteries/seq",
    "kind": "dir",
    "language": "",
    "name": "batteries/seq",
    "refid": "dir_0985703d1fb34e0edc7cc330d020d62d",
    "title": "batteries/seq",
    "url": "/_autogen/Files/dir_0985703d1fb34e0edc7cc330d020d62d/#dir-batteries/seq",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/seq",
      "category": "dirs",
      "fullname": "batteries/seq",
      "kind": "dir",
      "language": "",
      "name": "batteries/seq",
      "refid": "dir_0985703d1fb34e0edc7cc330d020d62d",
      "title": "batteries/seq",
      "url": "/_autogen/Files/dir_0985703d1fb34e0edc7cc330d020d62d/#dir-batteries/seq",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_SEQ_FLATTEN_HPP\n#define BATTERIES_SEQ_FLATTEN_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/optional.hpp>\n#include <batteries/seq/count.hpp>\n#include <batteries/seq/for_each.hpp>\n#include <batteries/seq/seq_item.hpp>\n#include <batteries/utility.hpp>\n\n#include <type_traits>\n\nnamespace batt {\nnamespace seq {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// flatten - turns Seq<Seq<T>> into Seq<T> by concatenating\n//\ntemplate <typename OuterSeq, typename InnerSeqT = std::decay_t<SeqItem<OuterSeq>>>\nclass Flatten\n{\n   public:\n    using InnerSeq = InnerSeqT;\n    using Item = SeqItem<InnerSeq>;\n\n    explicit Flatten(OuterSeq&& outer) noexcept : outer_(BATT_FORWARD(outer)), inner_(outer_.next())\n    {\n    }\n\n    Optional<Item> peek()\n    {\n        return impl(/*consume_item=*/false);\n    }\n    Optional<Item> next()\n    {\n        return impl(/*consume_item=*/true);\n    }\n\n    //----------------\n\n#if BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n    template <typename OuterSeq_, typename Fn>\n    friend LoopControl operator|(Flatten<OuterSeq_>&& flatten_seq, ForEachBinder<Fn>&& binder);\n\n#endif  // BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n   private:\n    Optional<Item> impl(bool consume_item)\n    {\n        if (!inner_) {\n            return None;\n        }\n\n        for (;;) {\n            auto v = consume_item ? inner_->next() : inner_->peek();\n            if (v) {\n                return v;\n            }\n            auto next_inner = outer_.next();\n            if (next_inner) {\n                inner_.emplace(std::move(*next_inner));\n            } else {\n                inner_ = None;\n                return None;\n            }\n        }\n    }\n\n    OuterSeq outer_;\n    Optional<InnerSeq> inner_;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\nstruct FlattenBinder {\n};\n\ninline FlattenBinder flatten()\n{\n    return {};\n}\n\ntemplate <typename OuterSeq>\n[[nodiscard]] Flatten<OuterSeq> operator|(OuterSeq&& seq, FlattenBinder)\n{\n    static_assert(std::is_same_v<OuterSeq, std::decay_t<OuterSeq>>,\n                  \"Flattened sequences may not be captured implicitly by reference.\");\n\n    return Flatten<OuterSeq>{BATT_FORWARD(seq)};\n}\n\n#if BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// flatten() | for_each(...)\n//\ntemplate <typename OuterSeq, typename Fn>\nLoopControl operator|(Flatten<OuterSeq>&& flatten_seq, ForEachBinder<Fn>&& binder)\n{\n    using InnerSeq = typename Flatten<OuterSeq>::InnerSeq;\n\n    if (flatten_seq.inner_) {\n        LoopControl control = std::forward<InnerSeq>(*flatten_seq.inner_) | for_each(binder.fn);\n        if (BATT_HINT_FALSE(control == kBreak)) {\n            return kBreak;\n        }\n        flatten_seq.inner_ = None;\n    }\n    auto loop_body = [&binder](auto&& inner_seq) -> LoopControl {\n        return BATT_FORWARD(inner_seq) | for_each(binder.fn);\n    };\n    return std::forward<OuterSeq>(flatten_seq.outer_) | for_each(loop_body);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// flatten() | count()\n//\n\n#endif  // BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n}  // namespace seq\n}  // namespace batt\n\n#endif  // BATTERIES_SEQ_FLATTEN_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::Flatten",
      "kind": "class",
      "language": "cpp",
      "name": "batt::seq::Flatten",
      "refid": "classbatt_1_1seq_1_1Flatten",
      "title": "batt::seq::Flatten",
      "url": "/_autogen/Classes/classbatt_1_1seq_1_1Flatten/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::FlattenBinder",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::seq::FlattenBinder",
      "refid": "structbatt_1_1seq_1_1FlattenBinder",
      "title": "batt::seq::FlattenBinder",
      "url": "/_autogen/Classes/structbatt_1_1seq_1_1FlattenBinder/",
      "visibility": "public"
    }
  ],
  "refid": "flatten_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/seq/flatten.hpp",
  "url": "/_autogen/Files/flatten_8hpp/#file-flatten.hpp",
  "visibility": "public"
}