{
  "abstract": false,
  "anchor": "#file-slice.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-slice-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_SLICE_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/slice.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/slice.hpp",
        "line": 6
      },
      "name": "BATTERIES_SLICE_HPP",
      "override": false,
      "refid": "slice_8hpp_1a888581497514537fcad3b1efd25c3366",
      "static": false,
      "strong": false,
      "title": "BATTERIES_SLICE_HPP",
      "url": "/_autogen/Files/slice_8hpp/#define-batteries-slice-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/slice.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/slice.hpp",
    "line": 0
  },
  "name": "batteries/slice.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_SLICE_HPP\n#define BATTERIES_SLICE_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/interval.hpp>\n#include <batteries/seq.hpp>\n#include <batteries/type_traits.hpp>\n#include <batteries/utility.hpp>\n\n#include <boost/range/begin.hpp>\n#include <boost/range/iterator_range.hpp>\n\n#include <memory>\n#include <type_traits>\n#include <utility>\n\nnamespace batt {\n\ntemplate <typename T>\nusing Slice = boost::iterator_range<T*>;\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\ntemplate <typename T, typename DataT = decltype(std::declval<T>().data()),\n          typename = std::enable_if_t<std::is_pointer_v<DataT>>,\n          typename ElementT = typename std::pointer_traits<DataT>::element_type>\nSlice<ElementT> as_slice(T&& container)\n{\n    return Slice<ElementT>{container.data(), container.data() + container.size()};\n}\n\ntemplate <typename ElementT>\nSlice<ElementT> as_slice(ElementT* begin, ElementT* end)\n{\n    return Slice<ElementT>{begin, end};\n}\n\ntemplate <typename ElementT>\nSlice<ElementT> as_slice(ElementT* begin, usize size)\n{\n    return Slice<ElementT>{begin, begin + size};\n}\n\ntemplate <typename ElementT>\nSlice<ElementT> as_slice(const Slice<ElementT>& slice)\n{\n    return slice;\n}\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\ntemplate <typename ElementT>\nSlice<const ElementT> as_const_slice(const ElementT* begin, const ElementT* end)\n{\n    return Slice<const ElementT>{begin, end};\n}\n\ntemplate <typename ElementT>\nSlice<const ElementT> as_const_slice(const ElementT* begin, usize size)\n{\n    return as_const_slice(begin, size);\n}\n\ntemplate <typename T, typename DataT = decltype(std::declval<const T&>().data()),\n          typename = std::enable_if_t<std::is_pointer_v<DataT>>,\n          typename ElementT = typename std::pointer_traits<DataT>::element_type>\nSlice<const ElementT> as_const_slice(const T& container)\n{\n    return as_const_slice(container.data(), container.data() + container.size());\n}\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\ntemplate <typename ElementT>\nSlice<ElementT> empty_slice(StaticType<ElementT> = {})\n{\n    static std::aligned_storage_t<sizeof(ElementT), alignof(ElementT)> storage_;\n    return as_slice(reinterpret_cast<ElementT*>(&storage_), 0);\n}\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\ntemplate <typename T>\nSubRangeSeq<Slice<T>> as_seq(const Slice<T>& s)\n{\n    return SubRangeSeq<Slice<T>>{batt::make_copy(s)};\n}\n\ntemplate <typename T>\nauto as_seq(Slice<T>& s)\n{\n    return as_seq(const_cast<const Slice<T>&>(s));\n}\n\ntemplate <typename T>\nauto as_seq(Slice<T>&& s)\n{\n    return as_seq(const_cast<const Slice<T>&>(s));\n}\n\ntemplate <typename T>\nauto as_seq(const Slice<T>&& s)\n{\n    return as_seq(const_cast<const Slice<T>&>(s));\n}\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\ntemplate <typename Iter>\nboost::iterator_range<Iter> as_range(const std::pair<Iter, Iter>& p)\n{\n    return boost::make_iterator_range(p.first, p.second);\n}\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\ntemplate <typename RangeT, typename Iter = std::decay_t<decltype(boost::begin(std::declval<RangeT>()))>,\n          typename OffsetT, typename = std::enable_if_t<std::is_integral_v<OffsetT>>>\nboost::iterator_range<Iter> slice_range(RangeT&& range, const Interval<OffsetT>& i)\n{\n    return boost::make_iterator_range(std::next(boost::begin(range), i.lower_bound),\n                                      std::next(boost::begin(range), i.upper_bound));\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_SLICE_HPP",
  "refid": "slice_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/slice.hpp",
  "url": "/_autogen/Files/slice_8hpp/#file-slice.hpp",
  "visibility": "public"
}