{
  "abstract": false,
  "anchor": "#file-metric-registry.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-metrics-metric-registry-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_METRICS_METRIC_REGISTRY_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/metrics/metric_registry.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/metrics/metric_registry.hpp",
        "line": 6
      },
      "name": "BATTERIES_METRICS_METRIC_REGISTRY_HPP",
      "override": false,
      "refid": "metric__registry_8hpp_1aa705df3b2d870ec14a7c26d8099679ba",
      "static": false,
      "strong": false,
      "title": "BATTERIES_METRICS_METRIC_REGISTRY_HPP",
      "url": "/_autogen/Files/metric__registry_8hpp/#define-batteries-metrics-metric-registry-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/metrics/metric_registry.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/metrics/metric_registry.hpp",
    "line": 0
  },
  "name": "batteries/metrics/metric_registry.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/metrics",
    "category": "dirs",
    "fullname": "batteries/metrics",
    "kind": "dir",
    "language": "",
    "name": "batteries/metrics",
    "refid": "dir_5ba863940ce6067bb787d1b849676df9",
    "title": "batteries/metrics",
    "url": "/_autogen/Files/dir_5ba863940ce6067bb787d1b849676df9/#dir-batteries/metrics",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/metrics",
      "category": "dirs",
      "fullname": "batteries/metrics",
      "kind": "dir",
      "language": "",
      "name": "batteries/metrics",
      "refid": "dir_5ba863940ce6067bb787d1b849676df9",
      "title": "batteries/metrics",
      "url": "/_autogen/Files/dir_5ba863940ce6067bb787d1b849676df9/#dir-batteries/metrics",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2023 Anthony Paul Astolfi, Eitan Steiner\n//\n#pragma once\n#ifndef BATTERIES_METRICS_METRIC_REGISTRY_HPP\n#define BATTERIES_METRICS_METRIC_REGISTRY_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/metrics/metric_collectors.hpp>\n\n#include <batteries/async/queue.hpp>\n#include <batteries/async/watch.hpp>\n\n#include <batteries/config.hpp>\n#include <batteries/finally.hpp>\n#include <batteries/logging.hpp>\n#include <batteries/stream_util.hpp>\n#include <batteries/token.hpp>\n\n#include <memory>\n#include <mutex>\n#include <string_view>\n#include <unordered_map>\n#include <vector>\n\nnamespace batt {\n\n// A key/value pair applied to a multi-dimensional metric.\n//\nstruct MetricLabel {\n    Token key;\n    Token value;\n};\n\n// A collection of MetricLabel values applied to a metric.\n//\nusing MetricLabelSet = std::vector<MetricLabel>;\n\n// Sorts the given metric set and eliminates duplicates.\n//\nMetricLabelSet normalize_labels(MetricLabelSet&& labels);\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// This interface must be implemented to export a metric.\n//\nclass MetricExporter\n{\n   public:\n    MetricExporter(const MetricExporter&) = delete;\n    MetricExporter& operator=(const MetricExporter&) = delete;\n\n    virtual ~MetricExporter() = default;\n\n    virtual Token get_name() const = 0;\n\n    virtual std::string_view get_description() const\n    {\n        return \"A metric.\";\n    }\n\n    virtual std::string_view get_type() const\n    {\n        return \"counter\";\n    }\n\n    virtual const MetricLabelSet& get_labels() const\n    {\n        return this->labels_;\n    }\n\n    virtual void set_labels(MetricLabelSet&& labels)\n    {\n        this->labels_ = normalize_labels(std::move(labels));\n    }\n\n    virtual double get_value() const = 0;\n\n   protected:\n    MetricExporter() = default;\n\n   private:\n    MetricLabelSet labels_;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <class T>\nclass ScalarMetricExporter : public MetricExporter\n{\n   public:\n    explicit ScalarMetricExporter(const std::string& name, T& metric) noexcept : name_{name}, metric_{metric}\n    {\n    }\n\n    Token get_name() const override\n    {\n        return this->name_;\n    }\n\n    double get_value() const override\n    {\n        return static_cast<double>(this->metric_.load());\n    }\n\n   private:\n    Token name_;\n    T& metric_;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nusing CountMetricExporter = ScalarMetricExporter<CountMetric<T>>;\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename T>\nusing GaugeMetricExporter = ScalarMetricExporter<GaugeMetric<T>>;\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// Exports a DerivedMetric<T>.\n//\ntemplate <typename T>\nclass DerivedMetricExporter : public MetricExporter\n{\n   public:\n    explicit DerivedMetricExporter(const std::string& name, DerivedMetric<T>& metric) noexcept\n        : name_{name}\n        , metric_{metric}\n    {\n    }\n\n    Token get_name() const override\n    {\n        return this->name_;\n    }\n\n    double get_value() const override\n    {\n        return static_cast<double>(this->metric_());\n    }\n\n   private:\n    Token name_;\n    DerivedMetric<T>& metric_;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// Exports a variable as a metric.\n//\ntemplate <typename T>\nclass VariableExporter : public MetricExporter\n{\n   public:\n    explicit VariableExporter(const std::string& name, const T& var) noexcept : name_{name}, var_{var}\n    {\n    }\n\n    Token get_name() const override\n    {\n        return this->name_;\n    }\n\n    double get_value() const override\n    {\n        return static_cast<double>(this->var_);\n    }\n\n   private:\n    Token name_;\n    const T& var_;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// Exports a Watch<T> as a metric.\n//\ntemplate <typename T>\nclass WatchExporter : public MetricExporter\n{\n   public:\n    explicit WatchExporter(const std::string& name, Watch<T>& watch) noexcept : name_{name}, watch_{watch}\n    {\n    }\n\n    Token get_name() const override\n    {\n        return this->name_;\n    }\n\n    double get_value() const override\n    {\n        return static_cast<double>(this->watch_.get_value());\n    }\n\n   private:\n    Token name_;\n    Watch<T>& watch_;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// Exports Queue depth as a metric.\n//\nclass QueueDepthExporter : public MetricExporter\n{\n   public:\n    explicit QueueDepthExporter(const std::string& name, QueueBase& queue) noexcept\n        : name_{name}\n        , queue_{queue}\n    {\n    }\n\n    Token get_name() const override\n    {\n        return this->name_;\n    }\n\n    double get_value() const override\n    {\n        return static_cast<double>(this->queue_.size());\n    }\n\n   private:\n    Token name_;\n    QueueBase& queue_;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// A set of metric exporters.\n//\nclass MetricRegistry\n{\n   public:\n    MetricRegistry& add_exporter(const void* obj, std::unique_ptr<MetricExporter> exporter,\n                                 MetricLabelSet&& labels)\n    {\n        exporter->set_labels(std::move(labels));\n        std::unique_lock<std::mutex> lock{this->mutex_};\n        this->metrics_.emplace(obj, std::move(exporter));\n        return *this;\n    }\n\n    template <typename T>\n    MetricRegistry& add(std::string_view name, CountMetric<T>& counter,\n                        MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        BATT_VLOG(1) << \"adding CountMetric:\" << name;\n        return this->add_exporter(&counter,\n                                  std::make_unique<CountMetricExporter<T>>(std::string(name), counter),\n                                  std::move(labels));\n    }\n\n    MetricRegistry& add(std::string_view name, LatencyMetric& latency,\n                        MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        BATT_VLOG(1) << \"adding LatencyMetric:\" << name;\n\n        this->add_exporter(\n            &latency,\n            std::make_unique<CountMetricExporter<u64>>(to_string(name, \"_total_usec\"), latency.total_usec),\n            batt::make_copy(labels));\n\n        this->add_exporter(\n            &latency, std::make_unique<CountMetricExporter<u64>>(to_string(name, \"_count\"), latency.count),\n            batt::make_copy(labels));\n\n        return *this;\n    }\n\n    template <typename T>\n    MetricRegistry& add(std::string_view name, GaugeMetric<T>& gauge,\n                        MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        BATT_VLOG(1) << \"adding GaugeMetric:\" << name;\n\n        this->add_exporter(&gauge, std::make_unique<GaugeMetricExporter<T>>(to_string(name, \"_gauge\"), gauge),\n                           std::move(labels));\n\n        return *this;\n    }\n\n    template <typename T>\n    MetricRegistry& add(std::string_view name, StatsMetric<T>& stats,\n                        MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        BATT_VLOG(1) << \"adding StatsMetric:\" << name;\n\n        // Create 'fanout' copies of 'labels' argument.\n        this->add_exporter(&stats,\n                           std::make_unique<CountMetricExporter<T>>(to_string(name, \"_count\"), stats.count_),\n                           batt::make_copy(labels));\n\n        this->add_exporter(&stats,\n                           std::make_unique<CountMetricExporter<T>>(to_string(name, \"_total\"), stats.total_),\n                           batt::make_copy(labels));\n\n        this->add_exporter(&stats,\n                           std::make_unique<CountMetricExporter<T>>(to_string(name, \"_max\"), stats.max_),\n                           batt::make_copy(labels));\n\n        this->add_exporter(&stats,\n                           std::make_unique<CountMetricExporter<T>>(to_string(name, \"_min\"), stats.min_),\n                           batt::make_copy(labels));\n\n        return *this;\n    }\n\n    template <typename T>\n    MetricRegistry& add(std::string_view name, HistogramMetric<T>& histogram,\n                        MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        BATT_VLOG(1) << \"adding HistogramMetric:\" << name;\n        const std::string bucket_prefix{to_string(name, \"_histogram_bucket\")};\n\n        for (usize i = 0; i <= histogram.num_intervals_ + 1u; ++i) {\n            // Create bucket label with upper-bound info.\n            std::string upper_bound{to_string(histogram.upper_bound(i))};\n\n            // Display last upper_bound: numeric_limits<T>::max() as infinity.\n            if (BATT_HINT_FALSE(i == histogram.num_intervals_ + 1u)) {\n                upper_bound = \"Inf\";\n            }\n            const batt::MetricLabel bucket_label{batt::Token(\"le\"), batt::Token(upper_bound)};\n\n            // Append bucket label to preexisting labels.\n            batt::MetricLabelSet augmented_labels{labels};\n            augmented_labels.push_back(bucket_label);\n\n            // Add histogram bucket as a StatsMetric.\n            StatsMetric<T>& bucket_metric = histogram.buckets_[i];\n            this->add(bucket_prefix, bucket_metric, std::move(augmented_labels));\n        }\n\n        return *this;\n    }\n\n    template <typename T>\n    MetricRegistry& add(std::string_view name, Watch<T>& watch, MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        return this->add_exporter(&watch, std::make_unique<WatchExporter<T>>(std::string(name), watch),\n                                  std::move(labels));\n    }\n\n    MetricRegistry& add(std::string_view name, QueueBase& queue, MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        return this->add_exporter(\n            &queue, std::make_unique<QueueDepthExporter>(to_string(name, \"_queue_depth\"), queue),\n            std::move(labels));\n    }\n\n    template <typename T>\n    MetricRegistry& add(std::string_view name, DerivedMetric<T>& metric,\n                        MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        return this->add_exporter(&metric, std::make_unique<DerivedMetricExporter<T>>(name, metric),\n                                  std::move(labels));\n    }\n\n    MetricRegistry& add(std::string_view name, const double& var, MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        return this->add_exporter(&var, std::make_unique<VariableExporter<double>>(std::string(name), var),\n                                  std::move(labels));\n    }\n\n    MetricRegistry& add(std::string_view name, const usize& var, MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        return this->add_exporter(&var, std::make_unique<VariableExporter<usize>>(std::string(name), var),\n                                  std::move(labels));\n    }\n\n    MetricRegistry& add(std::string_view name, const isize& var, MetricLabelSet&& labels = MetricLabelSet{})\n    {\n        return this->add_exporter(&var, std::make_unique<VariableExporter<isize>>(std::string(name), var),\n                                  std::move(labels));\n    }\n\n    // Invokes the passed function for all registered metrics.\n    //\n    void read_all(\n        std::function<void(std::string_view name, double value, const MetricLabelSet& labels)>&& fn) const\n    {\n        struct MetricSnapshot {\n            std::string_view name;\n            double value;\n            MetricLabelSet labels;\n        };\n        std::vector<MetricSnapshot> local_snapshot;\n        {\n            std::unique_lock<std::mutex> lock{this->mutex_};\n            for (const auto& p : this->metrics_) {\n                local_snapshot.emplace_back(MetricSnapshot{\n                    static_cast<const std::string&>(p.second->get_name()),\n                    p.second->get_value(),\n                    p.second->get_labels(),\n                });\n            }\n        }\n        for (const auto& m : local_snapshot) {\n            fn(m.name, m.value, m.labels);\n        }\n    }\n\n    // Removes the passed scalar metric from this registry.\n    //\n    template <typename T>\n    MetricRegistry& remove(T& obj)\n    {\n        std::unique_lock<std::mutex> lock{this->mutex_};\n        this->metrics_.erase(&obj);\n        return *this;\n    }\n\n    // Removes the passed histogram metric from this registry.\n    //\n    template <typename T>\n    MetricRegistry& remove(HistogramMetric<T>& histogram)\n    {\n        std::unique_lock<std::mutex> lock{this->mutex_};\n        for (auto& obj : histogram.buckets_) {\n            this->metrics_.erase(&obj);\n        }\n        return *this;\n    }\n\n    // Adds the passed metric exporter (`obj`) to the registry under the given `name`; the metric will\n    // automatically be removed from the registry when the last (moved) copy of the returned guard object goes\n    // out of scope.\n    //\n    template <typename T>\n    auto scoped_add(std::string_view name, T& obj)\n    {\n        this->add(name, obj);\n        return finally([&obj, this] {\n            this->remove(obj);\n        });\n    }\n\n   private:\n    mutable std::mutex mutex_;\n    std::unordered_multimap<const void*, std::unique_ptr<MetricExporter>> metrics_;\n};\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// A process-wide instance of MetricRegistry used by various components by default.\n//\nMetricRegistry& global_metric_registry();\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n#if 0\n  const auto metric_name = [this](std::string_view property) {\n      return ::batt::to_string(\"Scope_\", this->name_, \"_\", property);\n  };\n\n#define ADD_METRIC_(n) ::batt::global_metric_registry().add(metric_name(#n), this->metrics_.n)\n\n  ADD_METRIC_(field_name);\n\n#undef ADD_METRIC_\n\n::batt::global_metric_registry()\n    .add(metric_name(\"other_name\"), this->other_thing_);\n\n#endif\n\n}  // namespace batt\n\n#endif  // BATTERIES_METRICS_METRIC_REGISTRY_HPP\n\n#if BATT_HEADER_ONLY\n#include <batteries/metrics/metric_registry_impl.hpp>\n#endif  // BATT_HEADER_ONLY",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::MetricLabel",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::MetricLabel",
      "refid": "structbatt_1_1MetricLabel",
      "title": "batt::MetricLabel",
      "url": "/_autogen/Classes/structbatt_1_1MetricLabel/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "derivedClasses": [
        {
          "external": false,
          "name": "batt::DerivedMetricExporter< T >",
          "refid": "classbatt_1_1DerivedMetricExporter",
          "url": "/_autogen/Classes/classbatt_1_1DerivedMetricExporter/",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": false,
          "name": "batt::QueueDepthExporter",
          "refid": "classbatt_1_1QueueDepthExporter",
          "url": "/_autogen/Classes/classbatt_1_1QueueDepthExporter/",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": false,
          "name": "batt::ScalarMetricExporter< T >",
          "refid": "classbatt_1_1ScalarMetricExporter",
          "url": "/_autogen/Classes/classbatt_1_1ScalarMetricExporter/",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": false,
          "name": "batt::VariableExporter< T >",
          "refid": "classbatt_1_1VariableExporter",
          "url": "/_autogen/Classes/classbatt_1_1VariableExporter/",
          "virtual": "non-virtual",
          "visibility": "public"
        },
        {
          "external": false,
          "name": "batt::WatchExporter< T >",
          "refid": "classbatt_1_1WatchExporter",
          "url": "/_autogen/Classes/classbatt_1_1WatchExporter/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "fullname": "batt::MetricExporter",
      "kind": "class",
      "language": "cpp",
      "name": "batt::MetricExporter",
      "refid": "classbatt_1_1MetricExporter",
      "title": "batt::MetricExporter",
      "url": "/_autogen/Classes/classbatt_1_1MetricExporter/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::MetricExporter",
          "refid": "classbatt_1_1MetricExporter",
          "url": "/_autogen/Classes/classbatt_1_1MetricExporter/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "brief": "Exports a single value metric. ",
      "category": "classes",
      "fullname": "batt::ScalarMetricExporter",
      "kind": "class",
      "language": "cpp",
      "name": "batt::ScalarMetricExporter",
      "refid": "classbatt_1_1ScalarMetricExporter",
      "summary": "Exports a single value metric. ",
      "title": "batt::ScalarMetricExporter",
      "url": "/_autogen/Classes/classbatt_1_1ScalarMetricExporter/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::MetricExporter",
          "refid": "classbatt_1_1MetricExporter",
          "url": "/_autogen/Classes/classbatt_1_1MetricExporter/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::DerivedMetricExporter",
      "kind": "class",
      "language": "cpp",
      "name": "batt::DerivedMetricExporter",
      "refid": "classbatt_1_1DerivedMetricExporter",
      "title": "batt::DerivedMetricExporter",
      "url": "/_autogen/Classes/classbatt_1_1DerivedMetricExporter/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::MetricExporter",
          "refid": "classbatt_1_1MetricExporter",
          "url": "/_autogen/Classes/classbatt_1_1MetricExporter/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::VariableExporter",
      "kind": "class",
      "language": "cpp",
      "name": "batt::VariableExporter",
      "refid": "classbatt_1_1VariableExporter",
      "title": "batt::VariableExporter",
      "url": "/_autogen/Classes/classbatt_1_1VariableExporter/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::MetricExporter",
          "refid": "classbatt_1_1MetricExporter",
          "url": "/_autogen/Classes/classbatt_1_1MetricExporter/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::WatchExporter",
      "kind": "class",
      "language": "cpp",
      "name": "batt::WatchExporter",
      "refid": "classbatt_1_1WatchExporter",
      "title": "batt::WatchExporter",
      "url": "/_autogen/Classes/classbatt_1_1WatchExporter/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::MetricExporter",
          "refid": "classbatt_1_1MetricExporter",
          "url": "/_autogen/Classes/classbatt_1_1MetricExporter/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::QueueDepthExporter",
      "kind": "class",
      "language": "cpp",
      "name": "batt::QueueDepthExporter",
      "refid": "classbatt_1_1QueueDepthExporter",
      "title": "batt::QueueDepthExporter",
      "url": "/_autogen/Classes/classbatt_1_1QueueDepthExporter/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::MetricRegistry",
      "kind": "class",
      "language": "cpp",
      "name": "batt::MetricRegistry",
      "refid": "classbatt_1_1MetricRegistry",
      "title": "batt::MetricRegistry",
      "url": "/_autogen/Classes/classbatt_1_1MetricRegistry/",
      "visibility": "public"
    }
  ],
  "refid": "metric__registry_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/metrics/metric_registry.hpp",
  "url": "/_autogen/Files/metric__registry_8hpp/#file-metric-registry.hpp",
  "visibility": "public"
}