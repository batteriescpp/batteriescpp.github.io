{
  "abstract": false,
  "anchor": "",
  "brief": "Base class for [Reader]() and [Writer]() scoped lock guards. ",
  "category": "classes",
  "const": false,
  "definition": "",
  "derivedClasses": [
    {
      "external": false,
      "name": "batt::BasicReadWriteLock< WatchImplT, kPollForNext >::Reader",
      "refid": "classbatt_1_1BasicReadWriteLock_1_1Reader",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1Reader/",
      "virtual": "non-virtual",
      "visibility": "private"
    },
    {
      "external": false,
      "name": "batt::BasicReadWriteLock< WatchImplT, kPollForNext >::Writer",
      "refid": "classbatt_1_1BasicReadWriteLock_1_1Writer",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1Writer/",
      "virtual": "non-virtual",
      "visibility": "private"
    }
  ],
  "explicit": false,
  "fullname": "batt::BasicReadWriteLock::QueueNode",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/async/read_write_lock.hpp>",
  "inline": false,
  "kind": "class",
  "language": "cpp",
  "location": {
    "bodyEnd": 190,
    "bodyFile": "batteries/async/read_write_lock.hpp",
    "bodyStart": 77,
    "column": 5,
    "file": "batteries/async/read_write_lock.hpp",
    "line": 76
  },
  "name": "batt::BasicReadWriteLock::QueueNode",
  "override": false,
  "parent": {
    "anchor": "",
    "brief": "An MCS-style fair reader/writer lock. ",
    "category": "classes",
    "fullname": "batt::BasicReadWriteLock",
    "kind": "class",
    "language": "cpp",
    "name": "batt::BasicReadWriteLock",
    "refid": "classbatt_1_1BasicReadWriteLock",
    "summary": "An MCS-style fair reader/writer lock. ",
    "title": "batt::BasicReadWriteLock",
    "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock/",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "An MCS-style fair reader/writer lock. ",
      "category": "classes",
      "fullname": "batt::BasicReadWriteLock",
      "kind": "class",
      "language": "cpp",
      "name": "batt::BasicReadWriteLock",
      "refid": "classbatt_1_1BasicReadWriteLock",
      "summary": "An MCS-style fair reader/writer lock. ",
      "title": "batt::BasicReadWriteLock",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock/",
      "visibility": "public"
    }
  ],
  "publicAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-lock-",
      "category": "attributes",
      "const": false,
      "definition": "Lock* const batt::BasicReadWriteLock< WatchImplT, kPollForNext >::QueueNode::lock_",
      "explicit": false,
      "fullname": "batt::BasicReadWriteLock::QueueNode::lock_",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 186,
        "column": 20,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 186
      },
      "name": "lock_",
      "override": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1aa4168d8b61cecaa9b3cd94cad540bc39",
      "static": false,
      "strong": false,
      "title": "lock_",
      "type": "[Lock](/_autogen/Classes/classbatt_1_1BasicReadWriteLock/) *const",
      "typePlain": "Lock *const",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#variable-lock-",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-class-",
      "category": "attributes",
      "const": false,
      "definition": "NodeClass const batt::BasicReadWriteLock< WatchImplT, kPollForNext >::QueueNode::class_",
      "explicit": false,
      "fullname": "batt::BasicReadWriteLock::QueueNode::class_",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 187,
        "column": 25,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 187
      },
      "name": "class_",
      "override": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1a95e04a3ce23be7fe897ee07fa2ffd086",
      "static": false,
      "strong": false,
      "title": "class_",
      "type": "NodeClass const",
      "typePlain": "NodeClass const",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#variable-class-",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-next-",
      "category": "attributes",
      "const": false,
      "definition": "CpuCacheLineIsolated<WatchImplT<QueueNode*> > batt::BasicReadWriteLock< WatchImplT, kPollForNext >::QueueNode::next_",
      "explicit": false,
      "fullname": "batt::BasicReadWriteLock::QueueNode::next_",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 188,
        "column": 30,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 188
      },
      "name": "next_",
      "override": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1a5f38b7bdcc02ef19d0a6080decfb3eca",
      "static": false,
      "strong": false,
      "title": "next_",
      "type": "[CpuCacheLineIsolated](/_autogen/Classes/classbatt_1_1CpuCacheLineIsolated/)< WatchImplT< [QueueNode](/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/) * > >",
      "typePlain": "CpuCacheLineIsolated< WatchImplT< QueueNode * > >",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#variable-next-",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#variable-state-",
      "category": "attributes",
      "const": false,
      "definition": "CpuCacheLineIsolated<WatchImplT<u32> > batt::BasicReadWriteLock< WatchImplT, kPollForNext >::QueueNode::state_",
      "explicit": false,
      "fullname": "batt::BasicReadWriteLock::QueueNode::state_",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 189,
        "column": 30,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 189
      },
      "name": "state_",
      "override": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1a7dbb3ab80e4c0c4f54958ed874fed4fc",
      "static": false,
      "strong": false,
      "title": "state_",
      "type": "[CpuCacheLineIsolated](/_autogen/Classes/classbatt_1_1CpuCacheLineIsolated/)< WatchImplT< u32 > >",
      "typePlain": "CpuCacheLineIsolated< WatchImplT< u32 > >",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#variable-state-",
      "visibility": "public"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-queuenode",
      "argsString": "(Lock *lock, NodeClass node_class) noexcept",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "batt::BasicReadWriteLock< WatchImplT, kPollForNext >::QueueNode::QueueNode",
      "deleted": false,
      "explicit": true,
      "fullname": "batt::BasicReadWriteLock::QueueNode::QueueNode",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 88,
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 86,
        "column": 18,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 86
      },
      "name": "QueueNode",
      "override": false,
      "params": [
        {
          "name": "lock",
          "type": "[Lock](/_autogen/Classes/classbatt_1_1BasicReadWriteLock/) *",
          "typePlain": "Lock *"
        },
        {
          "name": "node_class",
          "type": "NodeClass",
          "typePlain": "NodeClass"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1a3b09c66d77eb118df9c4a8cda0a50b59",
      "static": false,
      "strong": false,
      "title": "QueueNode",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#function-queuenode",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-fast-lock-or-get-predecessor",
      "argsString": "(u32 &observed_state) noexcept",
      "brief": "The initial fast path is the same for both readers and writers: attempt to fetch-and-store the lock->tail_ pointer to this; if the previous value was nullptr, then `this` is the current holder of the lock (regardless whether it is a writer or a reader). ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "QueueNode* batt::BasicReadWriteLock< WatchImplT, kPollForNext >::QueueNode::fast_lock_or_get_predecessor",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::BasicReadWriteLock::QueueNode::fast_lock_or_get_predecessor",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 103,
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 95,
        "column": 19,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 95
      },
      "name": "fast_lock_or_get_predecessor",
      "override": false,
      "params": [
        {
          "name": "observed_state",
          "type": "u32 &",
          "typePlain": "u32 &"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1af5868e563afbb515805691465c2bdaa7",
      "static": false,
      "strong": false,
      "summary": "The initial fast path is the same for both readers and writers: attempt to fetch-and-store the lock->tail_ pointer to this; if the previous value was nullptr, then this is the current holder of the lock (regardless whether it is a writer or a reader). ",
      "title": "fast_lock_or_get_predecessor",
      "type": "[QueueNode](/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/) *",
      "typePlain": "QueueNode *",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#function-fast-lock-or-get-predecessor",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-set-unblocked",
      "argsString": "(u32 &observed_state) noexcept",
      "brief": "Updates this->state_ (and observed_state), clearing the blocked bit. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void batt::BasicReadWriteLock< WatchImplT, kPollForNext >::QueueNode::set_unblocked",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::BasicReadWriteLock::QueueNode::set_unblocked",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 111,
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 108,
        "column": 14,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 108
      },
      "name": "set_unblocked",
      "override": false,
      "params": [
        {
          "name": "observed_state",
          "type": "u32 &",
          "typePlain": "u32 &"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1ad0f99e2fbd836cc7b8e9576fe69bcd89",
      "static": false,
      "strong": false,
      "summary": "Updates this->state_ (and observed_state), clearing the blocked bit. ",
      "title": "set_unblocked",
      "type": "void",
      "typePlain": "void",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#function-set-unblocked",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-await-unblocked",
      "argsString": "(u32 &observed_state) noexcept",
      "brief": "Spins/waits for the blocked bit of this->state_ to be 0. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void batt::BasicReadWriteLock< WatchImplT, kPollForNext >::QueueNode::await_unblocked",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::BasicReadWriteLock::QueueNode::await_unblocked",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 129,
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 116,
        "column": 14,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 116
      },
      "name": "await_unblocked",
      "override": false,
      "params": [
        {
          "name": "observed_state",
          "type": "u32 &",
          "typePlain": "u32 &"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1a695cb49fce8b78dce6da49f872750ac1",
      "static": false,
      "strong": false,
      "summary": "Spins/waits for the blocked bit of this->state_ to be 0. ",
      "title": "await_unblocked",
      "type": "void",
      "typePlain": "void",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#function-await-unblocked",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-fast-unlock",
      "argsString": "(QueueNode *&observed_next) noexcept",
      "brief": "Attempts a fast release of the lock. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "bool batt::BasicReadWriteLock< WatchImplT, kPollForNext >::QueueNode::fast_unlock",
      "deleted": false,
      "details": "The fast path is the same for both readers and writers; the goal is to _either_ replace `lock->tail` as though we were never there (the uncontended case), _or_ to obtain the next pointer so we know the successor of this node. Depending on whether this function is called by a reader or writer, there are slightly different things to do once we know the true value of `next`.",
      "explicit": false,
      "fullname": "batt::BasicReadWriteLock::QueueNode::fast_unlock",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 163,
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 141,
        "column": 14,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 141
      },
      "name": "fast_unlock",
      "override": false,
      "params": [
        {
          "name": "observed_next",
          "type": "[QueueNode](/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/) *&",
          "typePlain": "QueueNode *&"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1a4e42bcee0f54fe028f6dd0f229decdb6",
      "returns": [
        "true iff there is no successor of this (implies the fast unlock succeeded). "
      ],
      "static": false,
      "strong": false,
      "summary": "Attempts a fast release of the lock. ",
      "title": "fast_unlock",
      "type": "bool",
      "typePlain": "bool",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#function-fast-unlock",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-await-next",
      "argsString": "(QueueNode *&observed_next)",
      "brief": "Waits until this->next_ is non-null (indicating that the successor of this node is done accessing our state). ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "void batt::BasicReadWriteLock< WatchImplT, kPollForNext >::QueueNode::await_next",
      "deleted": false,
      "details": "Whether or not we will need to use this->next_ depends on the state of `this`, after non-nullptr next is observed. ",
      "explicit": false,
      "fullname": "batt::BasicReadWriteLock::QueueNode::await_next",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 182,
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 170,
        "column": 14,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 170
      },
      "name": "await_next",
      "override": false,
      "params": [
        {
          "name": "observed_next",
          "type": "[QueueNode](/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/) *&",
          "typePlain": "QueueNode *&"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1a1852a6bde4077c271770940aa830830f",
      "static": false,
      "strong": false,
      "summary": "Waits until this->next_ is non-null (indicating that the successor of this node is done accessing our state). ",
      "title": "await_next",
      "type": "void",
      "typePlain": "void",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#function-await-next",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "publicTypes": [
    {
      "abstract": false,
      "anchor": "#enum-nodeclass",
      "category": "types",
      "const": false,
      "definition": "",
      "enumvalues": [
        {
          "anchor": "#enumvalue-kreading",
          "category": "types",
          "definition": "",
          "fullname": "NodeClass::kReading",
          "hasDetails": false,
          "kind": "enumvalue",
          "language": "",
          "name": "kReading",
          "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1a4b669e8c1d5840792fad74984c897cc2a2c3e9a30954b5f78b2a0ca61cd8ebb62",
          "title": "kReading",
          "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#enumvalue-kreading",
          "visibility": "public"
        },
        {
          "anchor": "#enumvalue-kwriting",
          "category": "types",
          "definition": "",
          "fullname": "NodeClass::kWriting",
          "hasDetails": false,
          "kind": "enumvalue",
          "language": "",
          "name": "kWriting",
          "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1a4b669e8c1d5840792fad74984c897cc2af08d470540f773027311eae28ea2eba7",
          "title": "kWriting",
          "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#enumvalue-kwriting",
          "visibility": "public"
        }
      ],
      "explicit": false,
      "fullname": "batt::BasicReadWriteLock::QueueNode::NodeClass",
      "hasDetails": false,
      "inline": false,
      "kind": "enum",
      "language": "cpp",
      "location": {
        "bodyEnd": 82,
        "bodyFile": "batteries/async/read_write_lock.hpp",
        "bodyStart": 79,
        "column": 9,
        "file": "batteries/async/read_write_lock.hpp",
        "line": 79
      },
      "name": "NodeClass",
      "override": false,
      "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode_1a4b669e8c1d5840792fad74984c897cc2",
      "static": false,
      "strong": false,
      "title": "NodeClass",
      "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/#enum-nodeclass",
      "visibility": "public"
    }
  ],
  "refid": "classbatt_1_1BasicReadWriteLock_1_1QueueNode",
  "static": false,
  "strong": false,
  "summary": "Base class for Reader and Writer scoped lock guards. ",
  "title": "batt::BasicReadWriteLock::QueueNode",
  "url": "/_autogen/Classes/classbatt_1_1BasicReadWriteLock_1_1QueueNode/",
  "visibility": "public"
}