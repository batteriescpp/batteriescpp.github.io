{
  "abstract": false,
  "anchor": "",
  "brief": "A value of the atomic variable that implements [AtomicCounterGauge](/_autogen/Classes/classbatt_1_1AtomicCounterGauge/). ",
  "category": "classes",
  "const": false,
  "definition": "",
  "details": "Can be interpreted either as add/sub counters (via [State::get_add_count](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-get-add-count), [State::get_sub_count](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-get-sub-count)) or as a single combined \"gauge\" value (via [State::get_gauge()](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-get-gauge)).\n\nIMPORTANT: the dynamic range of counters and gauges is constrained by the mask values `AtomicCounterGauge::kCountMask` and `AtomicCounterGauge::kGaugeMask` respectively; i.e., if the \"true\" value of, say, the gauge interpretation of a [State](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/)`s` is expected to be `x`, then application code may only assume that `(s.get_gauge() & [AtomicCounterGauge](/_autogen/Classes/classbatt_1_1AtomicCounterGauge/)<T>::kGaugeMask) == (x & [AtomicCounterGauge](/_autogen/Classes/classbatt_1_1AtomicCounterGauge/)<T>::kGaugeMask)`, but generally NOT that `s.get_gauge() == x`. This caveat applies to all returned values for this class (so is only explicitly stated here). ",
  "explicit": false,
  "friends": [
    {
      "abstract": false,
      "anchor": "#friend-atomiccountergauge<-intt->",
      "argsString": "",
      "category": "friends",
      "const": false,
      "default": false,
      "definition": "friend class AtomicCounterGauge< IntT >",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::AtomicCounterGauge< IntT >",
      "hasDetails": false,
      "inline": false,
      "kind": "friend",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 92,
        "column": 17,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 338
      },
      "name": "AtomicCounterGauge< IntT >",
      "override": false,
      "params": [
        {
          "name": "",
          "type": "[AtomicCounterGauge](/_autogen/Classes/classbatt_1_1AtomicCounterGauge/)< IntT >",
          "typePlain": "AtomicCounterGauge< IntT >"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1a84a5596636963f36c10a5e9143e4f968",
      "static": false,
      "strong": false,
      "title": "AtomicCounterGauge< IntT >",
      "type": "class",
      "typePlain": "class",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#friend-atomiccountergauge<-intt->",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "fullname": "batt::AtomicCounterGauge::State",
  "hasAdditionalMembers": false,
  "hasDetails": true,
  "includes": "<batteries/atomic_counter_gauge.hpp>",
  "inline": false,
  "kind": "class",
  "language": "cpp",
  "location": {
    "bodyEnd": 209,
    "bodyFile": "batteries/atomic_counter_gauge.hpp",
    "bodyStart": 90,
    "column": 5,
    "file": "batteries/atomic_counter_gauge.hpp",
    "line": 89
  },
  "name": "batt::AtomicCounterGauge::State",
  "override": false,
  "parent": {
    "anchor": "",
    "brief": "An atomic variable that maintains a gauge-like value, which can rise and fall over time, by means of two monotonic counters: one for increases, one for decreases. ",
    "category": "classes",
    "fullname": "batt::AtomicCounterGauge",
    "kind": "class",
    "language": "cpp",
    "name": "batt::AtomicCounterGauge",
    "refid": "classbatt_1_1AtomicCounterGauge",
    "summary": "An atomic variable that maintains a gauge-like value, which can rise and fall over time, by means of two monotonic counters: one for increases, one for decreases. ",
    "title": "batt::AtomicCounterGauge",
    "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge/",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "An atomic variable that maintains a gauge-like value, which can rise and fall over time, by means of two monotonic counters: one for increases, one for decreases. ",
      "category": "classes",
      "fullname": "batt::AtomicCounterGauge",
      "kind": "class",
      "language": "cpp",
      "name": "batt::AtomicCounterGauge",
      "refid": "classbatt_1_1AtomicCounterGauge",
      "summary": "An atomic variable that maintains a gauge-like value, which can rise and fall over time, by means of two monotonic counters: one for increases, one for decreases. ",
      "title": "batt::AtomicCounterGauge",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge/",
      "visibility": "public"
    }
  ],
  "privateAttributes": [
    {
      "abstract": false,
      "anchor": "#variable-value-",
      "brief": "The state value. ",
      "category": "attributes",
      "const": false,
      "definition": "value_type batt::AtomicCounterGauge< IntT >::State::value_",
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::value_",
      "hasDetails": false,
      "inline": false,
      "kind": "variable",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 208,
        "column": 20,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 208
      },
      "name": "value_",
      "override": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1aa859f5a8e2c1027cb14bd3a244e19045",
      "static": false,
      "strong": false,
      "summary": "The state value. ",
      "title": "value_",
      "type": "value_type",
      "typePlain": "value_type",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#variable-value-",
      "visibility": "private"
    }
  ],
  "privateFunctions": [
    {
      "abstract": false,
      "anchor": "#function-impl-add-count",
      "argsString": "() const noexcept",
      "brief": "Returns the entire lower half of the state value; this is necessary to accurately compute the gauge value through the entire dynamic range of the variable, since excluding the most significant bit will in some cases break the apparent monotonicity of the counter. ",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "value_type batt::AtomicCounterGauge< IntT >::State::impl_add_count",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::impl_add_count",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 193,
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 190,
        "column": 20,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 190
      },
      "name": "impl_add_count",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1a7fe7bfa294f85184ab97be69760b7a06",
      "static": false,
      "strong": false,
      "summary": "Returns the entire lower half of the state value; this is necessary to accurately compute the gauge value through the entire dynamic range of the variable, since excluding the most significant bit will in some cases break the apparent monotonicity of the counter. ",
      "title": "impl_add_count",
      "type": "value_type",
      "typePlain": "value_type",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-impl-add-count",
      "virtual": false,
      "visibility": "private"
    },
    {
      "abstract": false,
      "anchor": "#function-impl-sub-count",
      "argsString": "() const noexcept",
      "brief": "Returns the entire upper half of the state value; this is necessary to accurately compute the gauge value through the entire dynamic range of the variable, since excluding the most significant bit will in some cases break the apparent monotonicity of the counter. ",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "value_type batt::AtomicCounterGauge< IntT >::State::impl_sub_count",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::impl_sub_count",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 202,
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 199,
        "column": 20,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 199
      },
      "name": "impl_sub_count",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1ae2058a6d3a965c8991bea4320023bcaf",
      "static": false,
      "strong": false,
      "summary": "Returns the entire upper half of the state value; this is necessary to accurately compute the gauge value through the entire dynamic range of the variable, since excluding the most significant bit will in some cases break the apparent monotonicity of the counter. ",
      "title": "impl_sub_count",
      "type": "value_type",
      "typePlain": "value_type",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-impl-sub-count",
      "virtual": false,
      "visibility": "private"
    }
  ],
  "publicFunctions": [
    {
      "abstract": false,
      "anchor": "#function-from-counts",
      "argsString": "(value_type add_count, value_type sub_count) noexcept",
      "brief": "Constructs and returns a [State](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/) value representing the combination of adding and subtracting the given counts. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "static State batt::AtomicCounterGauge< IntT >::State::from_counts",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::from_counts",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 105,
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 99,
        "column": 22,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 99
      },
      "name": "from_counts",
      "override": false,
      "params": [
        {
          "name": "add_count",
          "type": "value_type",
          "typePlain": "value_type"
        },
        {
          "name": "sub_count",
          "type": "value_type",
          "typePlain": "value_type"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1a029e4051da5ffd0a6a6b97d2a64bfcf0",
      "static": true,
      "strong": false,
      "summary": "Constructs and returns a State value representing the combination of adding and subtracting the given counts. ",
      "title": "from_counts",
      "type": "[State](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/)",
      "typePlain": "State",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-from-counts",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-from-gauge",
      "argsString": "(value_type gauge_value) noexcept",
      "brief": "Constructs and returns a [State](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/) value representing an instantaneous gauge value. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "static State batt::AtomicCounterGauge< IntT >::State::from_gauge",
      "deleted": false,
      "details": "This is equivalent to `State::from_counts(gauge_value, 0)` (or in fact to any expression `[State::from_counts](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-from-counts)(gauge_value + K, K)` for arbitrary K <= AtomicCounterGauge::kGaugeMask). ",
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::from_gauge",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 115,
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 112,
        "column": 22,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 112
      },
      "name": "from_gauge",
      "override": false,
      "params": [
        {
          "name": "gauge_value",
          "type": "value_type",
          "typePlain": "value_type"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1a9be2d82541949ce7cf89ff8af9ac7a24",
      "static": true,
      "strong": false,
      "summary": "Constructs and returns a State value representing an instantaneous gauge value. ",
      "title": "from_gauge",
      "type": "[State](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/)",
      "typePlain": "State",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-from-gauge",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-normalize",
      "argsString": "(value_type observed_state) noexcept",
      "brief": "Returns the normalized form of a given raw state value. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "static value_type batt::AtomicCounterGauge< IntT >::State::normalize",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::normalize",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 136,
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 119,
        "column": 27,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 119
      },
      "name": "normalize",
      "override": false,
      "params": [
        {
          "name": "observed_state",
          "type": "value_type",
          "typePlain": "value_type"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1ab6a7dc48aba15a16e683c8e6ebc68888",
      "static": true,
      "strong": false,
      "summary": "Returns the normalized form of a given raw state value. ",
      "title": "normalize",
      "type": "value_type",
      "typePlain": "value_type",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-normalize",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-state",
      "argsString": "(value_type value) noexcept",
      "brief": "Constructs a [State](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/) from the exact atomic representation `value`. ",
      "category": "functions",
      "const": false,
      "default": false,
      "definition": "batt::AtomicCounterGauge< IntT >::State::State",
      "deleted": false,
      "details": "`value`'s least significant bits should be set to the add counter, and most significant bits should be set to the subtract counter. The value should also be normalized (i.e., at most 1 of the most significant bit within either count value may be set; if they are both 1, then the normalized form sets them both to 0).\n\nNOTE: Because this constructor is used internally in places where it is already known that `value` is in normalized form, this constructor does NOT make any attempt to validate or normalize the passed value. If you pass a non-normalized value here, behavior is undefined. ",
      "explicit": true,
      "fullname": "batt::AtomicCounterGauge::State::State",
      "hasDetails": true,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 152,
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 150,
        "column": 18,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 150
      },
      "name": "State",
      "override": false,
      "params": [
        {
          "name": "value",
          "type": "value_type",
          "typePlain": "value_type"
        }
      ],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1aa925e060825540656976fde7b7ba7a0b",
      "static": false,
      "strong": false,
      "summary": "Constructs a State from the exact atomic representation value. ",
      "title": "State",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-state",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-get-gauge",
      "argsString": "() const noexcept",
      "brief": "Returns the gauge interpretation value of the [State](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/). ",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "value_type batt::AtomicCounterGauge< IntT >::State::get_gauge",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::get_gauge",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 161,
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 158,
        "column": 20,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 158
      },
      "name": "get_gauge",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1ad513bc512e9a7bab4c94dd2db9502daa",
      "static": false,
      "strong": false,
      "summary": "Returns the gauge interpretation value of the State. ",
      "title": "get_gauge",
      "type": "value_type",
      "typePlain": "value_type",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-get-gauge",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-get-add-count",
      "argsString": "() const noexcept",
      "brief": "Returns the add (positive) component of the counter(s) interpretation of the [State](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/). ",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "value_type batt::AtomicCounterGauge< IntT >::State::get_add_count",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::get_add_count",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 168,
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 165,
        "column": 20,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 165
      },
      "name": "get_add_count",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1a5213f45eb0734e17bf9bc3beb7caa14f",
      "static": false,
      "strong": false,
      "summary": "Returns the add (positive) component of the counter(s) interpretation of the State. ",
      "title": "get_add_count",
      "type": "value_type",
      "typePlain": "value_type",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-get-add-count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-get-sub-count",
      "argsString": "() const noexcept",
      "brief": "Returns the subtract (negative) component of the counter(s) interpretation of the [State](/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/). ",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "value_type batt::AtomicCounterGauge< IntT >::State::get_sub_count",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::get_sub_count",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 175,
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 172,
        "column": 20,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 172
      },
      "name": "get_sub_count",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1a81418c4298fa5ab7781fd3325fb9ad3b",
      "static": false,
      "strong": false,
      "summary": "Returns the subtract (negative) component of the counter(s) interpretation of the State. ",
      "title": "get_sub_count",
      "type": "value_type",
      "typePlain": "value_type",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-get-sub-count",
      "virtual": false,
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#function-value",
      "argsString": "() const noexcept",
      "brief": "Returns the raw state value. ",
      "category": "functions",
      "const": true,
      "default": false,
      "definition": "value_type batt::AtomicCounterGauge< IntT >::State::value",
      "deleted": false,
      "explicit": false,
      "fullname": "batt::AtomicCounterGauge::State::value",
      "hasDetails": false,
      "inline": true,
      "kind": "function",
      "language": "cpp",
      "location": {
        "bodyEnd": 182,
        "bodyFile": "batteries/atomic_counter_gauge.hpp",
        "bodyStart": 179,
        "column": 20,
        "file": "batteries/atomic_counter_gauge.hpp",
        "line": 179
      },
      "name": "value",
      "override": false,
      "params": [],
      "pureVirtual": false,
      "refid": "classbatt_1_1AtomicCounterGauge_1_1State_1a6a3529c6f0d5c6255e8e1f6fe43fb001",
      "static": false,
      "strong": false,
      "summary": "Returns the raw state value. ",
      "title": "value",
      "type": "value_type",
      "typePlain": "value_type",
      "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/#function-value",
      "virtual": false,
      "visibility": "public"
    }
  ],
  "refid": "classbatt_1_1AtomicCounterGauge_1_1State",
  "static": false,
  "strong": false,
  "summary": "A value of the atomic variable that implements AtomicCounterGauge. ",
  "title": "batt::AtomicCounterGauge::State",
  "url": "/_autogen/Classes/classbatt_1_1AtomicCounterGauge_1_1State/",
  "visibility": "public"
}