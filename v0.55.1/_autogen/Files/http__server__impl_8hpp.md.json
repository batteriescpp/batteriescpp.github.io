{
  "abstract": false,
  "anchor": "#file-http-server-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-http-http-server-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_HTTP_HTTP_SERVER_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/http/http_server_impl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/http/http_server_impl.hpp",
        "line": 6
      },
      "name": "BATTERIES_HTTP_HTTP_SERVER_IMPL_HPP",
      "override": false,
      "refid": "http__server__impl_8hpp_1a78428485922162ca294dbb58761e2666",
      "static": false,
      "strong": false,
      "title": "BATTERIES_HTTP_HTTP_SERVER_IMPL_HPP",
      "url": "/_autogen/Files/http__server__impl_8hpp/#define-batteries-http-http-server-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/http/http_server_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/http/http_server_impl.hpp",
    "line": 0
  },
  "name": "batteries/http/http_server_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/http",
    "category": "dirs",
    "fullname": "batteries/http",
    "kind": "dir",
    "language": "",
    "name": "batteries/http",
    "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
    "title": "batteries/http",
    "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/http",
      "category": "dirs",
      "fullname": "batteries/http",
      "kind": "dir",
      "language": "",
      "name": "batteries/http",
      "refid": "dir_9b7f6a4fee6d4e32025f5ad2daa53829",
      "title": "batteries/http",
      "url": "/_autogen/Files/dir_9b7f6a4fee6d4e32025f5ad2daa53829/#dir-batteries/http",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2024 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_HTTP_HTTP_SERVER_IMPL_HPP\n#define BATTERIES_HTTP_HTTP_SERVER_IMPL_HPP\n\n#include <batteries/config.hpp>\n\n#include <batteries/assert.hpp>\n#include <batteries/async/backoff.hpp>\n#include <batteries/http/http_server.hpp>\n#include <batteries/http/http_server_connection.hpp>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL /*explicit*/ HttpServer::HttpServer(boost::asio::io_context& io, HostAddress&& host_address,\n                                                     HttpRequestDispatcherFactoryFn&& dispatcher_factory,\n                                                     const Optional<HttpServerSettings>& settings) noexcept\n    : io_{io}\n    , host_address_{std::move(host_address)}\n    , dispatcher_factory_{std::move(dispatcher_factory)}\n    , settings_{settings.or_else(&HttpServerSettings::with_default_values)}\n    , acceptor_{this->io_.get_executor()}\n    , connection_tokens_{this->settings_.max_connections}\n    , acceptor_task_{io.get_executor(),\n                     [this] {\n                         this->acceptor_task_main();\n                     },\n                     \"HttpServer::acceptor_task\"}\n{\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL HttpServer::~HttpServer() noexcept\n{\n    this->halt();\n    this->join();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void HttpServer::halt()\n{\n    this->halt_requested_.set_value(true);\n\n    boost::system::error_code ec;\n    this->acceptor_.close(ec);\n    if (ec) {\n        BATT_LOG_ERROR() << \"Error closing acceptor: \" << ec;\n    }\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void HttpServer::join()\n{\n    this->acceptor_task_.join();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void HttpServer::acceptor_task_main()\n{\n    this->final_status_ = [&]() -> Status {\n        BATT_VLOG(1) << \"HttpServer::acceptor_task entered\";\n\n        BATT_CHECK_EQ(this->host_address_.scheme, \"http\") << \"TODO [tastolfi 2022-05-06] implement https!\";\n\n        // Resolve the server endpoint so we can bind our acceptor socket.\n        //\n        BATT_ASSIGN_OK_RESULT(SmallVec<boost::asio::ip::tcp::endpoint> endpoints,\n                              await_resolve(this->io_, this->host_address_));\n\n        if (endpoints.empty()) {\n            return StatusCode::kInvalidArgument;\n        }\n        boost::asio::ip::tcp::endpoint endpoint = endpoints[0];\n\n        {\n            boost::system::error_code ec;\n\n            this->acceptor_.open(endpoint.protocol(), ec);\n            BATT_REQUIRE_OK(ec);\n\n            this->acceptor_.set_option(boost::asio::ip::tcp::acceptor::reuse_address(true), ec);\n            BATT_REQUIRE_OK(ec);\n\n            this->acceptor_.bind(endpoint, ec);\n            BATT_REQUIRE_OK(ec);\n\n            this->acceptor_.listen(boost::asio::ip::tcp::socket::max_listen_connections, ec);\n            BATT_REQUIRE_OK(ec);\n        }\n\n        while (!this->halt_requested_.get_value()) {\n            BATT_VLOG(1) << \"Waiting for connection\";\n\n            IOResult<boost::asio::ip::tcp::socket> socket = Task::await_accept(this->acceptor_);\n            BATT_REQUIRE_OK(socket);\n\n            BATT_VLOG(1) << \"Client connected; spawning connection task\";\n\n            HttpServerConnection::spawn(std::move(*socket), make_copy(this->dispatcher_factory_),\n                                        this->settings_);\n        }\n\n        return OkStatus();\n    }();\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_HTTP_HTTP_SERVER_IMPL_HPP",
  "refid": "http__server__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/http/http_server_impl.hpp",
  "url": "/_autogen/Files/http__server__impl_8hpp/#file-http-server-impl.hpp",
  "visibility": "public"
}