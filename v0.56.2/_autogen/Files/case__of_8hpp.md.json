{
  "abstract": false,
  "anchor": "#file-case-of.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batt-specialize-visitor-result",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_SPECIALIZE_VISITOR_RESULT",
      "hasDetails": false,
      "initializer": "    template <typename Visitor, typename... Ts>                                                              \\\n    struct VisitorResult<Visitor, std::variant<Ts...> ref_qualifier> {                                       \\\n        using type =                                                                                         \\\n            std::common_type_t<decltype(std::declval<Visitor>()(std::declval<Ts ref_qualifier>()))...>;      \\\n    }",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/case_of.hpp",
        "bodyStart": 55,
        "column": 9,
        "file": "batteries/case_of.hpp",
        "line": 55
      },
      "name": "BATT_SPECIALIZE_VISITOR_RESULT",
      "override": false,
      "params": [
        {
          "name": "ref_qualifier",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "case__of_8hpp_1af8f765bc901713b9031b86d8be3c2e98",
      "static": false,
      "strong": false,
      "title": "BATT_SPECIALIZE_VISITOR_RESULT",
      "url": "/_autogen/Files/case__of_8hpp/#define-batt-specialize-visitor-result",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-case-of-visitor-invoke",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CASE_OF_VISITOR_INVOKE",
      "hasDetails": false,
      "initializer": "    template <typename... Args>                                                                              \\\n    decltype(auto) operator()(Args&&... args) qualifier                                                      \\\n    {                                                                                                        \\\n        return FirstMatch<Args...>{}(cases_, BATT_FORWARD(args)...);                                         \\\n    }",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/case_of.hpp",
        "bodyStart": 90,
        "column": 9,
        "file": "batteries/case_of.hpp",
        "line": 90
      },
      "name": "BATT_CASE_OF_VISITOR_INVOKE",
      "override": false,
      "params": [
        {
          "name": "qualifier",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "case__of_8hpp_1aa1c18ebd2ba357f55b9c8c2d557bab94",
      "static": false,
      "strong": false,
      "title": "BATT_CASE_OF_VISITOR_INVOKE",
      "url": "/_autogen/Files/case__of_8hpp/#define-batt-case-of-visitor-invoke",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/case_of.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/case_of.hpp",
    "line": 0
  },
  "name": "batteries/case_of.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::detail",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::detail",
      "refid": "namespacebatt_1_1detail",
      "title": "batt::detail",
      "url": "/_autogen/Namespaces/namespacebatt_1_1detail/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2022 Anthony Paul Astolfi\n//\n#pragma once\n\n#include <batteries/config.hpp>\n//\n#include <batteries/int_types.hpp>\n#include <batteries/type_traits.hpp>\n#include <batteries/utility.hpp>\n#include <tuple>\n#include <type_traits>\n#include <variant>\n\nnamespace batt {\n\n// =============================================================================\nnamespace detail {\ntemplate <typename CaseTuple, typename ArgsTuple>\nstruct FirstMatchImpl;\n\ntemplate <typename CaseFirst, typename... CaseRest, typename... Args>\nstruct FirstMatchImpl<std::tuple<CaseFirst, CaseRest...>, std::tuple<Args...>>\n    : std::conditional_t<IsCallable<CaseFirst, Args&&...>{},  //\n                         std::integral_constant<usize, 0>,    //\n                         std::integral_constant<\n                             usize, 1 + FirstMatchImpl<std::tuple<CaseRest...>, std::tuple<Args...>>{}>  //\n                         > {\n    template <typename Cases>\n    decltype(auto) operator()(Cases&& cases, Args&&... args) const\n    {\n        static_assert(FirstMatchImpl::value < std::tuple_size_v<std::decay_t<decltype(cases)>>,\n                      \"Unhandled case in case_of\");\n        return std::get<FirstMatchImpl::value>(BATT_FORWARD(cases))(BATT_FORWARD(args)...);\n    }\n};\n\ntemplate <typename... Args>\nstruct FirstMatchImpl<std::tuple<>, std::tuple<Args...>> : std::integral_constant<usize, 0> {\n};\n\n// The result type of a visitor is defined to be the std::common_type_t<...>\n// over the individual results of applying the visitor to a given variant\n// reference expression.  We must propagate const-ness and value category\n// from the variant to the case expression while computing this type.\n//\ntemplate <typename Visitor, typename Variant>\nstruct VisitorResult;\n\n// This must be instantiated for each possible value category:\n//  std::variant<Ts...>&\n//  std::variant<Ts...> const&\n//  std::variant<Ts...>&&\n//  std::variant<Ts...> const&&\n//\n#define BATT_SPECIALIZE_VISITOR_RESULT(ref_qualifier)                                                        \\\n    template <typename Visitor, typename... Ts>                                                              \\\n    struct VisitorResult<Visitor, std::variant<Ts...> ref_qualifier> {                                       \\\n        using type =                                                                                         \\\n            std::common_type_t<decltype(std::declval<Visitor>()(std::declval<Ts ref_qualifier>()))...>;      \\\n    }\n\nBATT_SPECIALIZE_VISITOR_RESULT(BATT_EXPANDS_TO_NOTHING);\nBATT_SPECIALIZE_VISITOR_RESULT(const);\nBATT_SPECIALIZE_VISITOR_RESULT(&);\nBATT_SPECIALIZE_VISITOR_RESULT(const&);\nBATT_SPECIALIZE_VISITOR_RESULT(&&);\nBATT_SPECIALIZE_VISITOR_RESULT(const&&);\n\ntemplate <typename Visitor, typename VariantArg>\nusing VisitorResultT = typename VisitorResult<Visitor, VariantArg>::type;\n\n#undef BATT_SPECIALIZE_VISITOR_RESULT\n\n}  // namespace detail\n\ntemplate <typename... Cases>\nclass CaseOfVisitor\n{\n   public:\n    using CaseTuple = std::tuple<Cases...>;\n\n    template <typename... CaseArgs>\n    explicit CaseOfVisitor(CaseArgs&&... case_args) noexcept : cases_{BATT_FORWARD(case_args)...}\n    {\n    }\n\n    template <typename... Args>\n    using FirstMatch = detail::FirstMatchImpl<CaseTuple, std::tuple<Args...>>;\n\n#define BATT_CASE_OF_VISITOR_INVOKE(qualifier)                                                               \\\n    template <typename... Args>                                                                              \\\n    decltype(auto) operator()(Args&&... args) qualifier                                                      \\\n    {                                                                                                        \\\n        return FirstMatch<Args...>{}(cases_, BATT_FORWARD(args)...);                                         \\\n    }\n\n    BATT_CASE_OF_VISITOR_INVOKE(&)\n    BATT_CASE_OF_VISITOR_INVOKE(&&)\n    BATT_CASE_OF_VISITOR_INVOKE(const&)\n    BATT_CASE_OF_VISITOR_INVOKE(const&&)\n\n#undef BATT_CASE_OF_VISITOR_INVOKE\n\n   private:\n    CaseTuple cases_;\n};\n\ntemplate <typename... Cases>\nCaseOfVisitor<Cases&&...> make_case_of_visitor(Cases&&... cases)\n{\n    return CaseOfVisitor<Cases&&...>{BATT_FORWARD(cases)...};\n}\n\n// =============================================================================\ntemplate <typename VarType, typename... Cases>\ndecltype(auto) case_of(VarType&& v, Cases&&... cases)\n{\n    static_assert(IsVariant<std::decay_t<VarType>>{}, \"case_of must be applied to a variant.\");\n\n    using Visitor = CaseOfVisitor<Cases&&...>;\n    using Result = detail::VisitorResultT<Visitor, VarType>;\n\n    return std::visit(\n        [&](auto&& val) -> Result {\n            return Visitor{BATT_FORWARD(cases)...}(BATT_FORWARD(val));\n        },\n        BATT_FORWARD(v));\n}\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// Returns true iff the current case of the passed variant is equal to the template parameter `T`.\n//\ntemplate <typename T, typename Var>\nbool is_case(Var&& v)\n{\n    return case_of(\n        std::forward<Var>(v),  //\n        [](const std::decay_t<T>&) {\n            return true;\n        },\n        [](const auto&) {\n            return false;\n        });\n}\n\n}  // namespace batt",
  "publicClasses": [
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "std::conditional_t< IsCallable< CaseFirst, Args &&... >{}, std::integral_constant< usize, 0 >, std::integral_constant< usize, 1+FirstMatchImpl< std::tuple< CaseRest... >, std::tuple< Args... > >{}> >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::detail::FirstMatchImpl< std::tuple< CaseFirst, CaseRest... >, std::tuple< Args... > >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::FirstMatchImpl< std::tuple< CaseFirst, CaseRest... >, std::tuple< Args... > >",
      "refid": "structbatt_1_1detail_1_1FirstMatchImpl_3_01std_1_1tuple_3_01CaseFirst_00_01CaseRest_8_8_8_01_4_0ef0b86a15b721fa11026a803059cf332",
      "title": "batt::detail::FirstMatchImpl< std::tuple< CaseFirst, CaseRest... >, std::tuple< Args... > >",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1FirstMatchImpl_3_01std_1_1tuple_3_01CaseFirst_00_01CaseRest_8_8_8_01_4_0ef0b86a15b721fa11026a803059cf332/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "std::integral_constant< usize, 0 >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::detail::FirstMatchImpl< std::tuple<>, std::tuple< Args... > >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::FirstMatchImpl< std::tuple<>, std::tuple< Args... > >",
      "refid": "structbatt_1_1detail_1_1FirstMatchImpl_3_01std_1_1tuple_3_4_00_01std_1_1tuple_3_01Args_8_8_8_01_4_01_4",
      "title": "batt::detail::FirstMatchImpl< std::tuple<>, std::tuple< Args... > >",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1FirstMatchImpl_3_01std_1_1tuple_3_4_00_01std_1_1tuple_3_01Args_8_8_8_01_4_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > >",
      "refid": "structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01_4",
      "title": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > >",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > const >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > const >",
      "refid": "structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01const_01_4",
      "title": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > const >",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01const_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > & >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > & >",
      "refid": "structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01_6_01_4",
      "title": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > & >",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01_6_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > const & >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > const & >",
      "refid": "structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01const_01_6_01_4",
      "title": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > const & >",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01const_01_6_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > && >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > && >",
      "refid": "structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01_6_6_01_4",
      "title": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > && >",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01_6_6_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > const && >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > const && >",
      "refid": "structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01const_01_6_6_01_4",
      "title": "batt::detail::VisitorResult< Visitor, std::variant< Ts... > const && >",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1VisitorResult_3_01Visitor_00_01std_1_1variant_3_01Ts_8_8_8_01_4_01const_01_6_6_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::CaseOfVisitor",
      "kind": "class",
      "language": "cpp",
      "name": "batt::CaseOfVisitor",
      "refid": "classbatt_1_1CaseOfVisitor",
      "title": "batt::CaseOfVisitor",
      "url": "/_autogen/Classes/classbatt_1_1CaseOfVisitor/",
      "visibility": "public"
    }
  ],
  "refid": "case__of_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/case_of.hpp",
  "url": "/_autogen/Files/case__of_8hpp/#file-case-of.hpp",
  "visibility": "public"
}