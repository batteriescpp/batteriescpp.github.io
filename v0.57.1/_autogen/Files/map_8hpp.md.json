{
  "abstract": false,
  "anchor": "#file-map.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-seq-map-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_SEQ_MAP_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/seq/map.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/seq/map.hpp",
        "line": 5
      },
      "name": "BATTERIES_SEQ_MAP_HPP",
      "override": false,
      "refid": "map_8hpp_1a29829459972fe54d3fd9bad26064bdeb",
      "static": false,
      "strong": false,
      "title": "BATTERIES_SEQ_MAP_HPP",
      "url": "/_autogen/Files/map_8hpp/#define-batteries-seq-map-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/seq/map.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/seq/map.hpp",
    "line": 0
  },
  "name": "batteries/seq/map.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::seq",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::seq",
      "refid": "namespacebatt_1_1seq",
      "title": "batt::seq",
      "url": "/_autogen/Namespaces/namespacebatt_1_1seq/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/seq",
    "category": "dirs",
    "fullname": "batteries/seq",
    "kind": "dir",
    "language": "",
    "name": "batteries/seq",
    "refid": "dir_0985703d1fb34e0edc7cc330d020d62d",
    "title": "batteries/seq",
    "url": "/_autogen/Files/dir_0985703d1fb34e0edc7cc330d020d62d/#dir-batteries/seq",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/seq",
      "category": "dirs",
      "fullname": "batteries/seq",
      "kind": "dir",
      "language": "",
      "name": "batteries/seq",
      "refid": "dir_0985703d1fb34e0edc7cc330d020d62d",
      "title": "batteries/seq",
      "url": "/_autogen/Files/dir_0985703d1fb34e0edc7cc330d020d62d/#dir-batteries/seq",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2024 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_SEQ_MAP_HPP\n#define BATTERIES_SEQ_MAP_HPP\n\n#include <batteries/config.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/seq/for_each.hpp>\n#include <batteries/seq/seq_item.hpp>\n\n#include <batteries/hint.hpp>\n#include <batteries/type_traits.hpp>\n#include <batteries/utility.hpp>\n\n#include <type_traits>\n\nnamespace batt {\nnamespace seq {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// map\n//\ntemplate <typename Seq, typename MapFn>\nclass Map\n{\n   public:\n    using Item = batt::DecayRValueRef<std::invoke_result_t<MapFn, SeqItem<Seq>>>;\n\n    explicit Map(Seq&& seq, MapFn&& map_fn) noexcept : seq_(BATT_FORWARD(seq)), map_fn_(BATT_FORWARD(map_fn))\n    {\n        static_assert(!std::is_same_v<Item, void>,\n                      \"Map function must not return void! (Did you mean batt::seq::for_each?)\");\n    }\n\n    Map(Map&& that) noexcept : seq_(BATT_FORWARD(that.seq_)), map_fn_(BATT_FORWARD(*that.map_fn_))\n    {\n    }\n\n    Map(const Map& that) noexcept : seq_(that.seq_), map_fn_(*that.map_fn_)\n    {\n    }\n\n    Map& operator=(Map&& that) noexcept\n    {\n        if (BATT_HINT_TRUE(this != &that)) {\n            this->seq_ = BATT_FORWARD(that.seq_);\n            this->map_fn_.emplace(BATT_FORWARD(*that.map_fn_));\n        }\n        return *this;\n    }\n\n    Map& operator=(const Map& that)\n    {\n        if (BATT_HINT_TRUE(this != &that)) {\n            this->seq_ = that.seq_;\n            this->map_fn_.emplace(*that.map_fn_);\n        }\n        return *this;\n    }\n\n    Optional<Item> peek()\n    {\n        auto item = seq_.peek();\n        if (!item) {\n            return None;\n        }\n        return (*map_fn_)(std::forward<SeqItem<Seq>>(*item));\n    }\n    Optional<Item> next()\n    {\n        auto item = seq_.next();\n        if (!item) {\n            return None;\n        }\n        return (*map_fn_)(std::forward<SeqItem<Seq>>(*item));\n    }\n\n    //----------------------\n\n#if BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n    template <typename Seq_, typename MapFn_, typename EachFn>\n    friend LoopControl operator|(Map<Seq_, MapFn_>&& map_seq, ForEachBinder<EachFn>&& binder);\n\n#endif  // BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n   private:\n    Seq seq_;\n    Optional<batt::DecayRValueRef<MapFn>> map_fn_;\n};\n\ntemplate <typename MapFn>\nstruct MapBinder {\n    MapFn map_fn;\n};\n\ntemplate <typename MapFn>\nMapBinder<MapFn> map(MapFn&& map_fn)\n{\n    return {BATT_FORWARD(map_fn)};\n}\n\ntemplate <typename Seq, typename MapFn>\n[[nodiscard]] Map<Seq, MapFn> operator|(Seq&& seq, MapBinder<MapFn>&& binder)\n{\n    static_assert(std::is_same_v<Seq, std::decay_t<Seq>>,\n                  \"Mapped sequences may not be captured implicitly by reference.\");\n\n    static_assert(std::is_same_v<MapFn, std::decay_t<MapFn>>,\n                  \"Mapped functions may not be captured implicitly by reference.\");\n\n    return Map<Seq, MapFn>{BATT_FORWARD(seq), BATT_FORWARD(binder.map_fn)};\n}\n\n#if BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\ntemplate <typename Seq, typename MapFn, typename EachFn>\nLoopControl operator|(Map<Seq, MapFn>&& map_seq, ForEachBinder<EachFn>&& binder)\n{\n    auto& map_fn = *map_seq.map_fn_;\n    auto loop_body = [&](auto&& item) {\n        return binder.fn(map_fn(std::forward<SeqItem<Seq>>(item)));\n    };\n    return std::forward<Seq>(map_seq.seq_) | for_each(loop_body);\n}\n\n#endif  // BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n}  // namespace seq\n}  // namespace batt\n\n#endif  // BATTERIES_SEQ_MAP_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::Map",
      "kind": "class",
      "language": "cpp",
      "name": "batt::seq::Map",
      "refid": "classbatt_1_1seq_1_1Map",
      "title": "batt::seq::Map",
      "url": "/_autogen/Classes/classbatt_1_1seq_1_1Map/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::MapBinder",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::seq::MapBinder",
      "refid": "structbatt_1_1seq_1_1MapBinder",
      "title": "batt::seq::MapBinder",
      "url": "/_autogen/Classes/structbatt_1_1seq_1_1MapBinder/",
      "visibility": "public"
    }
  ],
  "refid": "map_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/seq/map.hpp",
  "url": "/_autogen/Files/map_8hpp/#file-map.hpp",
  "visibility": "public"
}