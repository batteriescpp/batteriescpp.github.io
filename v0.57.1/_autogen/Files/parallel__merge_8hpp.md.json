{
  "abstract": false,
  "anchor": "#file-parallel-merge.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-algo-parallel-merge-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ALGO_PARALLEL_MERGE_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/algo/parallel_merge.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/algo/parallel_merge.hpp",
        "line": 6
      },
      "name": "BATTERIES_ALGO_PARALLEL_MERGE_HPP",
      "override": false,
      "refid": "parallel__merge_8hpp_1aaabc7931680e199bd3d7f39c36a1a66e",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ALGO_PARALLEL_MERGE_HPP",
      "url": "/_autogen/Files/parallel__merge_8hpp/#define-batteries-algo-parallel-merge-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/algo/parallel_merge.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/algo/parallel_copy.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/algo/parallel_merge.hpp",
    "line": 0
  },
  "name": "batteries/algo/parallel_merge.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::detail",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::detail",
      "refid": "namespacebatt_1_1detail",
      "title": "batt::detail",
      "url": "/_autogen/Namespaces/namespacebatt_1_1detail/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/algo",
    "category": "dirs",
    "fullname": "batteries/algo",
    "kind": "dir",
    "language": "",
    "name": "batteries/algo",
    "refid": "dir_23237b2d5d682108d256c42b41036300",
    "title": "batteries/algo",
    "url": "/_autogen/Files/dir_23237b2d5d682108d256c42b41036300/#dir-batteries/algo",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/algo",
      "category": "dirs",
      "fullname": "batteries/algo",
      "kind": "dir",
      "language": "",
      "name": "batteries/algo",
      "refid": "dir_23237b2d5d682108d256c42b41036300",
      "title": "batteries/algo",
      "url": "/_autogen/Files/dir_23237b2d5d682108d256c42b41036300/#dir-batteries/algo",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ALGO_PARALLEL_MERGE_HPP\n#define BATTERIES_ALGO_PARALLEL_MERGE_HPP\n\n#include <batteries/algo/parallel_copy.hpp>\n\n#include <batteries/async/work_context.hpp>\n\n#include <batteries/int_types.hpp>\n\nnamespace batt {\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n//\nnamespace detail {\nstruct FirstPhase;\nstruct SecondPhase;\nstruct ThirdPhase;\n\nstruct FirstPhase {\n    static const char* name()\n    {\n        return \"FirstPhase\";\n    }\n\n    using NextPhase = SecondPhase;\n\n    template <typename Src0, typename Src1>\n    static const Src0& fixed_iter(const Src0& src_0, const Src1& /*src_1*/)\n    {\n        return src_0;\n    }\n    template <typename Src0, typename Src1>\n    static const Src1& search_iter(const Src0& /*src_0*/, const Src1& src_1)\n    {\n        return src_1;\n    }\n    template <typename Fixed, typename Search>\n    static const Fixed& src_0_iter(const Fixed& fixed, const Search& /*search*/)\n    {\n        return fixed;\n    }\n    template <typename Fixed, typename Search>\n    static const Search& src_1_iter(const Fixed& /*fixed*/, const Search& search)\n    {\n        return search;\n    }\n};\n\nstruct SecondPhase {\n    static const char* name()\n    {\n        return \"SecondPhase\";\n    }\n\n    using NextPhase = ThirdPhase;\n\n    template <typename Src0, typename Src1>\n    static const Src1& fixed_iter(const Src0& /*src_0*/, const Src1& src_1)\n    {\n        return src_1;\n    }\n    template <typename Src0, typename Src1>\n    static const Src0& search_iter(const Src0& src_0, const Src1& /*src_1*/)\n    {\n        return src_0;\n    }\n    template <typename Fixed, typename Search>\n    static const Search& src_0_iter(const Fixed& /*fixed*/, const Search& search)\n    {\n        return search;\n    }\n    template <typename Fixed, typename Search>\n    static const Fixed& src_1_iter(const Fixed& fixed, const Search& /*search*/)\n    {\n        return fixed;\n    }\n};\n\nstruct ThirdPhase : SecondPhase {\n    static const char* name()\n    {\n        return \"ThirdPhase\";\n    }\n};\n\nstatic constexpr isize kThreshold = 1400;\nstatic constexpr isize kMaxShards = 8;\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename Fixed, typename Search, typename Dst, typename Compare, typename Phase>\nvoid parallel_merge_fanout(WorkContext& context,                    //\n                           Fixed fixed_begin, Fixed fixed_end,      //\n                           Search search_begin, Search search_end,  //\n                           Dst dst_begin,                           //\n                           Compare&& compare,                       //\n                           usize min_task_size,                     //\n                           usize max_tasks,                         //\n                           batt::StaticType<Phase>);\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename Src0, typename Src1, typename Dst, typename Compare, typename Phase>\nvoid parallel_merge_impl(WorkContext& context,              //\n                         Src0 src_0_begin, Src0 src_0_end,  //\n                         Src1 src_1_begin, Src1 src_1_end,  //\n                         Dst dst_begin,                     //\n                         Compare&& compare,                 //\n                         usize min_task_size,               //\n                         usize max_tasks,                   //\n                         batt::StaticType<Phase> phase)\n{\n    const isize src_0_size = std::distance(src_0_begin, src_0_end);\n    const isize src_1_size = std::distance(src_1_begin, src_1_end);\n\n    // Trivial merge edge cases.\n    //\n    if (src_0_begin == src_0_end) {\n        return parallel_copy(context, src_1_begin, src_1_end, dst_begin,  //\n                             /*min_task_size=*/TaskSize{0},\n                             /*max_tasks=*/TaskCount{1});\n    }\n    BATT_CHECK_LT(src_0_begin, src_0_end);\n\n    if (src_1_begin == src_1_end) {\n        return parallel_copy(context, src_0_begin, src_0_end, dst_begin,  //\n                             /*min_task_size=*/TaskSize{0},\n                             /*max_tasks=*/TaskCount{1});\n    }\n    BATT_CHECK_LT(src_1_begin, src_1_end);\n\n    // Sequential merge base case.\n    //\n    if (std::is_same_v<Phase, ThirdPhase> || src_0_size + src_1_size <= (isize)min_task_size) {\n        std::merge(src_0_begin, src_0_end, src_1_begin, src_1_end, dst_begin, compare);\n        return;\n    }\n\n    // General case: break up the work and do it in parallel.\n    //\n    auto fixed_begin = Phase::fixed_iter(src_0_begin, src_1_begin);\n    auto fixed_end = Phase::fixed_iter(src_0_end, src_1_end);\n\n    auto search_begin = Phase::search_iter(src_0_begin, src_1_begin);\n    auto search_end = Phase::search_iter(src_0_end, src_1_end);\n\n    parallel_merge_fanout(context,                   //\n                          fixed_begin, fixed_end,    //\n                          fixed_begin, fixed_end,    //\n                          search_begin, search_end,  //\n                          dst_begin,                 //\n                          compare,                   //\n                          min_task_size,             //\n                          max_tasks,                 //\n                          phase);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\ntemplate <typename Fixed, typename Search, typename Dst, typename Compare, typename Phase>\nvoid parallel_merge_fanout(WorkContext& context,                          //\n                           Fixed fixed_begin, Fixed fixed_end,            //\n                           Fixed fixed_part_begin, Fixed fixed_part_end,  //\n                           Search search_begin, Search search_end,        //\n                           Dst dst_begin,                                 //\n                           Compare&& compare,                             //\n                           usize min_task_size,                           //\n                           usize max_tasks,                               //\n                           batt::StaticType<Phase>)\n{\n    const usize max_tasks_per_phase = (max_tasks + 1) / 2;\n    isize fixed_part_size = std::distance(fixed_part_begin, fixed_part_end);\n    const isize target_size =\n        std::max((fixed_part_size + max_tasks_per_phase - 1) / max_tasks_per_phase, (min_task_size + 1) / 2);\n\n    while (fixed_part_begin != fixed_part_end) {\n        isize shard_size = std::min(target_size, fixed_part_size);\n        BATT_CHECK_GT(shard_size, 0);\n\n        // Set up the extents of the next task's shard.  `shard_size` may need to be increased if the\n        // initial shard end estimate cuts into the middle of an equivalence group.\n        //\n        const Fixed fixed_shard_begin = fixed_part_begin;\n        Fixed fixed_shard_back = std::next(fixed_shard_begin, shard_size - 1);\n        Fixed fixed_shard_end = std::next(fixed_shard_back);\n\n        // Advance `fixed_shard_end` to include the entire equivalence group at the end of the fixed\n        // shard.\n        //  TODO [tastolfi 2021-09-02] use std::upper_bound here?\n        //\n        while (fixed_shard_end != fixed_part_end && !compare(*fixed_shard_back, *fixed_shard_end)) {\n            BATT_CHECK_LT(shard_size, fixed_part_size);\n            fixed_shard_back = fixed_shard_end;\n            ++fixed_shard_end;\n            ++shard_size;\n        }\n\n        // MUST be after we advance `fixed_shard_end` above.\n        //\n        const bool is_first = (fixed_shard_begin == fixed_begin);\n        const bool is_last = (fixed_shard_end == fixed_end);\n\n        // Capture the shard variables.\n        //\n        auto work_fn = [&context,                               //\n                        fixed_shard_begin, fixed_shard_end,     //\n                        search_begin, search_end,               //\n                        dst_begin, compare, is_first, is_last,  //\n                        min_task_size, max_tasks] {\n            auto search_shard_begin = [&] {\n                if (is_first) {\n                    return search_begin;\n                }\n                return std::lower_bound(search_begin, search_end, *fixed_shard_begin, compare);\n            }();\n            auto search_shard_end = [&] {\n                if (is_last) {\n                    return search_end;\n                }\n                BATT_CHECK_LE(search_shard_begin, search_end);\n                return std::lower_bound(search_shard_begin, search_end, *fixed_shard_end, compare);\n            }();\n\n            auto src_0_shard_begin = Phase::src_0_iter(fixed_shard_begin, search_shard_begin);\n            auto src_0_shard_end = Phase::src_0_iter(fixed_shard_end, search_shard_end);\n            BATT_CHECK_LE(src_0_shard_begin, src_0_shard_end);\n\n            auto src_1_shard_begin = Phase::src_1_iter(fixed_shard_begin, search_shard_begin);\n            auto src_1_shard_end = Phase::src_1_iter(fixed_shard_end, search_shard_end);\n            BATT_CHECK_LE(src_1_shard_begin, src_1_shard_end);\n\n            auto dst_shard_begin = std::next(dst_begin, std::distance(search_begin, search_shard_begin));\n\n            parallel_merge_impl(context,                             //\n                                src_0_shard_begin, src_0_shard_end,  //\n                                src_1_shard_begin, src_1_shard_end,  //\n                                dst_shard_begin,                     //\n                                compare,                             //\n                                min_task_size,                       //\n                                max_tasks,                           //\n                                batt::StaticType<typename Phase::NextPhase>{});\n        };\n\n        if (fixed_shard_end != fixed_part_end) {\n            BATT_CHECK_OK(context.async_run(work_fn)) << \"context must not be closed!\";\n        } else {\n            work_fn();\n        }\n\n        fixed_part_begin = fixed_shard_end;\n        std::advance(dst_begin, shard_size);\n        fixed_part_size -= shard_size;\n    }\n}\n\n}  // namespace detail\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\ntemplate <typename Src0, typename Src1, typename Dst, typename Compare>\nvoid parallel_merge(WorkerPool& worker_pool,                                   //\n                    Src0 src_0_begin, Src0 src_0_end,                          //\n                    Src1 src_1_begin, Src1 src_1_end,                          //\n                    Dst dst_begin,                                             //\n                    Compare&& compare,                                         //\n                    usize min_task_size = 1400,                                //\n                    usize max_tasks = std::thread::hardware_concurrency() / 2  //\n)\n{\n    ScopedWorkContext context{worker_pool};\n\n    detail::parallel_merge_impl(context,                 //\n                                src_0_begin, src_0_end,  //\n                                src_1_begin, src_1_end,  //\n                                dst_begin,               //\n                                BATT_FORWARD(compare),   //\n                                min_task_size,           //\n                                max_tasks,               //\n                                batt::StaticType<detail::FirstPhase>{});\n}\n\ntemplate <typename Src0, typename Src1, typename Dst, typename Compare>\nvoid parallel_merge(WorkContext& context,                                      //\n                    Src0 src_0_begin, Src0 src_0_end,                          //\n                    Src1 src_1_begin, Src1 src_1_end,                          //\n                    Dst dst_begin,                                             //\n                    Compare&& compare,                                         //\n                    usize min_task_size = 1400,                                //\n                    usize max_tasks = std::thread::hardware_concurrency() / 2  //\n)\n{\n    detail::parallel_merge_impl(context,                 //\n                                src_0_begin, src_0_end,  //\n                                src_1_begin, src_1_end,  //\n                                dst_begin,               //\n                                BATT_FORWARD(compare),   //\n                                min_task_size,           //\n                                max_tasks,               //\n                                batt::StaticType<detail::FirstPhase>{});\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ALGO_PARALLEL_MERGE_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::FirstPhase",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::FirstPhase",
      "refid": "structbatt_1_1detail_1_1FirstPhase",
      "title": "batt::detail::FirstPhase",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1FirstPhase/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "derivedClasses": [
        {
          "external": false,
          "name": "batt::detail::ThirdPhase",
          "refid": "structbatt_1_1detail_1_1ThirdPhase",
          "url": "/_autogen/Classes/structbatt_1_1detail_1_1ThirdPhase/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "fullname": "batt::detail::SecondPhase",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::SecondPhase",
      "refid": "structbatt_1_1detail_1_1SecondPhase",
      "title": "batt::detail::SecondPhase",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1SecondPhase/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::detail::SecondPhase",
          "refid": "structbatt_1_1detail_1_1SecondPhase",
          "url": "/_autogen/Classes/structbatt_1_1detail_1_1SecondPhase/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::detail::ThirdPhase",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::detail::ThirdPhase",
      "refid": "structbatt_1_1detail_1_1ThirdPhase",
      "title": "batt::detail::ThirdPhase",
      "url": "/_autogen/Classes/structbatt_1_1detail_1_1ThirdPhase/",
      "visibility": "public"
    }
  ],
  "refid": "parallel__merge_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/algo/parallel_merge.hpp",
  "url": "/_autogen/Files/parallel__merge_8hpp/#file-parallel-merge.hpp",
  "visibility": "public"
}