{
  "abstract": false,
  "anchor": "#file-stream-buffer-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-stream-buffer-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_STREAM_BUFFER_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/stream_buffer_impl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/stream_buffer_impl.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_STREAM_BUFFER_IMPL_HPP",
      "override": false,
      "refid": "stream__buffer__impl_8hpp_1aa90124449c9d0622f5a6dabcc294ecef",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_STREAM_BUFFER_IMPL_HPP",
      "url": "/_autogen/Files/stream__buffer__impl_8hpp/#define-batteries-async-stream-buffer-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/stream_buffer_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/stream_buffer_impl.hpp",
    "line": 0
  },
  "name": "batteries/async/stream_buffer_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_STREAM_BUFFER_IMPL_HPP\n#define BATTERIES_ASYNC_STREAM_BUFFER_IMPL_HPP\n\n#include <batteries/config.hpp>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL /*explicit*/ StreamBuffer::StreamBuffer(usize capacity) noexcept\n    : capacity_{BATT_CHECKED_CAST(i64, capacity)}\n    , buffer_{new u8[capacity]}\n    , consume_pos_{0}\n    , commit_pos_{0}\n{\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL StreamBuffer::~StreamBuffer() noexcept\n{\n    this->close();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize StreamBuffer::capacity() const\n{\n    return static_cast<usize>(this->capacity_);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize StreamBuffer::size() const\n{\n    return BATT_CHECKED_CAST(usize, this->commit_pos_.get_value() - this->consume_pos_.get_value());\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL usize StreamBuffer::space() const\n{\n    return this->capacity() - this->size();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL StatusOr<SmallVec<MutableBuffer, 2>> StreamBuffer::prepare_exactly(i64 exact_count)\n{\n    return this->pre_transfer(\n        /*min_count=*/exact_count,\n        /*fixed_pos=*/this->commit_pos_,\n        /*moving_pos=*/this->consume_pos_,\n        /*min_delta=*/exact_count - this->capacity(), /*get_max_count=*/\n        [exact_count] {\n            return exact_count;\n        },\n        WaitForResource::kTrue,  //\n        StaticType<MutableBuffer>{});\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL StatusOr<SmallVec<MutableBuffer, 2>> StreamBuffer::prepare_at_least(i64 min_count)\n{\n    return this->pre_transfer(\n        /*min_count=*/min_count,\n        /*fixed_pos=*/this->commit_pos_,\n        /*moving_pos=*/this->consume_pos_,\n        /*min_delta=*/min_count - this->capacity(), /*get_max_count=*/\n        [this] {\n            return BATT_CHECKED_CAST(i64, this->space());\n        },\n        WaitForResource::kTrue,  //\n        StaticType<MutableBuffer>{});\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void StreamBuffer::commit(i64 count)\n{\n    this->commit_pos_.fetch_add(count);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL Status StreamBuffer::write_all(ConstBuffer buffer)\n{\n    while (buffer.size() > 0) {\n        StatusOr<SmallVec<MutableBuffer, 2>> prepared = this->prepare_at_least(1);\n        BATT_REQUIRE_OK(prepared);\n\n        const usize n_copied = boost::asio::buffer_copy(*prepared, buffer);\n        this->commit(n_copied);\n        buffer += n_copied;\n    }\n\n    return OkStatus();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void StreamBuffer::close_for_write()\n{\n    this->commit_pos_.close(StatusCode::kEndOfStream);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL StatusOr<SmallVec<ConstBuffer, 2>> StreamBuffer::fetch_at_least(i64 min_count)\n{\n    const usize min_count_z = BATT_CHECKED_CAST(usize, min_count);\n\n    StatusOr<SmallVec<ConstBuffer, 2>> buffers = this->pre_transfer(\n        /*min_count=*/min_count,\n        /*fixed_pos=*/this->consume_pos_,\n        /*moving_pos=*/this->commit_pos_,\n        /*min_delta=*/min_count, /*get_max_count=*/\n        [this] {\n            return BATT_CHECKED_CAST(i64, this->size());\n        },\n        WaitForResource::kTrue,  //\n        StaticType<ConstBuffer>{});\n\n    BATT_REQUIRE_OK(buffers);\n\n    // Guarantee that the first buffer contains at least `min_count` bytes.  This is done so that retry-style\n    // parsers don't have to implement this themselves.\n    //\n    if (buffers->size() > 1 && buffers->front().size() < min_count_z) {\n        this->tmp_buffer_.reserve(min_count_z);\n\n        const usize n_copied =\n            boost::asio::buffer_copy(MutableBuffer{this->tmp_buffer_.data(), min_count_z}, *buffers);\n        BATT_CHECK_EQ(n_copied, min_count_z);\n\n        BATT_CHECK_EQ(buffers->size(), 2u);\n        buffers->back() += min_count - buffers->front().size();\n        if (buffers->back().size() == 0) {\n            buffers->pop_back();\n        }\n\n        buffers->front() = ConstBuffer{this->tmp_buffer_.data(), n_copied};\n    }\n\n    return buffers;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void StreamBuffer::consume(i64 count)\n{\n    this->consume_pos_.fetch_add(count);\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void StreamBuffer::close_for_read()\n{\n    this->consume_pos_.close();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL void StreamBuffer::close()\n{\n    this->close_for_read();\n    this->close_for_write();\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_STREAM_BUFFER_IMPL_HPP",
  "refid": "stream__buffer__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/stream_buffer_impl.hpp",
  "url": "/_autogen/Files/stream__buffer__impl_8hpp/#file-stream-buffer-impl.hpp",
  "visibility": "public"
}