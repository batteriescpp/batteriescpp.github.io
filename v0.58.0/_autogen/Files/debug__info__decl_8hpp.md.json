{
  "abstract": false,
  "anchor": "#file-debug-info-decl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-debug-info-decl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_DEBUG_INFO_DECL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/debug_info_decl.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/debug_info_decl.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_DEBUG_INFO_DECL_HPP",
      "override": false,
      "refid": "debug__info__decl_8hpp_1ad50e133a63818ea93f5f71621ffd07d2",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_DEBUG_INFO_DECL_HPP",
      "url": "/_autogen/Files/debug__info__decl_8hpp/#define-batteries-async-debug-info-decl-hpp",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-debug-info",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_DEBUG_INFO",
      "hasDetails": false,
      "initializer": "    ::batt::DebugInfoFrame BOOST_PP_CAT(debug_info_BATTERIES_, __LINE__)                                     \\\n    {                                                                                                        \\\n        [&](std::ostream& out, const void* frame) {                                                          \\\n            out << \" \" << expr << std::endl                                                                  \\\n                << \"    at \" << ::batt::shortened_source_file(__FILE__) << \":\" << __LINE__ << std::endl      \\\n                << \"    in \" << BATT_THIS_FUNCTION << std::endl                                             \\\n                << \"    stack offset: \" << ::batt::Task::current_stack_pos_of(frame) << std::endl;           \\\n        }                                                                                                    \\\n    }",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/debug_info_decl.hpp",
        "bodyStart": 95,
        "column": 9,
        "file": "batteries/async/debug_info_decl.hpp",
        "line": 95
      },
      "name": "BATT_DEBUG_INFO",
      "override": false,
      "params": [
        {
          "name": "expr",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "debug__info__decl_8hpp_1adc61a3c1a0337d437e1b014d55274830",
      "static": false,
      "strong": false,
      "title": "BATT_DEBUG_INFO",
      "url": "/_autogen/Files/debug__info__decl_8hpp/#define-batt-debug-info",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/debug_info_decl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/debug_info_decl.hpp",
    "line": 0
  },
  "name": "batteries/async/debug_info_decl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_DEBUG_INFO_DECL_HPP\n#define BATTERIES_ASYNC_DEBUG_INFO_DECL_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/task_decl.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/slice.hpp>\n\n#include <array>\n#include <functional>\n#include <ostream>\n\nnamespace batt {\n\nconstexpr usize kMaxDebugInfoThreads = 32;\n\nclass DebugInfoFrame;\n\n// Print the stack of DebugInfoFrame objects for the current task/thread.\n//\nvoid this_task_debug_info(std::ostream& out);\n\n// Print the given stack of DebugInfoFrame objects.\n//\nvoid print_debug_info(DebugInfoFrame* p, std::ostream& out);\n\n// Print DebugInfoFrame stacks for all (non-Task) threads.\n//\nvoid print_all_threads_debug_info(std::ostream& out);\n\n// Shortens the passed source code file name by applying heuristics.\n//\nconst char* shortened_source_file(const char* raw);\n\n// A stack-local linked list node that captures diagnostic information.  This class should most often not be\n// used directly; see `BATT_DEBUG_INFO` below.\n//\nclass DebugInfoFrame\n{\n   public:\n    // A fixed-sized slice of pointers to DebugInfoFrame stack tops; indexed by the thread id.\n    //\n    static Slice<DebugInfoFrame*> all_threads();\n\n    // (Thread-Local) A read/write reference to the top-of-stack debug info frame for the current thread.\n    //\n    static DebugInfoFrame*& top();\n\n    // `Fn` is a callable object with signature `void (std::ostream&)`.\n    // `fn` should print human readable diagnostic information to the passed stream when invoked.\n    //\n    // When a DebugInfoFrame is created, it automatically links to the thread/Task-local \"top\"\n    // DebugInfoFrame*, forming a stack.  *WARNING*: this means it will create problems if you try to create a\n    // DebugInfoFrame in one block scope and then move it to another one for destruction.  In most cases, you\n    // should just use the BATT_DEBUG_INFO macro inside a function to create a DebugInfoFrame implicitly.\n    //\n    template <typename Fn>\n    explicit DebugInfoFrame(Fn&& fn) noexcept;\n\n    // Pop this frame from the top of the stack, restoring the old top frame.\n    //\n    ~DebugInfoFrame() noexcept;\n\n    // Declare as friend so `print_debug_info` can traverse the chain of `prev_` pointers.\n    //\n    friend void print_debug_info(DebugInfoFrame* p, std::ostream& out);\n\n   private:\n    // The diagnostic information emitter function passed in at construction time.\n    //\n    std::function<void(std::ostream&, const void*)> print_info_;\n\n    // The previous top-of-stack, when this object was created.\n    //\n    DebugInfoFrame* prev_;\n};\n\n// Create a local variable that passively reports human-readable debugging information in response to\n// generating a backtrace of all Tasks/threads.\n//\n// Example:\n// ```\n// void called_from_a_thread(int n) {\n//   for (int i=0; i<n; ++i) {\n//     BATT_DEBUG_INFO(\"loop iteration \" << i << \" of \" << n);\n//   }\n// }\n// ```\n//\n#define BATT_DEBUG_INFO(expr)                                                                                \\\n    ::batt::DebugInfoFrame BOOST_PP_CAT(debug_info_BATTERIES_, __LINE__)                                     \\\n    {                                                                                                        \\\n        [&](std::ostream& out, const void* frame) {                                                          \\\n            out << \" \" << expr << std::endl                                                                  \\\n                << \"    at \" << ::batt::shortened_source_file(__FILE__) << \":\" << __LINE__ << std::endl      \\\n                << \"    in \" << BATT_THIS_FUNCTION << std::endl                                             \\\n                << \"    stack offset: \" << ::batt::Task::current_stack_pos_of(frame) << std::endl;           \\\n        }                                                                                                    \\\n    }\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_DEBUG_INFO_DECL_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::DebugInfoFrame",
      "kind": "class",
      "language": "cpp",
      "name": "batt::DebugInfoFrame",
      "refid": "classbatt_1_1DebugInfoFrame",
      "title": "batt::DebugInfoFrame",
      "url": "/_autogen/Classes/classbatt_1_1DebugInfoFrame/",
      "visibility": "public"
    }
  ],
  "refid": "debug__info__decl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/debug_info_decl.hpp",
  "url": "/_autogen/Files/debug__info__decl_8hpp/#file-debug-info-decl.hpp",
  "visibility": "public"
}