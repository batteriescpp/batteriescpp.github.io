{
  "abstract": false,
  "anchor": "#file-assert-impl.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-assert-impl-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASSERT_IMPL_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/assert_impl.hpp",
        "bodyStart": 3,
        "column": 9,
        "file": "batteries/assert_impl.hpp",
        "line": 3
      },
      "name": "BATTERIES_ASSERT_IMPL_HPP",
      "override": false,
      "refid": "assert__impl_8hpp_1a3768d66d0c0cb98450ae52a5b03bb7e4",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASSERT_IMPL_HPP",
      "url": "/_autogen/Files/assert__impl_8hpp/#define-batteries-assert-impl-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/assert_impl.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/stacktrace.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/assert_impl.hpp",
    "line": 0
  },
  "name": "batteries/assert_impl.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "#pragma once\n#ifndef BATTERIES_ASSERT_IMPL_HPP\n#define BATTERIES_ASSERT_IMPL_HPP\n\n#include <batteries/stacktrace.hpp>\n\n#include <atomic>\n#include <chrono>\n#include <iostream>\n#include <thread>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_NORETURN BATT_INLINE_IMPL void fail_check_exit()\n{\n    const bool previously_entered = fail_check_exit_entered().exchange(true);\n    BATT_FAIL_CHECK_OUT << std::endl << std::endl;\n\n    if (!previously_entered) {\n        print_stack_trace();\n    }\n\n    // Give the stack trace a chance to be printed before aborting the process.\n    //\n    using namespace std::chrono_literals;\n    std::this_thread::sleep_for(200ms);\n\n    std::abort();\n    BATT_UNREACHABLE();\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL std::atomic<bool>& fail_check_exit_entered()\n{\n    static std::atomic<bool> entered_{false};\n    return entered_;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL std::atomic<bool>& fail_check_spin_lock()\n{\n    static std::atomic<bool> spin_lock_{false};\n    return spin_lock_;\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n//\nBATT_INLINE_IMPL bool lock_fail_check_mutex()\n{\n    thread_local bool locked_by_this_thread = false;\n\n    std::atomic<bool>& spin_lock = fail_check_spin_lock();\n\n    // If we re-enter this function on the same thread, then disable the nested CHECKs.\n    //\n    if (locked_by_this_thread) {\n        return false;\n    }\n\n    const bool previously_locked = spin_lock.exchange(true);\n\n    // If the lock is already held by some other thread, then park this thread and wait for the end.\n    //\n    if (previously_locked) {\n        for (;;) {\n            using namespace std::chrono_literals;\n            std::this_thread::sleep_for(10s);\n        }\n    }\n\n    // Prevent nested CHECK fails.\n    //\n    locked_by_this_thread = true;\n\n    return true;\n}\n\n}  //namespace batt\n\n#endif  // BATTERIES_ASSERT_IMPL_HPP",
  "refid": "assert__impl_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/assert_impl.hpp",
  "url": "/_autogen/Files/assert__impl_8hpp/#file-assert-impl.hpp",
  "visibility": "public"
}