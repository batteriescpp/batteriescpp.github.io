{
  "abstract": false,
  "anchor": "#file-config.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-config-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_CONFIG_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 6
      },
      "name": "BATTERIES_CONFIG_HPP",
      "override": false,
      "refid": "config_8hpp_1af39baa73e03a0a992beaa87d9edd5ab6",
      "static": false,
      "strong": false,
      "title": "BATTERIES_CONFIG_HPP",
      "url": "/_autogen/Files/config_8hpp/#define-batteries-config-hpp",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-cpp-20",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_CPP_20",
      "hasDetails": false,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 26,
        "column": 10,
        "file": "batteries/config.hpp",
        "line": 26
      },
      "name": "BATT_CPP_20",
      "override": false,
      "refid": "config_8hpp_1a84d08568b45380cb470ee7d6436141ab",
      "static": false,
      "strong": false,
      "title": "BATT_CPP_20",
      "url": "/_autogen/Files/config_8hpp/#define-batt-cpp-20",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-header-only",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_HEADER_ONLY",
      "hasDetails": false,
      "initializer": "1",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 31,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 31
      },
      "name": "BATT_HEADER_ONLY",
      "override": false,
      "refid": "config_8hpp_1a5bc18bc235e08f3b4bb7849f02784ec1",
      "static": false,
      "strong": false,
      "title": "BATT_HEADER_ONLY",
      "url": "/_autogen/Files/config_8hpp/#define-batt-header-only",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-inline-impl",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_INLINE_IMPL",
      "hasDetails": false,
      "initializer": "inline",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 35,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 35
      },
      "name": "BATT_INLINE_IMPL",
      "override": false,
      "refid": "config_8hpp_1a42191483065a0ba1c4d33b0c39123897",
      "static": false,
      "strong": false,
      "title": "BATT_INLINE_IMPL",
      "url": "/_autogen/Files/config_8hpp/#define-batt-inline-impl",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-seq-specialize-algorithms",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_SEQ_SPECIALIZE_ALGORITHMS",
      "hasDetails": false,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 41,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 41
      },
      "name": "BATT_SEQ_SPECIALIZE_ALGORITHMS",
      "override": false,
      "refid": "config_8hpp_1a57552d9d822c49e83c239ad9bfff0171",
      "static": false,
      "strong": false,
      "title": "BATT_SEQ_SPECIALIZE_ALGORITHMS",
      "url": "/_autogen/Files/config_8hpp/#define-batt-seq-specialize-algorithms",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-mutex-no-legacy-api",
      "brief": "Set to 1 to disable Mutex<T>::lock(). ",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_MUTEX_NO_LEGACY_API",
      "hasDetails": false,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 48,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 48
      },
      "name": "BATT_MUTEX_NO_LEGACY_API",
      "override": false,
      "refid": "config_8hpp_1a97e24f7b27c60e0e71cf227b2af5d7c8",
      "static": false,
      "strong": false,
      "summary": "Set to 1 to disable Mutex<T>::lock(). ",
      "title": "BATT_MUTEX_NO_LEGACY_API",
      "url": "/_autogen/Files/config_8hpp/#define-batt-mutex-no-legacy-api",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-with-glog",
      "brief": "Define this preprocessor symbol to enable optional support for Google Log (GLOG). ",
      "category": "defines",
      "const": false,
      "definition": "",
      "details": "NOTE: when using Conan to install Batteries in a downstream project, this shouldn't be defined directly; instead add the following to the downstream `conanfile.py`:\n\n```python\n\ndef configure(self):\n    ...\n    self.options[\"batteries\"].with_glog = True\n```",
      "explicit": false,
      "fullname": "BATT_WITH_GLOG",
      "hasDetails": true,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 65,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 65
      },
      "name": "BATT_WITH_GLOG",
      "override": false,
      "refid": "config_8hpp_1a7550b42f96d0e2d7e3d60754011f6855",
      "static": false,
      "strong": false,
      "summary": "Define this preprocessor symbol to enable optional support for Google Log (GLOG). ",
      "title": "BATT_WITH_GLOG",
      "url": "/_autogen/Files/config_8hpp/#define-batt-with-glog",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-with-protobuf",
      "brief": "Define this preprocessor symbol to enable optional support for Google Protocol Buffers (protobuf). ",
      "category": "defines",
      "const": false,
      "definition": "",
      "details": "NOTE: when using Conan to install Batteries in a downstream project, this shouldn't be defined directly; instead add the following to the downstream `conanfile.py`:\n\n```python\n\ndef configure(self):\n    ...\n    self.options[\"batteries\"].with_protobuf = True\n```",
      "explicit": false,
      "fullname": "BATT_WITH_PROTOBUF",
      "hasDetails": true,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 81,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 81
      },
      "name": "BATT_WITH_PROTOBUF",
      "override": false,
      "refid": "config_8hpp_1ad18349f0843941e5a9605efc6ed9a858",
      "static": false,
      "strong": false,
      "summary": "Define this preprocessor symbol to enable optional support for Google Protocol Buffers (protobuf). ",
      "title": "BATT_WITH_PROTOBUF",
      "url": "/_autogen/Files/config_8hpp/#define-batt-with-protobuf",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-compiler-is-gcc",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_COMPILER_IS_GCC",
      "hasDetails": false,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 105,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 105
      },
      "name": "BATT_COMPILER_IS_GCC",
      "override": false,
      "refid": "config_8hpp_1a32b580a3c82152d79e6532f87055e9df",
      "static": false,
      "strong": false,
      "title": "BATT_COMPILER_IS_GCC",
      "url": "/_autogen/Files/config_8hpp/#define-batt-compiler-is-gcc",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-if-gcc",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_IF_GCC",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 106,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 106
      },
      "name": "BATT_IF_GCC",
      "override": false,
      "params": [
        {
          "name": "expr",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "config_8hpp_1a7c6e1a1b3863a28a0a141669c1e6509b",
      "static": false,
      "strong": false,
      "title": "BATT_IF_GCC",
      "url": "/_autogen/Files/config_8hpp/#define-batt-if-gcc",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-compiler-is-clang",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_COMPILER_IS_CLANG",
      "hasDetails": false,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 118,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 118
      },
      "name": "BATT_COMPILER_IS_CLANG",
      "override": false,
      "refid": "config_8hpp_1ac0f75f28f8f8e5fce876773d982cdac6",
      "static": false,
      "strong": false,
      "title": "BATT_COMPILER_IS_CLANG",
      "url": "/_autogen/Files/config_8hpp/#define-batt-compiler-is-clang",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-if-clang",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_IF_CLANG",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 119,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 119
      },
      "name": "BATT_IF_CLANG",
      "override": false,
      "params": [
        {
          "name": "expr",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "config_8hpp_1a77ac8b322a1e8bbb270bf57a957ed058",
      "static": false,
      "strong": false,
      "title": "BATT_IF_CLANG",
      "url": "/_autogen/Files/config_8hpp/#define-batt-if-clang",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-compiler-is-msvc",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_COMPILER_IS_MSVC",
      "hasDetails": false,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 131,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 131
      },
      "name": "BATT_COMPILER_IS_MSVC",
      "override": false,
      "refid": "config_8hpp_1a8b6334af1453151c535380211d5866b7",
      "static": false,
      "strong": false,
      "title": "BATT_COMPILER_IS_MSVC",
      "url": "/_autogen/Files/config_8hpp/#define-batt-compiler-is-msvc",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-if-msvc",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_IF_MSVC",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 132,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 132
      },
      "name": "BATT_IF_MSVC",
      "override": false,
      "params": [
        {
          "name": "expr",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "config_8hpp_1a1140988e8ca89837de3be079e474dbb5",
      "static": false,
      "strong": false,
      "title": "BATT_IF_MSVC",
      "url": "/_autogen/Files/config_8hpp/#define-batt-if-msvc",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-platform-is-apple",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_PLATFORM_IS_APPLE",
      "hasDetails": false,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 149,
        "column": 10,
        "file": "batteries/config.hpp",
        "line": 149
      },
      "name": "BATT_PLATFORM_IS_APPLE",
      "override": false,
      "refid": "config_8hpp_1a0d05283c609e9aa5b9442f4d6676e4dc",
      "static": false,
      "strong": false,
      "title": "BATT_PLATFORM_IS_APPLE",
      "url": "/_autogen/Files/config_8hpp/#define-batt-platform-is-apple",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-platform-is-linux",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_PLATFORM_IS_LINUX",
      "hasDetails": false,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 156,
        "column": 10,
        "file": "batteries/config.hpp",
        "line": 156
      },
      "name": "BATT_PLATFORM_IS_LINUX",
      "override": false,
      "refid": "config_8hpp_1aadc459252cc148d504eb74c88afe8ebb",
      "static": false,
      "strong": false,
      "title": "BATT_PLATFORM_IS_LINUX",
      "url": "/_autogen/Files/config_8hpp/#define-batt-platform-is-linux",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-platform-is-windows",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_PLATFORM_IS_WINDOWS",
      "hasDetails": false,
      "initializer": "0",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 163,
        "column": 10,
        "file": "batteries/config.hpp",
        "line": 163
      },
      "name": "BATT_PLATFORM_IS_WINDOWS",
      "override": false,
      "refid": "config_8hpp_1a910dff4720cd920e5cf6898e54c01237",
      "static": false,
      "strong": false,
      "title": "BATT_PLATFORM_IS_WINDOWS",
      "url": "/_autogen/Files/config_8hpp/#define-batt-platform-is-windows",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-is-debug-build",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_IS_DEBUG_BUILD",
      "hasDetails": false,
      "initializer": "1",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 175,
        "column": 10,
        "file": "batteries/config.hpp",
        "line": 175
      },
      "name": "BATT_IS_DEBUG_BUILD",
      "override": false,
      "refid": "config_8hpp_1a217e216b88e28b4845a7820cb85d0ed7",
      "static": false,
      "strong": false,
      "title": "BATT_IS_DEBUG_BUILD",
      "url": "/_autogen/Files/config_8hpp/#define-batt-is-debug-build",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-with-asserts",
      "brief": "Enables BATT_ASSERTs explicitly (instead of inferring from -DNDEBUG) ",
      "category": "defines",
      "const": false,
      "definition": "",
      "details": "NOTE: when using Conan to install Batteries in a downstream project, this shouldn't be defined directly; instead add the following to the downstream `conanfile.py`:\n\n```python\n\ndef configure(self):\n    ...\n    self.options[\"batteries\"].with_asserts = True\n```",
      "explicit": false,
      "fullname": "BATT_WITH_ASSERTS",
      "hasDetails": true,
      "initializer": "BATT_IS_DEBUG_BUILD",
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 192,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 192
      },
      "name": "BATT_WITH_ASSERTS",
      "override": false,
      "refid": "config_8hpp_1a84b4d7e7bcc5ccde1285ca2f44601821",
      "static": false,
      "strong": false,
      "summary": "Enables BATT_ASSERTs explicitly (instead of inferring from -DNDEBUG) ",
      "title": "BATT_WITH_ASSERTS",
      "url": "/_autogen/Files/config_8hpp/#define-batt-with-asserts",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-expands-to-nothing",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_EXPANDS_TO_NOTHING",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 319,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 319
      },
      "name": "BATT_EXPANDS_TO_NOTHING",
      "override": false,
      "refid": "config_8hpp_1a6cc72a9fe24e07602a73687569fe4426",
      "static": false,
      "strong": false,
      "title": "BATT_EXPANDS_TO_NOTHING",
      "url": "/_autogen/Files/config_8hpp/#define-batt-expands-to-nothing",
      "visibility": "public"
    },
    {
      "abstract": false,
      "anchor": "#define-batt-expands-to-nothing-a",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATT_EXPANDS_TO_NOTHING_A",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/config.hpp",
        "bodyStart": 320,
        "column": 9,
        "file": "batteries/config.hpp",
        "line": 320
      },
      "name": "BATT_EXPANDS_TO_NOTHING_A",
      "override": false,
      "params": [
        {
          "name": "...",
          "type": "",
          "typePlain": ""
        }
      ],
      "refid": "config_8hpp_1a39f590b5ce56295505a04cd952afc3ea",
      "static": false,
      "strong": false,
      "title": "BATT_EXPANDS_TO_NOTHING_A",
      "url": "/_autogen/Files/config_8hpp/#define-batt-expands-to-nothing-a",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/config.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/stacktrace_decl.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/config.hpp",
    "line": 0
  },
  "name": "batteries/config.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::features",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::features",
      "refid": "namespacebatt_1_1features",
      "title": "batt::features",
      "url": "/_autogen/Namespaces/namespacebatt_1_1features/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2021-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_CONFIG_HPP\n#define BATTERIES_CONFIG_HPP\n\n//----- --- -- -  -  -   -\n// IMPORTANT: This is the only batteries header that is allowed to be included from config.hpp!\n//\n#include <batteries/stacktrace_decl.hpp>\n//\n//----- --- -- -  -  -   -\n\n#include <bitset>\n#include <exception>\n#include <iostream>\n\n#if __cplusplus < 201703L\n#error Batteries requires C++17 or later!\n#endif\n\n#if __cplusplus > 201703L\n#define BATT_CPP_20 1\n#else\n#define BATT_CPP_20 0\n#endif\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#ifndef BATT_HEADER_ONLY\n#define BATT_HEADER_ONLY 1\n#endif\n\n#if BATT_HEADER_ONLY\n#define BATT_INLINE_IMPL inline\n#else\n#define BATT_INLINE_IMPL\n#endif\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#define BATT_SEQ_SPECIALIZE_ALGORITHMS 0\n\n//+++++++++++-+-+--+----- --- -- -  -  -   -\n#ifndef BATT_MUTEX_NO_LEGACY_API\n\n#define BATT_MUTEX_NO_LEGACY_API 0\n\n#endif  // BATT_MUTEX_NO_LEGACY_API\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#ifndef BATT_WITH_GLOG\n#define BATT_WITH_GLOG 0\n#endif  // BATT_WITH_GLOG\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#ifndef BATT_WITH_PROTOBUF\n#define BATT_WITH_PROTOBUF 0\n#endif  // BATT_WITH_PROTOBUF\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// BATT_COMPILER_IS_<CC> - set to 1 if the compiler is <CC>, else set to 0\n//\n// <CC> is one of:\n//  - CLANG\n//  - GCC\n//  - MSVC\n//\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#if defined(__GNUC__) && !defined(__clang__)\n\n#define BATT_COMPILER_IS_GCC 1\n#define BATT_IF_GCC(expr) expr\n\n// This causes a lot of false positives, so disable.\n//\n#pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\"\n\n#else\n\n#define BATT_COMPILER_IS_GCC 0\n#define BATT_IF_GCC(expr)\n\n#endif\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#if defined(__clang__)\n\n#define BATT_COMPILER_IS_CLANG 1\n#define BATT_IF_CLANG(expr) expr\n\n#else\n\n#define BATT_COMPILER_IS_CLANG 0\n#define BATT_IF_CLANG(expr)\n\n#endif\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#if defined(_MSC_VER)\n\n#define BATT_COMPILER_IS_MSVC 1\n#define BATT_IF_MSVC(expr) expr\n\n#else\n\n#define BATT_COMPILER_IS_MSVC 0\n#define BATT_IF_MSVC(expr)\n\n#endif\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n// BATT_PLATFORM_IS_<OS> - defined as 1 (else 0) iff the current platform is <OS>\n//\n// <OS> is one of:\n//  - APPLE\n//  - LINUX\n//  - WINDOWS\n//\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#ifdef __APPLE__\n#define BATT_PLATFORM_IS_APPLE 1\n#else\n#define BATT_PLATFORM_IS_APPLE 0\n#endif\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#ifdef __linux__\n#define BATT_PLATFORM_IS_LINUX 1\n#else\n#define BATT_PLATFORM_IS_LINUX 0\n#endif\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#if defined(_WIN32) || defined(_WIN64)\n#define BATT_PLATFORM_IS_WINDOWS 1\n#else\n#define BATT_PLATFORM_IS_WINDOWS 0\n#endif\n\n#if BATT_PLATFORM_IS_WINDOWS\n#undef min\n#undef max\n#endif\n\n#ifndef BATT_IS_DEBUG_BUILD\n#ifdef NDEBUG\n#define BATT_IS_DEBUG_BUILD 0\n#else\n#define BATT_IS_DEBUG_BUILD 1\n#endif\n#endif\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n#ifndef BATT_WITH_ASSERTS\n#define BATT_WITH_ASSERTS BATT_IS_DEBUG_BUILD\n#endif  // BATT_WITH_ASSERTS\n\n//#=##=##=#==#=#==#===#+==#+==========+==+=+=+=+=+=++=+++=+++++=-++++=-+++++++++++\n\nnamespace batt {\n\nnamespace features {\n\nenum Feature {\n    kHeaderOnly = 0,\n    kSeqSpecializeAlgorithms,\n    kWithGlog,\n    kWithProtobuf,\n    kCompilerGCC,\n    kCompilerClang,\n    kWithAsserts,\n\n    // Not a feature - used to check that we have enough bits in the mask int type.\n    //\n    kNumFeatures,\n};\n\nusing mask_type = unsigned long long;\n\n// Make sure that the int type is big enough.\n//\nstatic_assert(features::kNumFeatures <= (sizeof(mask_type) * 8));\n\ninline constexpr mask_type get_feature_mask()\n{\n    constexpr mask_type enabled = 1;\n\n    mask_type mask = 0;\n\n    if (BATT_HEADER_ONLY) {\n        mask |= (enabled << features::kHeaderOnly);\n    }\n    if (BATT_SEQ_SPECIALIZE_ALGORITHMS) {\n        mask |= (enabled << features::kSeqSpecializeAlgorithms);\n    }\n    if (BATT_WITH_GLOG) {\n        mask |= (enabled << features::kWithGlog);\n    }\n    if (BATT_WITH_PROTOBUF) {\n        mask |= (enabled << features::kWithProtobuf);\n    }\n    if (BATT_COMPILER_IS_GCC) {\n        mask |= (enabled << features::kCompilerGCC);\n    }\n    if (BATT_COMPILER_IS_CLANG) {\n        mask |= (enabled << features::kCompilerClang);\n    }\n    if (BATT_WITH_ASSERTS) {\n        mask |= (enabled << features::kWithAsserts);\n    }\n\n    return mask;\n}\n\nstruct State {\n    boost::stacktrace::stacktrace init_trace;\n    const mask_type mask = get_feature_mask();\n};\n\ninline const State& get_global_state()\n{\n    static const State state;\n    return state;\n}\n\ninline bool check_local_feature_state()\n{\n    const State& global_state = features::get_global_state();\n\n    if (get_feature_mask() != global_state.mask) {\n        std::cerr << \"FATAL: feature mask does not match!\\n\\nfile:\" << __FILE__\n                  << \", mask=\" << std::bitset<features::kNumFeatures>{features::get_feature_mask()}\n                  << \"\\n\\nglobal mask=\" << std::bitset<features::kNumFeatures>{global_state.mask}\n                  << \"\\n\\nglobal state initialized at: \\n\\n\"\n                  << global_state.init_trace << \"\\n\"\n                  << std::endl;\n\n        std::terminate();\n    }\n    return true;\n}\n\n}  // namespace features\n\nnamespace {\n\n[[maybe_unused]] const bool feature_mask_check_for_module = features::check_local_feature_state();\n\n}  // namespace\n\n//=#=#==#==#===============+=+=+=+=++=++++++++++++++-++-+--+-+----+---------------\n\n#if BATT_PLATFORM_IS_LINUX\n#define BATT_PLATFORM_SUPPORTS_DEATH_TESTS 1\n\n#elif BATT_PLATFORM_IS_APPLE\n#define BATT_PLATFORM_SUPPORTS_DEATH_TESTS 1\n\n#elif BATT_PLATFORM_IS_WINDOWS\n#define BATT_PLATFORM_SUPPORTS_DEATH_TESTS 0\n\n#else\n#error Please define BATT_PLATFORM_SUPPORTS_DEATH_TESTS for your platform\n#endif\n\n#define BATT_EXPANDS_TO_NOTHING\n#define BATT_EXPANDS_TO_NOTHING_A(...)\n\n}  // namespace batt\n\n#endif  // BATTERIES_CONFIG_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "brief": "Captures the normative feature mask plus the stack trace where the global singleton instance of this type was initialized. ",
      "category": "classes",
      "fullname": "batt::features::State",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::features::State",
      "refid": "structbatt_1_1features_1_1State",
      "summary": "Captures the normative feature mask plus the stack trace where the global singleton instance of this type was initialized. ",
      "title": "batt::features::State",
      "url": "/_autogen/Classes/structbatt_1_1features_1_1State/",
      "visibility": "public"
    }
  ],
  "refid": "config_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/config.hpp",
  "url": "/_autogen/Files/config_8hpp/#file-config.hpp",
  "visibility": "public"
}