{
  "abstract": false,
  "anchor": "#file-tuples.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-tuples-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_TUPLES_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/tuples.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/tuples.hpp",
        "line": 5
      },
      "name": "BATTERIES_TUPLES_HPP",
      "override": false,
      "refid": "tuples_8hpp_1ac25f0149a0b327f9158a604031ed0881",
      "static": false,
      "strong": false,
      "title": "BATTERIES_TUPLES_HPP",
      "url": "/_autogen/Files/tuples_8hpp/#define-batteries-tuples-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/tuples.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/tuples.hpp",
    "line": 0
  },
  "name": "batteries/tuples.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries",
    "category": "dirs",
    "fullname": "batteries",
    "kind": "dir",
    "language": "",
    "name": "batteries",
    "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
    "title": "batteries",
    "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021-2024 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_TUPLES_HPP\n#define BATTERIES_TUPLES_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/int_types.hpp>\n#include <batteries/type_traits.hpp>\n\n#include <array>\n#include <tuple>\n#include <type_traits>\n\nnamespace batt {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n// Take the element types of a tuple and apply them as the args to some other\n// template to produce a new type.\n//\n// Example:\n// ```c++\n// using MyTypes = std::tuple<int, char, std::string>;\n// using Morphed = batt::MorphTuple_t<std::variant, MyTypes>;\n//\n// static_assert(std::is_same_v<Morphed, std::variant<int, char, std::string>>, \"\");\n// ```\n//\ntemplate <template <typename...> class TemplateT, typename TupleT>\nstruct MorphTuple;\n\ntemplate <template <typename...> class TemplateT, typename... Ts>\nstruct MorphTuple<TemplateT, std::tuple<Ts...>> : StaticType<TemplateT<Ts...>> {\n};\n\ntemplate <template <typename...> class TemplateT, typename TupleT>\nusing MorphTuple_t = typename MorphTuple<TemplateT, std::decay_t<TupleT>>::type;\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\ntemplate <typename TupleT, typename T>\nstruct TupleIndexOf;\n\ntemplate <typename T>\nstruct TupleIndexOf<std::tuple<>, T> : BATT_STATIC_VALUE(0u) {\n};\n\ntemplate <typename T, typename... Rest>\nstruct TupleIndexOf<std::tuple<T, Rest...>, T> : BATT_STATIC_VALUE(0u) {\n};\n\ntemplate <typename T, typename First, typename... Rest>\nstruct TupleIndexOf<std::tuple<First, Rest...>, T>\n    : BATT_STATIC_VALUE((1u + TupleIndexOf<std::tuple<Rest...>, T>::value)) {\n};\n\ntemplate <typename TupleT, typename T>\nconstexpr auto TupleIndexOf_v = TupleIndexOf<std::decay_t<TupleT>, T>::value;\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\ntemplate <template <typename> class PerTypeT, typename TupleT>\nstruct MapTuple;\n\ntemplate <template <typename> class PerTypeT, typename... Ts>\nstruct MapTuple<PerTypeT, std::tuple<Ts...>> : StaticType<std::tuple<PerTypeT<Ts>...>> {\n};\n\ntemplate <template <typename> class PerTypeT, typename TupleT>\nusing MapTuple_t = typename MapTuple<PerTypeT, std::decay_t<TupleT>>::type;\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\ntemplate <typename KeyTupleT, typename Value>\nclass StaticTypeMap\n{\n   public:\n    using Self = StaticTypeMap;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    static constexpr usize size()\n    {\n        return std::tuple_size<KeyTupleT>::value;\n    }\n\n    using ValueArray = std::array<Value, Self::size()>;\n    using iterator = typename ValueArray::iterator;\n    using const_iterator = typename ValueArray::const_iterator;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    StaticTypeMap() noexcept\n    {\n    }\n\n    StaticTypeMap(const StaticTypeMap&) = default;\n\n    StaticTypeMap& operator=(const StaticTypeMap&) = default;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    template <typename KeyT>\n    Value& get([[maybe_unused]] StaticType<KeyT> key = {}) noexcept\n    {\n        constexpr usize kIndex = TupleIndexOf_v<KeyTupleT, KeyT>;\n        static_assert(kIndex < Self::size());\n\n        return this->values_[kIndex];\n    }\n\n    template <typename KeyT>\n    const Value& get([[maybe_unused]] StaticType<KeyT> key = {}) const noexcept\n    {\n        constexpr usize kIndex = TupleIndexOf_v<KeyTupleT, KeyT>;\n        static_assert(kIndex < Self::size());\n\n        return this->values_[kIndex];\n    }\n\n    template <typename KeyT>\n    Value& operator[](StaticType<KeyT> key) noexcept\n    {\n        return this->get(key);\n    }\n\n    template <typename KeyT>\n    const Value& operator[](StaticType<KeyT> key) const noexcept\n    {\n        return this->get(key);\n    }\n\n    iterator begin() noexcept\n    {\n        return this->values_.begin();\n    }\n\n    iterator end() noexcept\n    {\n        return this->values_.end();\n    }\n\n    const_iterator begin() const noexcept\n    {\n        return this->values_.begin();\n    }\n\n    const_iterator end() const noexcept\n    {\n        return this->values_.end();\n    }\n\n   private:\n    // Stores all values in the map.\n    //\n    std::array<Value, Self::size()> values_{};\n};\n\n}  // namespace batt\n\n#endif  // BATTERIES_TUPLES_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::StaticType< TemplateT< Ts... > >",
          "refid": "structbatt_1_1StaticType",
          "url": "/_autogen/Classes/structbatt_1_1StaticType/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::MorphTuple< TemplateT, std::tuple< Ts... > >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::MorphTuple< TemplateT, std::tuple< Ts... > >",
      "refid": "structbatt_1_1MorphTuple_3_01TemplateT_00_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4",
      "title": "batt::MorphTuple< TemplateT, std::tuple< Ts... > >",
      "url": "/_autogen/Classes/structbatt_1_1MorphTuple_3_01TemplateT_00_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::StaticValue< decltype(0u),(0u)>",
          "refid": "structbatt_1_1StaticValue",
          "url": "/_autogen/Classes/structbatt_1_1StaticValue/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::TupleIndexOf< std::tuple<>, T >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::TupleIndexOf< std::tuple<>, T >",
      "refid": "structbatt_1_1TupleIndexOf_3_01std_1_1tuple_3_4_00_01T_01_4",
      "title": "batt::TupleIndexOf< std::tuple<>, T >",
      "url": "/_autogen/Classes/structbatt_1_1TupleIndexOf_3_01std_1_1tuple_3_4_00_01T_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::StaticValue< decltype(0u),(0u)>",
          "refid": "structbatt_1_1StaticValue",
          "url": "/_autogen/Classes/structbatt_1_1StaticValue/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::TupleIndexOf< std::tuple< T, Rest... >, T >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::TupleIndexOf< std::tuple< T, Rest... >, T >",
      "refid": "structbatt_1_1TupleIndexOf_3_01std_1_1tuple_3_01T_00_01Rest_8_8_8_01_4_00_01T_01_4",
      "title": "batt::TupleIndexOf< std::tuple< T, Rest... >, T >",
      "url": "/_autogen/Classes/structbatt_1_1TupleIndexOf_3_01std_1_1tuple_3_01T_00_01Rest_8_8_8_01_4_00_01T_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::StaticValue< decltype((1u+TupleIndexOf< std::tuple< Rest... >, T >::value)),((1u+TupleIndexOf< std::tuple< Rest... >, T >::value))>",
          "refid": "structbatt_1_1StaticValue",
          "url": "/_autogen/Classes/structbatt_1_1StaticValue/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::TupleIndexOf< std::tuple< First, Rest... >, T >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::TupleIndexOf< std::tuple< First, Rest... >, T >",
      "refid": "structbatt_1_1TupleIndexOf_3_01std_1_1tuple_3_01First_00_01Rest_8_8_8_01_4_00_01T_01_4",
      "title": "batt::TupleIndexOf< std::tuple< First, Rest... >, T >",
      "url": "/_autogen/Classes/structbatt_1_1TupleIndexOf_3_01std_1_1tuple_3_01First_00_01Rest_8_8_8_01_4_00_01T_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": false,
          "name": "batt::StaticType< std::tuple< PerTypeT< Ts >... > >",
          "refid": "structbatt_1_1StaticType",
          "url": "/_autogen/Classes/structbatt_1_1StaticType/",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::MapTuple< PerTypeT, std::tuple< Ts... > >",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::MapTuple< PerTypeT, std::tuple< Ts... > >",
      "refid": "structbatt_1_1MapTuple_3_01PerTypeT_00_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4",
      "title": "batt::MapTuple< PerTypeT, std::tuple< Ts... > >",
      "url": "/_autogen/Classes/structbatt_1_1MapTuple_3_01PerTypeT_00_01std_1_1tuple_3_01Ts_8_8_8_01_4_01_4/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "brief": "Stores a fixed-size set of Value objects, indexed by a set of bounded types (keys). ",
      "category": "classes",
      "fullname": "batt::StaticTypeMap",
      "kind": "class",
      "language": "cpp",
      "name": "batt::StaticTypeMap",
      "refid": "classbatt_1_1StaticTypeMap",
      "summary": "Stores a fixed-size set of Value objects, indexed by a set of bounded types (keys). ",
      "title": "batt::StaticTypeMap",
      "url": "/_autogen/Classes/classbatt_1_1StaticTypeMap/",
      "visibility": "public"
    }
  ],
  "refid": "tuples_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/tuples.hpp",
  "url": "/_autogen/Files/tuples_8hpp/#file-tuples.hpp",
  "visibility": "public"
}