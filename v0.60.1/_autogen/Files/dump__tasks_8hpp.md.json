{
  "abstract": false,
  "anchor": "#file-dump-tasks.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-dump-tasks-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_DUMP_TASKS_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/dump_tasks.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/dump_tasks.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_DUMP_TASKS_HPP",
      "override": false,
      "refid": "dump__tasks_8hpp_1a5d9c0c7fdee6d7d5c1cdbb8a4d889050",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_DUMP_TASKS_HPP",
      "url": "/_autogen/Files/dump__tasks_8hpp/#define-batteries-async-dump-tasks-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/dump_tasks.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/dump_tasks.hpp",
    "line": 0
  },
  "name": "batteries/async/dump_tasks.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::detail",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::detail",
      "refid": "namespacebatt_1_1detail",
      "title": "batt::detail",
      "url": "/_autogen/Namespaces/namespacebatt_1_1detail/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2022-2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_DUMP_TASKS_HPP\n#define BATTERIES_ASYNC_DUMP_TASKS_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/task.hpp>\n\n#include <batteries/assert.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/suppress.hpp>\n\n#include <boost/asio/executor_work_guard.hpp>\n#include <boost/asio/io_context.hpp>\n\nBATT_SUPPRESS_IF_GCC(\"-Wsuggest-override\")\nBATT_SUPPRESS_IF_CLANG(\"-Wsuggest-override\")\n//\n#include <boost/asio/signal_set.hpp>\n#include <boost/exception/diagnostic_information.hpp>\n//\nBATT_UNSUPPRESS_IF_CLANG()\nBATT_UNSUPPRESS_IF_GCC()\n\n#include <atomic>\n#include <chrono>\n#include <functional>\n#include <thread>\n#include <type_traits>\n\nnamespace batt {\n\nnamespace detail {\n\nclass SigInfoHandler\n{\n   public:\n    static constexpr int kSignalNum =\n#if BATT_PLATFORM_IS_LINUX\n        SIGUSR1\n#elif BATT_PLATFORM_IS_APPLE\n        SIGINFO\n#else\n        0\n#endif\n        ;\n\n    using WorkGuard =\n        batt::Optional<boost::asio::executor_work_guard<boost::asio::io_context::executor_type>>;\n\n    static SigInfoHandler& instance()\n    {\n        static std::aligned_storage_t<sizeof(SigInfoHandler)> storage_;\n        static SigInfoHandler* instance_ = [] {\n            try {\n                return new (&storage_) SigInfoHandler;\n            } catch (...) {\n                BATT_PANIC() << boost::current_exception_diagnostic_information();\n                BATT_UNREACHABLE();\n            }\n        }();\n        return *instance_;\n    }\n\n    SigInfoHandler()\n    {\n        this->sig_info_thread_.detach();\n    }\n\n    void start()\n    {\n        BATT_CHECK(this->sig_info_);\n\n#if BATT_PLATFORM_IS_WINDOWS\n        BATT_LOG_WARNING() << \"Signal handling not yet supported on Windows\";\n#else   // BATT_PLATFORM_IS_WINDOWS\n        this->wait_for_signal();\n#endif  // BATT_PLATFORM_IS_WINDOWS\n    }\n\n    void halt()\n    {\n        const bool halted_prior = this->halted_.exchange(true);\n        if (halted_prior) {\n            return;\n        }\n\n#if !BATT_PLATFORM_IS_WINDOWS\n        {\n            batt::ErrorCode ec;\n            this->sig_info_->cancel(ec);\n        }\n#endif  // BATT_PLATFORM_IS_WINDOWS\n        this->sig_info_work_guard_ = None;\n        this->sig_info_io_.stop();\n        BATT_LOG_INFO() << \"signal handlers cancelled\";\n    }\n\n    void join()\n    {\n        if (this->sig_info_thread_.joinable()) {\n            this->sig_info_thread_.join();\n        }\n    }\n\n    void wait_for_signal()\n    {\n        this->last_sig_info_ = std::chrono::steady_clock::now();\n        this->sig_info_->async_wait([this](auto&&... args) {\n            return this->handle_signal(BATT_FORWARD(args)...);\n        });\n    }\n\n    void handle_signal(const boost::system::error_code& ec, int signal_n)\n    {\n        if (ec || this->halted_.load()) {\n            return;\n        }\n\n        using namespace std::literals::chrono_literals;\n\n        const bool force = (std::chrono::steady_clock::now() - this->last_sig_info_) <= 5s;\n        std::cerr << \"[batt::SigInfoHandler::operator()(\" << signal_n << \"); force=\" << force << \"]\"\n                  << std::endl;\n\n        batt::Task::backtrace_all(force);\n        this->last_sig_info_ = std::chrono::steady_clock::now();\n        this->wait_for_signal();\n    }\n\n   private:\n    std::atomic<bool> halted_{false};\n\n    boost::asio::io_context sig_info_io_;\n\n    Optional<WorkGuard> sig_info_work_guard_{this->sig_info_io_.get_executor()};\n\n    Optional<boost::asio::signal_set> sig_info_{this->sig_info_io_, SigInfoHandler::kSignalNum};\n\n    std::chrono::steady_clock::time_point last_sig_info_ = std::chrono::steady_clock::now();\n\n    std::thread sig_info_thread_{[this] {\n        this->sig_info_io_.run();\n    }};\n};\n\n}  // namespace detail\n\ninline bool enable_dump_tasks()\n{\n    static bool initialized_ = [] {\n#if BATT_PLATFORM_IS_WINDOWS\n        BATT_LOG_WARNING() << \"Signal handling not yet supported on Windows\";\n#else   // BATT_PLATFORM_IS_WINDOWS\n        detail::SigInfoHandler::instance().start();\n#endif  // BATT_PLATFORM_IS_WINDOWS\n        return true;\n    }();\n\n    return initialized_;\n}\n\n}  // namespace batt\n\n#endif  // BATTERIES_ASYNC_DUMP_TASKS_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::detail::SigInfoHandler",
      "kind": "class",
      "language": "cpp",
      "name": "batt::detail::SigInfoHandler",
      "refid": "classbatt_1_1detail_1_1SigInfoHandler",
      "title": "batt::detail::SigInfoHandler",
      "url": "/_autogen/Classes/classbatt_1_1detail_1_1SigInfoHandler/",
      "visibility": "public"
    }
  ],
  "refid": "dump__tasks_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/dump_tasks.hpp",
  "url": "/_autogen/Files/dump__tasks_8hpp/#file-dump-tasks.hpp",
  "visibility": "public"
}