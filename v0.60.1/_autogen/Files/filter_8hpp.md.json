{
  "abstract": false,
  "anchor": "#file-filter.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-seq-filter-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_SEQ_FILTER_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/seq/filter.hpp",
        "bodyStart": 5,
        "column": 9,
        "file": "batteries/seq/filter.hpp",
        "line": 5
      },
      "name": "BATTERIES_SEQ_FILTER_HPP",
      "override": false,
      "refid": "filter_8hpp_1a19bb9a11542d47d7a17272ce334194ea",
      "static": false,
      "strong": false,
      "title": "BATTERIES_SEQ_FILTER_HPP",
      "url": "/_autogen/Files/filter_8hpp/#define-batteries-seq-filter-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/seq/filter.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/seq/filter.hpp",
    "line": 0
  },
  "name": "batteries/seq/filter.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt::seq",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt::seq",
      "refid": "namespacebatt_1_1seq",
      "title": "batt::seq",
      "url": "/_autogen/Namespaces/namespacebatt_1_1seq/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/seq",
    "category": "dirs",
    "fullname": "batteries/seq",
    "kind": "dir",
    "language": "",
    "name": "batteries/seq",
    "refid": "dir_0985703d1fb34e0edc7cc330d020d62d",
    "title": "batteries/seq",
    "url": "/_autogen/Files/dir_0985703d1fb34e0edc7cc330d020d62d/#dir-batteries/seq",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/seq",
      "category": "dirs",
      "fullname": "batteries/seq",
      "kind": "dir",
      "language": "",
      "name": "batteries/seq",
      "refid": "dir_0985703d1fb34e0edc7cc330d020d62d",
      "title": "batteries/seq",
      "url": "/_autogen/Files/dir_0985703d1fb34e0edc7cc330d020d62d/#dir-batteries/seq",
      "visibility": "public"
    }
  ],
  "programlisting": "// Copyright 2021 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_SEQ_FILTER_HPP\n#define BATTERIES_SEQ_FILTER_HPP\n\n#include <batteries/config.hpp>\n#include <batteries/hint.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/seq/seq_item.hpp>\n#include <batteries/utility.hpp>\n\nnamespace batt {\nnamespace seq {\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n// filter\n//\ntemplate <typename Seq, typename Predicate>\nclass Filter\n{\n   public:\n    using Item = SeqItem<Seq>;\n\n    explicit Filter(Seq&& seq, Predicate&& predicate) noexcept\n        : seq_(BATT_FORWARD(seq))\n        , predicate_(BATT_FORWARD(predicate))\n    {\n    }\n\n    Filter(Filter&& that) noexcept : seq_(BATT_FORWARD(that.seq_)), predicate_(BATT_FORWARD(*that.predicate_))\n    {\n    }\n\n    Filter& operator=(Filter&& that) noexcept\n    {\n        if (BATT_HINT_TRUE(this != &that)) {\n            seq_ = BATT_FORWARD(that.seq_);\n            predicate_.emplace(BATT_FORWARD(*that.predicate_));\n        }\n        return *this;\n    }\n\n    Filter(const Filter& that) : seq_(that.seq_), predicate_(*that.predicate_)\n    {\n    }\n\n    Filter& operator=(const Filter& that)\n    {\n        if (BATT_HINT_TRUE(this != &that)) {\n            seq_ = that.seq_;\n            predicate_.emplace(*that.predicate_);\n        }\n        return *this;\n    }\n\n    Optional<Item> peek()\n    {\n        for (;;) {\n            Optional<Item> item = this->seq_.peek();\n            if (!item || (*this->predicate_)(*item)) {\n                return item;\n            }\n            (void)this->seq_.next();\n        }\n    }\n\n    Optional<Item> next()\n    {\n        for (;;) {\n            Optional<Item> item = this->seq_.next();\n            if (!item || (*this->predicate_)(*item)) {\n                return item;\n            }\n        }\n    }\n\n    //--------------------------\n\n#if BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n    template <typename Seq_, typename Pred, typename EachFn>\n    friend LoopControl operator|(Filter<Seq_, Pred>&& filter_seq, ForEachBinder<EachFn>&& binder);\n\n#endif  // BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n   private:\n    Seq seq_;\n    Optional<Predicate> predicate_;\n};\n\ntemplate <typename Predicate>\nstruct FilterBinder {\n    Predicate predicate;\n};\n\ntemplate <typename Predicate>\nFilterBinder<Predicate> filter(Predicate&& predicate)\n{\n    return {BATT_FORWARD(predicate)};\n}\n\ntemplate <typename Seq, typename Predicate>\n[[nodiscard]] Filter<Seq, Predicate> operator|(Seq&& seq, FilterBinder<Predicate>&& binder)\n{\n    static_assert(std::is_same_v<Seq, std::decay_t<Seq>>,\n                  \"Filtered sequences may not be captured implicitly by reference.\");\n\n    static_assert(std::is_same_v<Predicate, std::decay_t<Predicate>>,\n                  \"Predicate functions may not be captured implicitly by reference.\");\n\n    return Filter<Seq, Predicate>{BATT_FORWARD(seq), BATT_FORWARD(binder.predicate)};\n}\n\n//==#==========+==+=+=++=+++++++++++-+-+--+----- --- -- -  -  -   -\n\n#if BATT_SEQ_SPECIALIZE_ALGORITHMS\n\ntemplate <typename Seq, typename Pred, typename EachFn>\nLoopControl operator|(Filter<Seq, Pred>&& filter_seq, ForEachBinder<EachFn>&& binder)\n{\n    auto& pred_fn = *filter_seq.predicate_;\n\n    auto loop_body = [&](auto&& item) -> LoopControl {\n        if (!pred_fn(item)) {\n            return kContinue;\n        }\n        return run_loop_fn(binder.fn, item);\n    };\n\n    return std::forward<Seq>(filter_seq.seq_) | for_each(loop_body);\n}\n\n#endif  // BATT_SEQ_SPECIALIZE_ALGORITHMS\n\n}  // namespace seq\n}  // namespace batt\n\n#endif  // BATTERIES_SEQ_FILTER_HPP",
  "publicClasses": [
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::Filter",
      "kind": "class",
      "language": "cpp",
      "name": "batt::seq::Filter",
      "refid": "classbatt_1_1seq_1_1Filter",
      "title": "batt::seq::Filter",
      "url": "/_autogen/Classes/classbatt_1_1seq_1_1Filter/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::seq::FilterBinder",
      "kind": "struct",
      "language": "cpp",
      "name": "batt::seq::FilterBinder",
      "refid": "structbatt_1_1seq_1_1FilterBinder",
      "title": "batt::seq::FilterBinder",
      "url": "/_autogen/Classes/structbatt_1_1seq_1_1FilterBinder/",
      "visibility": "public"
    }
  ],
  "refid": "filter_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/seq/filter.hpp",
  "url": "/_autogen/Files/filter_8hpp/#file-filter.hpp",
  "visibility": "public"
}