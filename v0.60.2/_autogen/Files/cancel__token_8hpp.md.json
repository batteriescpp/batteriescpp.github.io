{
  "abstract": false,
  "anchor": "#file-cancel-token.hpp",
  "category": "files",
  "const": false,
  "defines": [
    {
      "abstract": false,
      "anchor": "#define-batteries-async-cancel-token-hpp",
      "category": "defines",
      "const": false,
      "definition": "",
      "explicit": false,
      "fullname": "BATTERIES_ASYNC_CANCEL_TOKEN_HPP",
      "hasDetails": false,
      "inline": false,
      "kind": "define",
      "language": "cpp",
      "location": {
        "bodyFile": "batteries/async/cancel_token.hpp",
        "bodyStart": 6,
        "column": 9,
        "file": "batteries/async/cancel_token.hpp",
        "line": 6
      },
      "name": "BATTERIES_ASYNC_CANCEL_TOKEN_HPP",
      "override": false,
      "refid": "cancel__token_8hpp_1a97d437509b580727c5a5405ef6886022",
      "static": false,
      "strong": false,
      "title": "BATTERIES_ASYNC_CANCEL_TOKEN_HPP",
      "url": "/_autogen/Files/cancel__token_8hpp/#define-batteries-async-cancel-token-hpp",
      "visibility": "public"
    }
  ],
  "definition": "",
  "explicit": false,
  "fullname": "batteries/async/cancel_token.hpp",
  "hasAdditionalMembers": false,
  "hasDetails": false,
  "includes": "<batteries/config.hpp>",
  "inline": false,
  "kind": "file",
  "language": "cpp",
  "location": {
    "column": 0,
    "file": "batteries/async/cancel_token.hpp",
    "line": 0
  },
  "name": "batteries/async/cancel_token.hpp",
  "namespaces": [
    {
      "anchor": "",
      "category": "namespaces",
      "fullname": "batt",
      "kind": "namespace",
      "language": "cpp",
      "name": "batt",
      "refid": "namespacebatt",
      "title": "batt",
      "url": "/_autogen/Namespaces/namespacebatt/",
      "visibility": "public"
    }
  ],
  "override": false,
  "parent": {
    "anchor": "#dir-batteries/async",
    "category": "dirs",
    "fullname": "batteries/async",
    "kind": "dir",
    "language": "",
    "name": "batteries/async",
    "refid": "dir_faaa2176564b41e79cedcf3028f42662",
    "title": "batteries/async",
    "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
    "visibility": "public"
  },
  "parentBreadcrumbs": [
    {
      "anchor": "#dir-batteries",
      "category": "dirs",
      "fullname": "batteries",
      "kind": "dir",
      "language": "",
      "name": "batteries",
      "refid": "dir_af4e2857c92a31b60ebae85174ebeccb",
      "title": "batteries",
      "url": "/_autogen/Files/dir_af4e2857c92a31b60ebae85174ebeccb/#dir-batteries",
      "visibility": "public"
    },
    {
      "anchor": "#dir-batteries/async",
      "category": "dirs",
      "fullname": "batteries/async",
      "kind": "dir",
      "language": "",
      "name": "batteries/async",
      "refid": "dir_faaa2176564b41e79cedcf3028f42662",
      "title": "batteries/async",
      "url": "/_autogen/Files/dir_faaa2176564b41e79cedcf3028f42662/#dir-batteries/async",
      "visibility": "public"
    }
  ],
  "programlisting": "//######=###=##=#=#=#=#=#==#==#====#+==#+==============+==+==+==+=+==+=+=+=+=+=+=+\n// Copyright 2023 Anthony Paul Astolfi\n//\n#pragma once\n#ifndef BATTERIES_ASYNC_CANCEL_TOKEN_HPP\n#define BATTERIES_ASYNC_CANCEL_TOKEN_HPP\n\n#include <batteries/config.hpp>\n//\n#include <batteries/async/handler.hpp>\n#include <batteries/async/watch.hpp>\n\n#include <batteries/assert.hpp>\n#include <batteries/cpu_align.hpp>\n#include <batteries/int_types.hpp>\n#include <batteries/optional.hpp>\n#include <batteries/shared_ptr.hpp>\n#include <batteries/small_fn.hpp>\n#include <batteries/status.hpp>\n\n#include <bitset>\n#include <functional>\n#include <ostream>\n\nnamespace batt {\n\n// Forward-declarations.\n//\nclass CancelToken;\n\nusize hash_value(const CancelToken& cancel_token);\n\nbool operator==(const CancelToken& l, const CancelToken& r);\n\nbool operator!=(const CancelToken& l, const CancelToken& r);\n\nbool operator<(const CancelToken& l, const CancelToken& r);\n\nbool operator>(const CancelToken& l, const CancelToken& r);\n\nbool operator<=(const CancelToken& l, const CancelToken& r);\n\nbool operator>=(const CancelToken& l, const CancelToken& r);\n\nclass CancelToken\n{\n   public:\n    friend usize hash_value(const CancelToken& cancel_token);\n    friend bool operator==(const CancelToken& l, const CancelToken& r);\n    friend bool operator<(const CancelToken& l, const CancelToken& r);\n    friend bool operator!=(const CancelToken& l, const CancelToken& r);\n    friend bool operator>(const CancelToken& l, const CancelToken& r);\n    friend bool operator<=(const CancelToken& l, const CancelToken& r);\n    friend bool operator>=(const CancelToken& l, const CancelToken& r);\n\n    static constexpr u32 kIdle = 0;\n    static constexpr u32 kActiveHandler = 1;\n    static constexpr u32 kResolving = 2;\n    static constexpr u32 kCompleted = 4;\n    static constexpr u32 kCancelled = 8;\n\n    static constexpr bool is_idle_state(u32 value)\n    {\n        return (value & (kActiveHandler | kResolving | kCompleted)) == 0;\n    }\n\n    static constexpr bool is_cancelled_state(u32 value)\n    {\n        return (value & kCancelled) != 0;\n    }\n\n    static constexpr bool is_completed_state(u32 value)\n    {\n        return (value & kCompleted) != 0;\n    }\n\n    static constexpr bool is_resolved_state(u32 value)\n    {\n        return (value & (kCompleted | kCancelled)) != 0;\n    }\n\n    //----- --- -- -  -  -   -\n\n    class Impl : public batt::RefCounted<Impl>\n    {\n       public:\n        bool is_cancelled() const noexcept\n        {\n            return (this->state_.get_value() & kCancelled) == kCancelled;\n        }\n\n        //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n        batt::HandlerMemory<2 * kCpuCacheLineSize - sizeof(batt::Watch<u32>)> memory_;\n        batt::Watch<u32> state_{kIdle};\n    };\n\n    //----- --- -- -  -  -   -\n\n    template <typename T>\n    class HandlerImpl\n    {\n       public:\n        explicit HandlerImpl(batt::SharedPtr<Impl>&& impl, batt::Optional<T>& result) noexcept;\n\n        HandlerImpl(const HandlerImpl&) = default;\n        HandlerImpl& operator=(const HandlerImpl&) = default;\n\n        template <typename... Args>\n        void operator()(Args&&... args) const noexcept;\n\n        bool is_cancelled() const noexcept\n        {\n            return this->impl_->is_cancelled();\n        }\n\n       private:\n        batt::SharedPtr<Impl> impl_;\n        batt::Optional<T>* result_;\n    };\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    static const CancelToken& none() noexcept;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    /*implicit*/ CancelToken(NoneType) noexcept;\n\n    CancelToken() = default;\n\n    CancelToken(const CancelToken&) = default;\n\n    CancelToken& operator=(const CancelToken&) = default;\n\n    CancelToken& operator=(const NoneType&) noexcept;\n\n    //----- --- -- -  -  -   -\n\n    template <typename T, typename Fn>\n    batt::StatusOr<T> await(Fn&& fn) const noexcept;\n\n    template <typename Fn>\n    batt::Status await(Fn&& fn) const noexcept\n    {\n        return this->await<batt::Status>(BATT_FORWARD(fn));\n    }\n\n    void cancel() const noexcept;\n\n    bool is_valid() const noexcept;\n\n    bool is_cancelled() const noexcept;\n\n    explicit operator bool() const noexcept;\n\n    SmallFn<void(std::ostream&)> debug_info() const noexcept;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n   private:\n    template <typename T>\n    auto make_handler(batt::Optional<T>& result) const noexcept;\n\n    //+++++++++++-+-+--+----- --- -- -  -  -   -\n\n    batt::SharedPtr<Impl> impl_{new Impl};\n};\n\ntemplate <typename T>\ninline bool is_cancelled(const CancelToken::HandlerImpl<T>& handler)\n{\n    return handler.is_cancelled();\n}\n\ntemplate <typename T>\ninline bool is_cancelled(const CustomAllocHandler<CancelToken::HandlerImpl<T>>& handler)\n{\n    return is_cancelled(handler.get_handler());\n}\n\ninline usize hash_value(const CancelToken& cancel_token)\n{\n    return std::hash<void*>{}(cancel_token.impl_.get());\n}\n\ninline bool operator==(const CancelToken& l, const CancelToken& r)\n{\n    return l.impl_ == r.impl_;\n}\n\ninline bool operator!=(const CancelToken& l, const CancelToken& r)\n{\n    return !(l == r);\n}\n\ninline bool operator<(const CancelToken& l, const CancelToken& r)\n{\n    return l.impl_ < r.impl_;\n}\n\ninline bool operator>(const CancelToken& l, const CancelToken& r)\n{\n    return r < l;\n}\n\ninline bool operator<=(const CancelToken& l, const CancelToken& r)\n{\n    return !(r < l);\n}\n\ninline bool operator>=(const CancelToken& l, const CancelToken& r)\n{\n    return !(l < r);\n}\n\n}  // namespace batt\n\n#include <batteries/async/cancel_token.ipp>\n\n#endif  // BATTERIES_ASYNC_CANCEL_TOKEN_HPP\n\n#include <batteries/config.hpp>\n//\n#if BATT_HEADER_ONLY\n#include <batteries/async/cancel_token_impl.hpp>\n#endif",
  "publicClasses": [
    {
      "anchor": "",
      "brief": "Enables effective cancellation of arbitrary async operations. ",
      "category": "classes",
      "fullname": "batt::CancelToken",
      "kind": "class",
      "language": "cpp",
      "name": "batt::CancelToken",
      "refid": "classbatt_1_1CancelToken",
      "summary": "Enables effective cancellation of arbitrary async operations. ",
      "title": "batt::CancelToken",
      "url": "/_autogen/Classes/classbatt_1_1CancelToken/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "baseClasses": [
        {
          "external": true,
          "name": "batt::RefCounted< Impl >",
          "virtual": "non-virtual",
          "visibility": "public"
        }
      ],
      "category": "classes",
      "fullname": "batt::CancelToken::Impl",
      "kind": "class",
      "language": "cpp",
      "name": "batt::CancelToken::Impl",
      "refid": "classbatt_1_1CancelToken_1_1Impl",
      "title": "batt::CancelToken::Impl",
      "url": "/_autogen/Classes/classbatt_1_1CancelToken_1_1Impl/",
      "visibility": "public"
    },
    {
      "anchor": "",
      "category": "classes",
      "fullname": "batt::CancelToken::HandlerImpl",
      "kind": "class",
      "language": "cpp",
      "name": "batt::CancelToken::HandlerImpl",
      "refid": "classbatt_1_1CancelToken_1_1HandlerImpl",
      "title": "batt::CancelToken::HandlerImpl",
      "url": "/_autogen/Classes/classbatt_1_1CancelToken_1_1HandlerImpl/",
      "visibility": "public"
    }
  ],
  "refid": "cancel__token_8hpp",
  "static": false,
  "strong": false,
  "title": "batteries/async/cancel_token.hpp",
  "url": "/_autogen/Files/cancel__token_8hpp/#file-cancel-token.hpp",
  "visibility": "public"
}